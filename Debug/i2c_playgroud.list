
i2c_playgroud.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08009960  08009960  0000a960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f40  08009f40  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009f40  08009f40  0000af40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f48  08009f48  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f48  08009f48  0000af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f4c  08009f4c  0000af4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009f50  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e8  2**0
                  CONTENTS
 10 .bss          000002d8  200001e8  200001e8  0000b1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db49  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229b  00000000  00000000  00018d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  0001b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b5  00000000  00000000  0001bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002182e  00000000  00000000  0001c40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102f3  00000000  00000000  0003dc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c41f0  00000000  00000000  0004df2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011211e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041f0  00000000  00000000  00112164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00116354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009944 	.word	0x08009944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009944 	.word	0x08009944

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c76:	f000 b99d 	b.w	8000fb4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f835 	bl	8000cf8 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f828 	bl	8000cf8 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f817 	bl	8000cf8 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f809 	bl	8000cf8 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <Error>:
extern char str1[100];
BME280_CalibData CalibData;
int32_t temper_int;
//------------------------------------------------
void Error(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  LED_OFF;
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2120      	movs	r1, #32
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc4:	f001 ff86 	bl	8002ed4 <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <I2Cx_WriteData>:
//------------------------------------------------
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	80fb      	strh	r3, [r7, #6]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	717b      	strb	r3, [r7, #5]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Write(&hi2c1, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x10000);
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	88f9      	ldrh	r1, [r7, #6]
 8000fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4806      	ldr	r0, [pc, #24]	@ (8001014 <I2Cx_WriteData+0x48>)
 8000ffa:	f002 f81f 	bl	800303c <HAL_I2C_Mem_Write>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <I2Cx_WriteData+0x40>
 8001008:	f7ff ffd6 	bl	8000fb8 <Error>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000022c 	.word	0x2000022c

08001018 <I2Cx_ReadData>:
//------------------------------------------------
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af04      	add	r7, sp, #16
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	80fb      	strh	r3, [r7, #6]
 8001024:	4613      	mov	r3, r2
 8001026:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	73bb      	strb	r3, [r7, #14]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 0x10000);
 8001030:	797b      	ldrb	r3, [r7, #5]
 8001032:	b29a      	uxth	r2, r3
 8001034:	88f9      	ldrh	r1, [r7, #6]
 8001036:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f107 030e 	add.w	r3, r7, #14
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	4807      	ldr	r0, [pc, #28]	@ (8001068 <I2Cx_ReadData+0x50>)
 800104a:	f002 f90b 	bl	8003264 <HAL_I2C_Mem_Read>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <I2Cx_ReadData+0x44>
 8001058:	f7ff ffae 	bl	8000fb8 <Error>
  return value;
 800105c:	7bbb      	ldrb	r3, [r7, #14]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000022c 	.word	0x2000022c

0800106c <I2Cx_ReadData16>:
//------------------------------------------------
static void I2Cx_ReadData16(uint16_t Addr, uint8_t Reg, uint16_t *Value)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af04      	add	r7, sp, #16
 8001072:	4603      	mov	r3, r0
 8001074:	603a      	str	r2, [r7, #0]
 8001076:	80fb      	strh	r3, [r7, #6]
 8001078:	460b      	mov	r3, r1
 800107a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 2, 0x10000);
 8001080:	797b      	ldrb	r3, [r7, #5]
 8001082:	b29a      	uxth	r2, r3
 8001084:	88f9      	ldrh	r1, [r7, #6]
 8001086:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2302      	movs	r3, #2
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <I2Cx_ReadData16+0x48>)
 8001098:	f002 f8e4 	bl	8003264 <HAL_I2C_Mem_Read>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <I2Cx_ReadData16+0x3e>
 80010a6:	f7ff ff87 	bl	8000fb8 <Error>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000022c 	.word	0x2000022c

080010b8 <I2Cx_ReadData24>:
//------------------------------------------------
static void I2Cx_ReadData24(uint16_t Addr, uint8_t Reg, uint32_t *Value)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af04      	add	r7, sp, #16
 80010be:	4603      	mov	r3, r0
 80010c0:	603a      	str	r2, [r7, #0]
 80010c2:	80fb      	strh	r3, [r7, #6]
 80010c4:	460b      	mov	r3, r1
 80010c6:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
  status = HAL_I2C_Mem_Read(&hi2c1, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)Value, 3, 0x10000);
 80010cc:	797b      	ldrb	r3, [r7, #5]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	88f9      	ldrh	r1, [r7, #6]
 80010d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2303      	movs	r3, #3
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <I2Cx_ReadData24+0x48>)
 80010e4:	f002 f8be 	bl	8003264 <HAL_I2C_Mem_Read>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK) Error();
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <I2Cx_ReadData24+0x3e>
 80010f2:	f7ff ff61 	bl	8000fb8 <Error>
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000022c 	.word	0x2000022c

08001104 <BME280_WriteReg>:
//------------------------------------------------
void BME280_WriteReg(uint8_t Reg, uint8_t Value)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
  I2Cx_WriteData(BME280_ADDRESS, Reg, Value);
 8001114:	79ba      	ldrb	r2, [r7, #6]
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4619      	mov	r1, r3
 800111a:	20ec      	movs	r0, #236	@ 0xec
 800111c:	f7ff ff56 	bl	8000fcc <I2Cx_WriteData>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <BME280_ReadReg>:
//------------------------------------------------
uint8_t BME280_ReadReg(uint8_t Reg)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  uint8_t res = I2Cx_ReadData(BME280_ADDRESS,Reg);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4619      	mov	r1, r3
 8001136:	20ec      	movs	r0, #236	@ 0xec
 8001138:	f7ff ff6e 	bl	8001018 <I2Cx_ReadData>
 800113c:	4603      	mov	r3, r0
 800113e:	73fb      	strb	r3, [r7, #15]
  return res;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <BME280_ReadReg_U16>:
//------------------------------------------------
void BME280_ReadReg_U16(uint8_t Reg, uint16_t *Value)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,Value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	4619      	mov	r1, r3
 800115c:	20ec      	movs	r0, #236	@ 0xec
 800115e:	f7ff ff85 	bl	800106c <I2Cx_ReadData16>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <BME280_ReadReg_S16>:
//------------------------------------------------
void BME280_ReadReg_S16(uint8_t Reg, int16_t *Value)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	6039      	str	r1, [r7, #0]
 8001174:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg, (uint16_t*) Value);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	20ec      	movs	r0, #236	@ 0xec
 800117e:	f7ff ff75 	bl	800106c <I2Cx_ReadData16>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <BME280_ReadReg_BE_S16>:
//------------------------------------------------
void BME280_ReadReg_BE_S16(uint8_t Reg, int16_t *Value)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	6039      	str	r1, [r7, #0]
 8001194:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData16(BME280_ADDRESS,Reg,(uint16_t*)Value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	20ec      	movs	r0, #236	@ 0xec
 800119e:	f7ff ff65 	bl	800106c <I2Cx_ReadData16>
  *(uint16_t *) Value = be16toword(*(uint16_t *) Value);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	801a      	strh	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <BME280_ReadReg_BE_U24>:
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
  *(uint32_t *) Value &= 0x00FFFFFF;
}
//------------------------------------------------
void BME280_ReadReg_BE_U24(uint8_t Reg, uint32_t *Value)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	71fb      	strb	r3, [r7, #7]
  I2Cx_ReadData24(BME280_ADDRESS,Reg,Value);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	20ec      	movs	r0, #236	@ 0xec
 80011da:	f7ff ff6d 	bl	80010b8 <I2Cx_ReadData24>
  *(uint32_t *) Value = be24toword(*(uint32_t *) Value) & 0x00FFFFFF;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0c1b      	lsrs	r3, r3, #16
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80011ee:	431a      	orrs	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	041b      	lsls	r3, r3, #16
 80011f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80011fa:	4313      	orrs	r3, r2
 80011fc:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <BME280_ReadStatus>:
//------------------------------------------------
uint8_t BME280_ReadStatus(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  //clear unuset bits
  uint8_t res = BME280_ReadReg(BME280_REGISTER_STATUS)&0x09;
 8001212:	20f3      	movs	r0, #243	@ 0xf3
 8001214:	f7ff ff88 	bl	8001128 <BME280_ReadReg>
 8001218:	4603      	mov	r3, r0
 800121a:	f003 0309 	and.w	r3, r3, #9
 800121e:	71fb      	strb	r3, [r7, #7]
  return res;
 8001220:	79fb      	ldrb	r3, [r7, #7]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <BME280_ReadCoefficients>:
//------------------------------------------------
void BME280_ReadCoefficients(void)
{
 800122c:	b598      	push	{r3, r4, r7, lr}
 800122e:	af00      	add	r7, sp, #0
  BME280_ReadReg_U16(BME280_REGISTER_DIG_T1,&CalibData.dig_T1);
 8001230:	49ba      	ldr	r1, [pc, #744]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001232:	2088      	movs	r0, #136	@ 0x88
 8001234:	f7ff ff89 	bl	800114a <BME280_ReadReg_U16>
  sprintf(str1, "DIG_T1: %u\r\n", CalibData.dig_T1);
 8001238:	4bb8      	ldr	r3, [pc, #736]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	49b8      	ldr	r1, [pc, #736]	@ (8001520 <BME280_ReadCoefficients+0x2f4>)
 8001240:	48b8      	ldr	r0, [pc, #736]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001242:	f005 faf5 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001246:	48b7      	ldr	r0, [pc, #732]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001248:	f7ff f81a 	bl	8000280 <strlen>
 800124c:	4603      	mov	r3, r0
 800124e:	b29a      	uxth	r2, r3
 8001250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001254:	49b3      	ldr	r1, [pc, #716]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001256:	48b4      	ldr	r0, [pc, #720]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 8001258:	f004 f958 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T2,&CalibData.dig_T2);
 800125c:	49b3      	ldr	r1, [pc, #716]	@ (800152c <BME280_ReadCoefficients+0x300>)
 800125e:	208a      	movs	r0, #138	@ 0x8a
 8001260:	f7ff ff83 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T2: %d\r\n", CalibData.dig_T2);
 8001264:	4bad      	ldr	r3, [pc, #692]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001266:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800126a:	461a      	mov	r2, r3
 800126c:	49b0      	ldr	r1, [pc, #704]	@ (8001530 <BME280_ReadCoefficients+0x304>)
 800126e:	48ad      	ldr	r0, [pc, #692]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001270:	f005 fade 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001274:	48ab      	ldr	r0, [pc, #684]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001276:	f7ff f803 	bl	8000280 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001282:	49a8      	ldr	r1, [pc, #672]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001284:	48a8      	ldr	r0, [pc, #672]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 8001286:	f004 f941 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_T3,&CalibData.dig_T3);
 800128a:	49aa      	ldr	r1, [pc, #680]	@ (8001534 <BME280_ReadCoefficients+0x308>)
 800128c:	208c      	movs	r0, #140	@ 0x8c
 800128e:	f7ff ff6c 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_T3: %d\r\n", CalibData.dig_T3);
 8001292:	4ba2      	ldr	r3, [pc, #648]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001294:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
 800129a:	49a7      	ldr	r1, [pc, #668]	@ (8001538 <BME280_ReadCoefficients+0x30c>)
 800129c:	48a1      	ldr	r0, [pc, #644]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800129e:	f005 fac7 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80012a2:	48a0      	ldr	r0, [pc, #640]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80012a4:	f7fe ffec 	bl	8000280 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b0:	499c      	ldr	r1, [pc, #624]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80012b2:	489d      	ldr	r0, [pc, #628]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 80012b4:	f004 f92a 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_U16(BME280_REGISTER_DIG_P1,&CalibData.dig_P1);
 80012b8:	49a0      	ldr	r1, [pc, #640]	@ (800153c <BME280_ReadCoefficients+0x310>)
 80012ba:	208e      	movs	r0, #142	@ 0x8e
 80012bc:	f7ff ff45 	bl	800114a <BME280_ReadReg_U16>
  sprintf(str1, "DIG_P1: %u\r\n", CalibData.dig_P1);
 80012c0:	4b96      	ldr	r3, [pc, #600]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 80012c2:	88db      	ldrh	r3, [r3, #6]
 80012c4:	461a      	mov	r2, r3
 80012c6:	499e      	ldr	r1, [pc, #632]	@ (8001540 <BME280_ReadCoefficients+0x314>)
 80012c8:	4896      	ldr	r0, [pc, #600]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80012ca:	f005 fab1 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80012ce:	4895      	ldr	r0, [pc, #596]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80012d0:	f7fe ffd6 	bl	8000280 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	4991      	ldr	r1, [pc, #580]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80012de:	4892      	ldr	r0, [pc, #584]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 80012e0:	f004 f914 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P2,&CalibData.dig_P2);
 80012e4:	4997      	ldr	r1, [pc, #604]	@ (8001544 <BME280_ReadCoefficients+0x318>)
 80012e6:	2090      	movs	r0, #144	@ 0x90
 80012e8:	f7ff ff3f 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P2: %d\r\n", CalibData.dig_P2);
 80012ec:	4b8b      	ldr	r3, [pc, #556]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 80012ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4994      	ldr	r1, [pc, #592]	@ (8001548 <BME280_ReadCoefficients+0x31c>)
 80012f6:	488b      	ldr	r0, [pc, #556]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80012f8:	f005 fa9a 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80012fc:	4889      	ldr	r0, [pc, #548]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80012fe:	f7fe ffbf 	bl	8000280 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	b29a      	uxth	r2, r3
 8001306:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130a:	4986      	ldr	r1, [pc, #536]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800130c:	4886      	ldr	r0, [pc, #536]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 800130e:	f004 f8fd 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P3,&CalibData.dig_P3);
 8001312:	498e      	ldr	r1, [pc, #568]	@ (800154c <BME280_ReadCoefficients+0x320>)
 8001314:	2092      	movs	r0, #146	@ 0x92
 8001316:	f7ff ff28 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P3: %d\r\n", CalibData.dig_P3);
 800131a:	4b80      	ldr	r3, [pc, #512]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 800131c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001320:	461a      	mov	r2, r3
 8001322:	498b      	ldr	r1, [pc, #556]	@ (8001550 <BME280_ReadCoefficients+0x324>)
 8001324:	487f      	ldr	r0, [pc, #508]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001326:	f005 fa83 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800132a:	487e      	ldr	r0, [pc, #504]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800132c:	f7fe ffa8 	bl	8000280 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b29a      	uxth	r2, r3
 8001334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001338:	497a      	ldr	r1, [pc, #488]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800133a:	487b      	ldr	r0, [pc, #492]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 800133c:	f004 f8e6 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P4,&CalibData.dig_P4);
 8001340:	4984      	ldr	r1, [pc, #528]	@ (8001554 <BME280_ReadCoefficients+0x328>)
 8001342:	2094      	movs	r0, #148	@ 0x94
 8001344:	f7ff ff11 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P4: %d\r\n", CalibData.dig_P4);
 8001348:	4b74      	ldr	r3, [pc, #464]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 800134a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800134e:	461a      	mov	r2, r3
 8001350:	4981      	ldr	r1, [pc, #516]	@ (8001558 <BME280_ReadCoefficients+0x32c>)
 8001352:	4874      	ldr	r0, [pc, #464]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001354:	f005 fa6c 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001358:	4872      	ldr	r0, [pc, #456]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800135a:	f7fe ff91 	bl	8000280 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	496f      	ldr	r1, [pc, #444]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001368:	486f      	ldr	r0, [pc, #444]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 800136a:	f004 f8cf 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P5,&CalibData.dig_P5);
 800136e:	497b      	ldr	r1, [pc, #492]	@ (800155c <BME280_ReadCoefficients+0x330>)
 8001370:	2096      	movs	r0, #150	@ 0x96
 8001372:	f7ff fefa 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P5: %d\r\n", CalibData.dig_P5);
 8001376:	4b69      	ldr	r3, [pc, #420]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001378:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800137c:	461a      	mov	r2, r3
 800137e:	4978      	ldr	r1, [pc, #480]	@ (8001560 <BME280_ReadCoefficients+0x334>)
 8001380:	4868      	ldr	r0, [pc, #416]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001382:	f005 fa55 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001386:	4867      	ldr	r0, [pc, #412]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001388:	f7fe ff7a 	bl	8000280 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001394:	4963      	ldr	r1, [pc, #396]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001396:	4864      	ldr	r0, [pc, #400]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 8001398:	f004 f8b8 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P6,&CalibData.dig_P6);
 800139c:	4971      	ldr	r1, [pc, #452]	@ (8001564 <BME280_ReadCoefficients+0x338>)
 800139e:	2098      	movs	r0, #152	@ 0x98
 80013a0:	f7ff fee3 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P6: %d\r\n", CalibData.dig_P6);
 80013a4:	4b5d      	ldr	r3, [pc, #372]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 80013a6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80013aa:	461a      	mov	r2, r3
 80013ac:	496e      	ldr	r1, [pc, #440]	@ (8001568 <BME280_ReadCoefficients+0x33c>)
 80013ae:	485d      	ldr	r0, [pc, #372]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80013b0:	f005 fa3e 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80013b4:	485b      	ldr	r0, [pc, #364]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80013b6:	f7fe ff63 	bl	8000280 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c2:	4958      	ldr	r1, [pc, #352]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80013c4:	4858      	ldr	r0, [pc, #352]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 80013c6:	f004 f8a1 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P7,&CalibData.dig_P7);
 80013ca:	4968      	ldr	r1, [pc, #416]	@ (800156c <BME280_ReadCoefficients+0x340>)
 80013cc:	209a      	movs	r0, #154	@ 0x9a
 80013ce:	f7ff fecc 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P7: %d\r\n", CalibData.dig_P7);
 80013d2:	4b52      	ldr	r3, [pc, #328]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 80013d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013d8:	461a      	mov	r2, r3
 80013da:	4965      	ldr	r1, [pc, #404]	@ (8001570 <BME280_ReadCoefficients+0x344>)
 80013dc:	4851      	ldr	r0, [pc, #324]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80013de:	f005 fa27 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80013e2:	4850      	ldr	r0, [pc, #320]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80013e4:	f7fe ff4c 	bl	8000280 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f0:	494c      	ldr	r1, [pc, #304]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80013f2:	484d      	ldr	r0, [pc, #308]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 80013f4:	f004 f88a 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P8,&CalibData.dig_P8);
 80013f8:	495e      	ldr	r1, [pc, #376]	@ (8001574 <BME280_ReadCoefficients+0x348>)
 80013fa:	209c      	movs	r0, #156	@ 0x9c
 80013fc:	f7ff feb5 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P8: %d\r\n", CalibData.dig_P8);
 8001400:	4b46      	ldr	r3, [pc, #280]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001402:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001406:	461a      	mov	r2, r3
 8001408:	495b      	ldr	r1, [pc, #364]	@ (8001578 <BME280_ReadCoefficients+0x34c>)
 800140a:	4846      	ldr	r0, [pc, #280]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800140c:	f005 fa10 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001410:	4844      	ldr	r0, [pc, #272]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001412:	f7fe ff35 	bl	8000280 <strlen>
 8001416:	4603      	mov	r3, r0
 8001418:	b29a      	uxth	r2, r3
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	4941      	ldr	r1, [pc, #260]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001420:	4841      	ldr	r0, [pc, #260]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 8001422:	f004 f873 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_P9,&CalibData.dig_P9);
 8001426:	4955      	ldr	r1, [pc, #340]	@ (800157c <BME280_ReadCoefficients+0x350>)
 8001428:	209e      	movs	r0, #158	@ 0x9e
 800142a:	f7ff fe9e 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_P9: %d\r\n", CalibData.dig_P9);
 800142e:	4b3b      	ldr	r3, [pc, #236]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001430:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001434:	461a      	mov	r2, r3
 8001436:	4952      	ldr	r1, [pc, #328]	@ (8001580 <BME280_ReadCoefficients+0x354>)
 8001438:	483a      	ldr	r0, [pc, #232]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800143a:	f005 f9f9 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800143e:	4839      	ldr	r0, [pc, #228]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001440:	f7fe ff1e 	bl	8000280 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144c:	4935      	ldr	r1, [pc, #212]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800144e:	4836      	ldr	r0, [pc, #216]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 8001450:	f004 f85c 	bl	800550c <HAL_UART_Transmit>
  CalibData.dig_H1 = BME280_ReadReg(BME280_REGISTER_DIG_H1);
 8001454:	20a1      	movs	r0, #161	@ 0xa1
 8001456:	f7ff fe67 	bl	8001128 <BME280_ReadReg>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001460:	761a      	strb	r2, [r3, #24]
  sprintf(str1, "DIG_H1: %d\r\n", CalibData.dig_H1);
 8001462:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001464:	7e1b      	ldrb	r3, [r3, #24]
 8001466:	461a      	mov	r2, r3
 8001468:	4946      	ldr	r1, [pc, #280]	@ (8001584 <BME280_ReadCoefficients+0x358>)
 800146a:	482e      	ldr	r0, [pc, #184]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800146c:	f005 f9e0 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001470:	482c      	ldr	r0, [pc, #176]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001472:	f7fe ff05 	bl	8000280 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	4929      	ldr	r1, [pc, #164]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001480:	4829      	ldr	r0, [pc, #164]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 8001482:	f004 f843 	bl	800550c <HAL_UART_Transmit>
  BME280_ReadReg_S16(BME280_REGISTER_DIG_H2,&CalibData.dig_H2);
 8001486:	4940      	ldr	r1, [pc, #256]	@ (8001588 <BME280_ReadCoefficients+0x35c>)
 8001488:	20e1      	movs	r0, #225	@ 0xe1
 800148a:	f7ff fe6e 	bl	800116a <BME280_ReadReg_S16>
  sprintf(str1, "DIG_H2: %d\r\n", CalibData.dig_H2);
 800148e:	4b23      	ldr	r3, [pc, #140]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001490:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001494:	461a      	mov	r2, r3
 8001496:	493d      	ldr	r1, [pc, #244]	@ (800158c <BME280_ReadCoefficients+0x360>)
 8001498:	4822      	ldr	r0, [pc, #136]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 800149a:	f005 f9c9 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800149e:	4821      	ldr	r0, [pc, #132]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80014a0:	f7fe feee 	bl	8000280 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ac:	491d      	ldr	r1, [pc, #116]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80014ae:	481e      	ldr	r0, [pc, #120]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 80014b0:	f004 f82c 	bl	800550c <HAL_UART_Transmit>
  CalibData.dig_H3 = BME280_ReadReg(BME280_REGISTER_DIG_H3);
 80014b4:	20e3      	movs	r0, #227	@ 0xe3
 80014b6:	f7ff fe37 	bl	8001128 <BME280_ReadReg>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 80014c0:	771a      	strb	r2, [r3, #28]
  sprintf(str1, "DIG_H3: %d\r\n", CalibData.dig_H3);
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 80014c4:	7f1b      	ldrb	r3, [r3, #28]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4931      	ldr	r1, [pc, #196]	@ (8001590 <BME280_ReadCoefficients+0x364>)
 80014ca:	4816      	ldr	r0, [pc, #88]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80014cc:	f005 f9b0 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80014d0:	4814      	ldr	r0, [pc, #80]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80014d2:	f7fe fed5 	bl	8000280 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014de:	4911      	ldr	r1, [pc, #68]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 80014e0:	4811      	ldr	r0, [pc, #68]	@ (8001528 <BME280_ReadCoefficients+0x2fc>)
 80014e2:	f004 f813 	bl	800550c <HAL_UART_Transmit>
  CalibData.dig_H4 = (BME280_ReadReg(BME280_REGISTER_DIG_H4) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H4+1) & 0xF);
 80014e6:	20e4      	movs	r0, #228	@ 0xe4
 80014e8:	f7ff fe1e 	bl	8001128 <BME280_ReadReg>
 80014ec:	4603      	mov	r3, r0
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	b21c      	sxth	r4, r3
 80014f2:	20e5      	movs	r0, #229	@ 0xe5
 80014f4:	f7ff fe18 	bl	8001128 <BME280_ReadReg>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	b21b      	sxth	r3, r3
 8001502:	4323      	orrs	r3, r4
 8001504:	b21a      	sxth	r2, r3
 8001506:	4b05      	ldr	r3, [pc, #20]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 8001508:	83da      	strh	r2, [r3, #30]
  sprintf(str1, "DIG_H4: %d\r\n", CalibData.dig_H4);
 800150a:	4b04      	ldr	r3, [pc, #16]	@ (800151c <BME280_ReadCoefficients+0x2f0>)
 800150c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001510:	461a      	mov	r2, r3
 8001512:	4920      	ldr	r1, [pc, #128]	@ (8001594 <BME280_ReadCoefficients+0x368>)
 8001514:	4803      	ldr	r0, [pc, #12]	@ (8001524 <BME280_ReadCoefficients+0x2f8>)
 8001516:	f005 f98b 	bl	8006830 <siprintf>
 800151a:	e03d      	b.n	8001598 <BME280_ReadCoefficients+0x36c>
 800151c:	20000204 	.word	0x20000204
 8001520:	08009960 	.word	0x08009960
 8001524:	20000280 	.word	0x20000280
 8001528:	200002e8 	.word	0x200002e8
 800152c:	20000206 	.word	0x20000206
 8001530:	08009970 	.word	0x08009970
 8001534:	20000208 	.word	0x20000208
 8001538:	08009980 	.word	0x08009980
 800153c:	2000020a 	.word	0x2000020a
 8001540:	08009990 	.word	0x08009990
 8001544:	2000020c 	.word	0x2000020c
 8001548:	080099a0 	.word	0x080099a0
 800154c:	2000020e 	.word	0x2000020e
 8001550:	080099b0 	.word	0x080099b0
 8001554:	20000210 	.word	0x20000210
 8001558:	080099c0 	.word	0x080099c0
 800155c:	20000212 	.word	0x20000212
 8001560:	080099d0 	.word	0x080099d0
 8001564:	20000214 	.word	0x20000214
 8001568:	080099e0 	.word	0x080099e0
 800156c:	20000216 	.word	0x20000216
 8001570:	080099f0 	.word	0x080099f0
 8001574:	20000218 	.word	0x20000218
 8001578:	08009a00 	.word	0x08009a00
 800157c:	2000021a 	.word	0x2000021a
 8001580:	08009a10 	.word	0x08009a10
 8001584:	08009a20 	.word	0x08009a20
 8001588:	2000021e 	.word	0x2000021e
 800158c:	08009a30 	.word	0x08009a30
 8001590:	08009a40 	.word	0x08009a40
 8001594:	08009a50 	.word	0x08009a50
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001598:	4825      	ldr	r0, [pc, #148]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 800159a:	f7fe fe71 	bl	8000280 <strlen>
 800159e:	4603      	mov	r3, r0
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a6:	4922      	ldr	r1, [pc, #136]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 80015a8:	4822      	ldr	r0, [pc, #136]	@ (8001634 <BME280_ReadCoefficients+0x408>)
 80015aa:	f003 ffaf 	bl	800550c <HAL_UART_Transmit>
  CalibData.dig_H5 = (BME280_ReadReg(BME280_REGISTER_DIG_H5+1) << 4) | (BME280_ReadReg(BME280_REGISTER_DIG_H5) >> 4);
 80015ae:	20e6      	movs	r0, #230	@ 0xe6
 80015b0:	f7ff fdba 	bl	8001128 <BME280_ReadReg>
 80015b4:	4603      	mov	r3, r0
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	b21c      	sxth	r4, r3
 80015ba:	20e5      	movs	r0, #229	@ 0xe5
 80015bc:	f7ff fdb4 	bl	8001128 <BME280_ReadReg>
 80015c0:	4603      	mov	r3, r0
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	4323      	orrs	r3, r4
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <BME280_ReadCoefficients+0x40c>)
 80015ce:	841a      	strh	r2, [r3, #32]
  sprintf(str1, "DIG_H5: %d\r\n", CalibData.dig_H5);
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <BME280_ReadCoefficients+0x40c>)
 80015d2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4918      	ldr	r1, [pc, #96]	@ (800163c <BME280_ReadCoefficients+0x410>)
 80015da:	4815      	ldr	r0, [pc, #84]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 80015dc:	f005 f928 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80015e0:	4813      	ldr	r0, [pc, #76]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 80015e2:	f7fe fe4d 	bl	8000280 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ee:	4910      	ldr	r1, [pc, #64]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 80015f0:	4810      	ldr	r0, [pc, #64]	@ (8001634 <BME280_ReadCoefficients+0x408>)
 80015f2:	f003 ff8b 	bl	800550c <HAL_UART_Transmit>
  CalibData.dig_H6 = (int8_t)BME280_ReadReg(BME280_REGISTER_DIG_H6);
 80015f6:	20e7      	movs	r0, #231	@ 0xe7
 80015f8:	f7ff fd96 	bl	8001128 <BME280_ReadReg>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b25a      	sxtb	r2, r3
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <BME280_ReadCoefficients+0x40c>)
 8001602:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  sprintf(str1, "DIG_H6: %d\r\n", CalibData.dig_H3);
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <BME280_ReadCoefficients+0x40c>)
 8001608:	7f1b      	ldrb	r3, [r3, #28]
 800160a:	461a      	mov	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	@ (8001640 <BME280_ReadCoefficients+0x414>)
 800160e:	4808      	ldr	r0, [pc, #32]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 8001610:	f005 f90e 	bl	8006830 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8001614:	4806      	ldr	r0, [pc, #24]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 8001616:	f7fe fe33 	bl	8000280 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29a      	uxth	r2, r3
 800161e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001622:	4903      	ldr	r1, [pc, #12]	@ (8001630 <BME280_ReadCoefficients+0x404>)
 8001624:	4803      	ldr	r0, [pc, #12]	@ (8001634 <BME280_ReadCoefficients+0x408>)
 8001626:	f003 ff71 	bl	800550c <HAL_UART_Transmit>
}
 800162a:	bf00      	nop
 800162c:	bd98      	pop	{r3, r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	20000280 	.word	0x20000280
 8001634:	200002e8 	.word	0x200002e8
 8001638:	20000204 	.word	0x20000204
 800163c:	08009a60 	.word	0x08009a60
 8001640:	08009a70 	.word	0x08009a70

08001644 <BME280_SetStandby>:
//------------------------------------------------
void BME280_SetStandby(uint8_t tsb) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_STBY_MSK;
 800164e:	20f5      	movs	r0, #245	@ 0xf5
 8001650:	f7ff fd6a 	bl	8001128 <BME280_ReadReg>
 8001654:	4603      	mov	r3, r0
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	73fb      	strb	r3, [r7, #15]
  reg |= tsb & BME280_STBY_MSK;
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	f023 031f 	bic.w	r3, r3, #31
 8001664:	b25a      	sxtb	r2, r3
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4313      	orrs	r3, r2
 800166c:	b25b      	sxtb	r3, r3
 800166e:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	4619      	mov	r1, r3
 8001674:	20f5      	movs	r0, #245	@ 0xf5
 8001676:	f7ff fd45 	bl	8001104 <BME280_WriteReg>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <BME280_SetFilter>:
//------------------------------------------------
  void BME280_SetFilter(uint8_t filter) {
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CONFIG) & ~BME280_FILTER_MSK;
 800168c:	20f5      	movs	r0, #245	@ 0xf5
 800168e:	f7ff fd4b 	bl	8001128 <BME280_ReadReg>
 8001692:	4603      	mov	r3, r0
 8001694:	f023 031c 	bic.w	r3, r3, #28
 8001698:	73fb      	strb	r3, [r7, #15]
  reg |= filter & BME280_FILTER_MSK;
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	f003 031c 	and.w	r3, r3, #28
 80016a2:	b25a      	sxtb	r2, r3
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CONFIG,reg);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4619      	mov	r1, r3
 80016b2:	20f5      	movs	r0, #245	@ 0xf5
 80016b4:	f7ff fd26 	bl	8001104 <BME280_WriteReg>
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <BME280_SetOversamplingTemper>:
//------------------------------------------------
void BME280_SetOversamplingTemper(uint8_t osrs)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_T_MSK;
 80016ca:	20f4      	movs	r0, #244	@ 0xf4
 80016cc:	f7ff fd2c 	bl	8001128 <BME280_ReadReg>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_T_MSK;
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	f023 031f 	bic.w	r3, r3, #31
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	4619      	mov	r1, r3
 80016f0:	20f4      	movs	r0, #244	@ 0xf4
 80016f2:	f7ff fd07 	bl	8001104 <BME280_WriteReg>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <BME280_SetOversamplingPressure>:
//------------------------------------------------
void BME280_SetOversamplingPressure(uint8_t osrs)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_OSRS_P_MSK;
 8001708:	20f4      	movs	r0, #244	@ 0xf4
 800170a:	f7ff fd0d 	bl	8001128 <BME280_ReadReg>
 800170e:	4603      	mov	r3, r0
 8001710:	f023 031c 	bic.w	r3, r3, #28
 8001714:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_P_MSK;
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	f003 031c 	and.w	r3, r3, #28
 800171e:	b25a      	sxtb	r2, r3
 8001720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001724:	4313      	orrs	r3, r2
 8001726:	b25b      	sxtb	r3, r3
 8001728:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	4619      	mov	r1, r3
 800172e:	20f4      	movs	r0, #244	@ 0xf4
 8001730:	f7ff fce8 	bl	8001104 <BME280_WriteReg>
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <BME280_SetOversamplingHum>:
//------------------------------------------------
void BME280_SetOversamplingHum(uint8_t osrs)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_HUM) & ~BME280_OSRS_H_MSK;
 8001746:	20f2      	movs	r0, #242	@ 0xf2
 8001748:	f7ff fcee 	bl	8001128 <BME280_ReadReg>
 800174c:	4603      	mov	r3, r0
 800174e:	f023 0307 	bic.w	r3, r3, #7
 8001752:	73fb      	strb	r3, [r7, #15]
  reg |= osrs & BME280_OSRS_H_MSK;
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	b25a      	sxtb	r2, r3
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4313      	orrs	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_HUM,reg);
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	4619      	mov	r1, r3
 800176c:	20f2      	movs	r0, #242	@ 0xf2
 800176e:	f7ff fcc9 	bl	8001104 <BME280_WriteReg>
  //The 'ctrl_hum' register needs to be written
  //after changing 'ctrl_hum' for the changes to become effwctive.
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 8001772:	20f4      	movs	r0, #244	@ 0xf4
 8001774:	f7ff fcd8 	bl	8001128 <BME280_ReadReg>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	4619      	mov	r1, r3
 8001780:	20f4      	movs	r0, #244	@ 0xf4
 8001782:	f7ff fcbf 	bl	8001104 <BME280_WriteReg>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <BME280_SetMode>:
//------------------------------------------------
void BME280_SetMode(uint8_t mode) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	71fb      	strb	r3, [r7, #7]
  uint8_t reg;
  reg = BME280_ReadReg(BME280_REG_CTRL_MEAS) & ~BME280_MODE_MSK;
 8001798:	20f4      	movs	r0, #244	@ 0xf4
 800179a:	f7ff fcc5 	bl	8001128 <BME280_ReadReg>
 800179e:	4603      	mov	r3, r0
 80017a0:	f023 0303 	bic.w	r3, r3, #3
 80017a4:	73fb      	strb	r3, [r7, #15]
  reg |= mode & BME280_MODE_MSK;
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	73fb      	strb	r3, [r7, #15]
  BME280_WriteReg(BME280_REG_CTRL_MEAS,reg);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	4619      	mov	r1, r3
 80017be:	20f4      	movs	r0, #244	@ 0xf4
 80017c0:	f7ff fca0 	bl	8001104 <BME280_WriteReg>
}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <BME280_ReadTemperature>:
//------------------------------------------------
float BME280_ReadTemperature(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
  float temper_float = 0.0f;
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
	uint32_t temper_raw;
	int32_t val1, val2;
	BME280_ReadReg_BE_U24(BME280_REGISTER_TEMPDATA,&temper_raw);
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	20fa      	movs	r0, #250	@ 0xfa
 80017de:	f7ff fcf2 	bl	80011c6 <BME280_ReadReg_BE_U24>
	temper_raw >>= 4;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	603b      	str	r3, [r7, #0]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <BME280_ReadTemperature+0xa4>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	1ad3      	subs	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 80017f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001870 <BME280_ReadTemperature+0xa4>)
 80017f6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T2)) >> 11;
 80017fe:	0adb      	lsrs	r3, r3, #11
	val1 = ((((temper_raw>>3) - ((int32_t)CalibData.dig_T1 <<1))) *
 8001800:	60bb      	str	r3, [r7, #8]
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	4a1a      	ldr	r2, [pc, #104]	@ (8001870 <BME280_ReadTemperature+0xa4>)
 8001808:	8812      	ldrh	r2, [r2, #0]
 800180a:	1a9b      	subs	r3, r3, r2
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	0912      	lsrs	r2, r2, #4
 8001810:	4917      	ldr	r1, [pc, #92]	@ (8001870 <BME280_ReadTemperature+0xa4>)
 8001812:	8809      	ldrh	r1, [r1, #0]
 8001814:	1a52      	subs	r2, r2, r1
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001816:	fb02 f303 	mul.w	r3, r2, r3
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 800181a:	0b1b      	lsrs	r3, r3, #12
		((int32_t)CalibData.dig_T3)) >> 14;
 800181c:	4a14      	ldr	r2, [pc, #80]	@ (8001870 <BME280_ReadTemperature+0xa4>)
 800181e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
		((temper_raw>>4) - ((int32_t)CalibData.dig_T1))) >> 12) *
 8001822:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_T3)) >> 14;
 8001826:	0b9b      	lsrs	r3, r3, #14
	val2 = (((((temper_raw>>4) - ((int32_t)CalibData.dig_T1)) *
 8001828:	607b      	str	r3, [r7, #4]
	temper_int = val1 + val2;
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	4a10      	ldr	r2, [pc, #64]	@ (8001874 <BME280_ReadTemperature+0xa8>)
 8001832:	6013      	str	r3, [r2, #0]
	temper_float = ((temper_int * 5 + 128) >> 8);
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <BME280_ReadTemperature+0xa8>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3380      	adds	r3, #128	@ 0x80
 8001840:	121b      	asrs	r3, r3, #8
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184a:	edc7 7a03 	vstr	s15, [r7, #12]
	temper_float /= 100.0f;
 800184e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001852:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001878 <BME280_ReadTemperature+0xac>
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	edc7 7a03 	vstr	s15, [r7, #12]
  return temper_float;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	ee07 3a90 	vmov	s15, r3
}
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000204 	.word	0x20000204
 8001874:	20000228 	.word	0x20000228
 8001878:	42c80000 	.word	0x42c80000

0800187c <BME280_ReadPressure>:
//------------------------------------------------
float BME280_ReadPressure(void)
{
 800187c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001880:	b0d0      	sub	sp, #320	@ 0x140
 8001882:	af00      	add	r7, sp, #0
  float press_float = 0.0f;
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	uint32_t press_raw, pres_int;
	int64_t val1, val2, p;
	BME280_ReadTemperature(); // must be done first to get t_fine
 800188c:	f7ff ff9e 	bl	80017cc <BME280_ReadTemperature>
	BME280_ReadReg_BE_U24(BME280_REGISTER_PRESSUREDATA,&press_raw);
 8001890:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001894:	4619      	mov	r1, r3
 8001896:	20f7      	movs	r0, #247	@ 0xf7
 8001898:	f7ff fc95 	bl	80011c6 <BME280_ReadReg_BE_U24>
	press_raw >>= 4;
 800189c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	val1 = ((int64_t) temper_int) - 128000;
 80018a6:	4bac      	ldr	r3, [pc, #688]	@ (8001b58 <BME280_ReadPressure+0x2dc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	17da      	asrs	r2, r3, #31
 80018ac:	4698      	mov	r8, r3
 80018ae:	4691      	mov	r9, r2
 80018b0:	f5b8 33fa 	subs.w	r3, r8, #128000	@ 0x1f400
 80018b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018b6:	f149 33ff 	adc.w	r3, r9, #4294967295	@ 0xffffffff
 80018ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018c0:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	val2 = val1 * val1 * (int64_t)CalibData.dig_P6;
 80018c4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80018c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80018cc:	fb03 f102 	mul.w	r1, r3, r2
 80018d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80018d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	18ca      	adds	r2, r1, r3
 80018de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80018e2:	fba3 4503 	umull	r4, r5, r3, r3
 80018e6:	1953      	adds	r3, r2, r5
 80018e8:	461d      	mov	r5, r3
 80018ea:	4b9c      	ldr	r3, [pc, #624]	@ (8001b5c <BME280_ReadPressure+0x2e0>)
 80018ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	17da      	asrs	r2, r3, #31
 80018f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80018f8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80018fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001900:	4603      	mov	r3, r0
 8001902:	fb03 f205 	mul.w	r2, r3, r5
 8001906:	460b      	mov	r3, r1
 8001908:	fb04 f303 	mul.w	r3, r4, r3
 800190c:	4413      	add	r3, r2
 800190e:	4602      	mov	r2, r0
 8001910:	fba4 ab02 	umull	sl, fp, r4, r2
 8001914:	445b      	add	r3, fp
 8001916:	469b      	mov	fp, r3
 8001918:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
 800191c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	val2 = val2 + ((val1 * (int64_t)CalibData.dig_P5) << 17);
 8001920:	4b8e      	ldr	r3, [pc, #568]	@ (8001b5c <BME280_ReadPressure+0x2e0>)
 8001922:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800192e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001932:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001936:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800193a:	462a      	mov	r2, r5
 800193c:	fb02 f203 	mul.w	r2, r2, r3
 8001940:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001944:	4621      	mov	r1, r4
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	441a      	add	r2, r3
 800194c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001950:	4621      	mov	r1, r4
 8001952:	fba3 1301 	umull	r1, r3, r3, r1
 8001956:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800195a:	460b      	mov	r3, r1
 800195c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001964:	18d3      	adds	r3, r2, r3
 8001966:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8001976:	462b      	mov	r3, r5
 8001978:	0459      	lsls	r1, r3, #17
 800197a:	4623      	mov	r3, r4
 800197c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001980:	4623      	mov	r3, r4
 8001982:	0458      	lsls	r0, r3, #17
 8001984:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001988:	1814      	adds	r4, r2, r0
 800198a:	643c      	str	r4, [r7, #64]	@ 0x40
 800198c:	414b      	adcs	r3, r1
 800198e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001990:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001994:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	val2 = val2 + ((int64_t)CalibData.dig_P4 << 35);
 8001998:	4b70      	ldr	r3, [pc, #448]	@ (8001b5c <BME280_ReadPressure+0x2e0>)
 800199a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800199e:	b21b      	sxth	r3, r3
 80019a0:	17da      	asrs	r2, r3, #31
 80019a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80019a6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019b6:	00d9      	lsls	r1, r3, #3
 80019b8:	2000      	movs	r0, #0
 80019ba:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80019be:	1814      	adds	r4, r2, r0
 80019c0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80019c2:	414b      	adcs	r3, r1
 80019c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019c6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80019ca:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	val1 = ((val1 * val1 * (int64_t)CalibData.dig_P3) >> 8) + ((val1 * (int64_t)CalibData.dig_P2) << 12);
 80019ce:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80019d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80019d6:	fb03 f102 	mul.w	r1, r3, r2
 80019da:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80019de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	18ca      	adds	r2, r1, r3
 80019e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80019ec:	fba3 1303 	umull	r1, r3, r3, r3
 80019f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80019f4:	460b      	mov	r3, r1
 80019f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80019fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80019fe:	18d3      	adds	r3, r2, r3
 8001a00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001a04:	4b55      	ldr	r3, [pc, #340]	@ (8001b5c <BME280_ReadPressure+0x2e0>)
 8001a06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	17da      	asrs	r2, r3, #31
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a12:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001a16:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001a1a:	462b      	mov	r3, r5
 8001a1c:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 8001a20:	4642      	mov	r2, r8
 8001a22:	fb02 f203 	mul.w	r2, r2, r3
 8001a26:	464b      	mov	r3, r9
 8001a28:	4621      	mov	r1, r4
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	4622      	mov	r2, r4
 8001a32:	4641      	mov	r1, r8
 8001a34:	fba2 1201 	umull	r1, r2, r2, r1
 8001a38:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001a42:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001a46:	4413      	add	r3, r2
 8001a48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a58:	4623      	mov	r3, r4
 8001a5a:	0a18      	lsrs	r0, r3, #8
 8001a5c:	462b      	mov	r3, r5
 8001a5e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a62:	462b      	mov	r3, r5
 8001a64:	1219      	asrs	r1, r3, #8
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <BME280_ReadPressure+0x2e0>)
 8001a68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	17da      	asrs	r2, r3, #31
 8001a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a7c:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8001a80:	464a      	mov	r2, r9
 8001a82:	fb02 f203 	mul.w	r2, r2, r3
 8001a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a8a:	4644      	mov	r4, r8
 8001a8c:	fb04 f303 	mul.w	r3, r4, r3
 8001a90:	441a      	add	r2, r3
 8001a92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a96:	4644      	mov	r4, r8
 8001a98:	fba3 4304 	umull	r4, r3, r3, r4
 8001a9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001abc:	464c      	mov	r4, r9
 8001abe:	0323      	lsls	r3, r4, #12
 8001ac0:	4644      	mov	r4, r8
 8001ac2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001ac6:	4644      	mov	r4, r8
 8001ac8:	0322      	lsls	r2, r4, #12
 8001aca:	1884      	adds	r4, r0, r2
 8001acc:	633c      	str	r4, [r7, #48]	@ 0x30
 8001ace:	eb41 0303 	adc.w	r3, r1, r3
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ad4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001ad8:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	val1 = (((((int64_t)1) << 47) + val1)) * ((int64_t)CalibData.dig_P1) >> 33;
 8001adc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001ae0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001ae4:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 8001ae8:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <BME280_ReadPressure+0x2e0>)
 8001aee:	88db      	ldrh	r3, [r3, #6]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2200      	movs	r2, #0
 8001af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001af8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001afc:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8001b00:	462b      	mov	r3, r5
 8001b02:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001b06:	4642      	mov	r2, r8
 8001b08:	fb02 f203 	mul.w	r2, r2, r3
 8001b0c:	464b      	mov	r3, r9
 8001b0e:	4621      	mov	r1, r4
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	4622      	mov	r2, r4
 8001b18:	4641      	mov	r1, r8
 8001b1a:	fba2 1201 	umull	r1, r2, r2, r1
 8001b1e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001b22:	460a      	mov	r2, r1
 8001b24:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001b28:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001b3e:	4629      	mov	r1, r5
 8001b40:	104a      	asrs	r2, r1, #1
 8001b42:	4629      	mov	r1, r5
 8001b44:	17cb      	asrs	r3, r1, #31
 8001b46:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	if (val1 == 0) {
 8001b4a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	d106      	bne.n	8001b60 <BME280_ReadPressure+0x2e4>
		return 0; // avoid exception caused by division by zero
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e194      	b.n	8001e82 <BME280_ReadPressure+0x606>
 8001b58:	20000228 	.word	0x20000228
 8001b5c:	20000204 	.word	0x20000204
	}
	p = 1048576 - press_raw;
 8001b60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b64:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001b68:	2200      	movs	r2, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b6e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001b72:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	p = (((p << 31) - val2) * 3125) / val1;
 8001b76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b84:	07db      	lsls	r3, r3, #31
 8001b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b8a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b92:	4621      	mov	r1, r4
 8001b94:	1a89      	subs	r1, r1, r2
 8001b96:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	eb61 0303 	sbc.w	r3, r1, r3
 8001ba0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001ba4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ba8:	4622      	mov	r2, r4
 8001baa:	462b      	mov	r3, r5
 8001bac:	1891      	adds	r1, r2, r2
 8001bae:	6239      	str	r1, [r7, #32]
 8001bb0:	415b      	adcs	r3, r3
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bb8:	4621      	mov	r1, r4
 8001bba:	1851      	adds	r1, r2, r1
 8001bbc:	61b9      	str	r1, [r7, #24]
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	414b      	adcs	r3, r1
 8001bc2:	61fb      	str	r3, [r7, #28]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001bd0:	4649      	mov	r1, r9
 8001bd2:	018b      	lsls	r3, r1, #6
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bda:	4641      	mov	r1, r8
 8001bdc:	018a      	lsls	r2, r1, #6
 8001bde:	4641      	mov	r1, r8
 8001be0:	1889      	adds	r1, r1, r2
 8001be2:	6139      	str	r1, [r7, #16]
 8001be4:	4649      	mov	r1, r9
 8001be6:	eb43 0101 	adc.w	r1, r3, r1
 8001bea:	6179      	str	r1, [r7, #20]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001bf8:	4649      	mov	r1, r9
 8001bfa:	008b      	lsls	r3, r1, #2
 8001bfc:	4641      	mov	r1, r8
 8001bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c02:	4641      	mov	r1, r8
 8001c04:	008a      	lsls	r2, r1, #2
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4622      	mov	r2, r4
 8001c0e:	189b      	adds	r3, r3, r2
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	460b      	mov	r3, r1
 8001c14:	462a      	mov	r2, r5
 8001c16:	eb42 0303 	adc.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c28:	4649      	mov	r1, r9
 8001c2a:	008b      	lsls	r3, r1, #2
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c32:	4641      	mov	r1, r8
 8001c34:	008a      	lsls	r2, r1, #2
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c44:	462b      	mov	r3, r5
 8001c46:	460a      	mov	r2, r1
 8001c48:	eb42 0303 	adc.w	r3, r2, r3
 8001c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c50:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001c54:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001c58:	f7fe fffe 	bl	8000c58 <__aeabi_ldivmod>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	val1 = (((int64_t)CalibData.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001c64:	4b8b      	ldr	r3, [pc, #556]	@ (8001e94 <BME280_ReadPressure+0x618>)
 8001c66:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	17da      	asrs	r2, r3, #31
 8001c6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c70:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001c72:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c76:	f04f 0000 	mov.w	r0, #0
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	0b50      	lsrs	r0, r2, #13
 8001c80:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c84:	1359      	asrs	r1, r3, #13
 8001c86:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	fb00 f203 	mul.w	r2, r0, r3
 8001c90:	4623      	mov	r3, r4
 8001c92:	fb03 f301 	mul.w	r3, r3, r1
 8001c96:	4413      	add	r3, r2
 8001c98:	4622      	mov	r2, r4
 8001c9a:	fba2 1200 	umull	r1, r2, r2, r0
 8001c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001ca8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001cac:	4413      	add	r3, r2
 8001cae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001cb2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	0b50      	lsrs	r0, r2, #13
 8001cc0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cc4:	1359      	asrs	r1, r3, #13
 8001cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001cca:	462b      	mov	r3, r5
 8001ccc:	fb00 f203 	mul.w	r2, r0, r3
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	fb03 f301 	mul.w	r3, r3, r1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4622      	mov	r2, r4
 8001cda:	fba2 1200 	umull	r1, r2, r2, r0
 8001cde:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001ce2:	460a      	mov	r2, r1
 8001ce4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001ce8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001cec:	4413      	add	r3, r2
 8001cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001cfe:	4621      	mov	r1, r4
 8001d00:	0e4a      	lsrs	r2, r1, #25
 8001d02:	4629      	mov	r1, r5
 8001d04:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001d08:	4629      	mov	r1, r5
 8001d0a:	164b      	asrs	r3, r1, #25
 8001d0c:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	val2 = (((int64_t)CalibData.dig_P8) * p) >> 19;
 8001d10:	4b60      	ldr	r3, [pc, #384]	@ (8001e94 <BME280_ReadPressure+0x618>)
 8001d12:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	17da      	asrs	r2, r3, #31
 8001d1a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d1c:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d22:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001d26:	462a      	mov	r2, r5
 8001d28:	fb02 f203 	mul.w	r2, r2, r3
 8001d2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001d30:	4621      	mov	r1, r4
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	441a      	add	r2, r3
 8001d38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	fba3 1301 	umull	r1, r3, r3, r1
 8001d42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d46:	460b      	mov	r3, r1
 8001d48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d50:	18d3      	adds	r3, r2, r3
 8001d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d62:	4621      	mov	r1, r4
 8001d64:	0cca      	lsrs	r2, r1, #19
 8001d66:	4629      	mov	r1, r5
 8001d68:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	14cb      	asrs	r3, r1, #19
 8001d70:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	p = ((p + val1 + val2) >> 8) + ((int64_t)CalibData.dig_P7 << 4);
 8001d74:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001d78:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001d7c:	1884      	adds	r4, r0, r2
 8001d7e:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001d80:	eb41 0303 	adc.w	r3, r1, r3
 8001d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d86:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001d8a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001d8e:	4621      	mov	r1, r4
 8001d90:	1889      	adds	r1, r1, r2
 8001d92:	6639      	str	r1, [r7, #96]	@ 0x60
 8001d94:	4629      	mov	r1, r5
 8001d96:	eb43 0101 	adc.w	r1, r3, r1
 8001d9a:	6679      	str	r1, [r7, #100]	@ 0x64
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001da8:	4623      	mov	r3, r4
 8001daa:	0a18      	lsrs	r0, r3, #8
 8001dac:	462b      	mov	r3, r5
 8001dae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001db2:	462b      	mov	r3, r5
 8001db4:	1219      	asrs	r1, r3, #8
 8001db6:	4b37      	ldr	r3, [pc, #220]	@ (8001e94 <BME280_ReadPressure+0x618>)
 8001db8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	17da      	asrs	r2, r3, #31
 8001dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001dc2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001dd0:	464c      	mov	r4, r9
 8001dd2:	0123      	lsls	r3, r4, #4
 8001dd4:	4644      	mov	r4, r8
 8001dd6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001dda:	4644      	mov	r4, r8
 8001ddc:	0122      	lsls	r2, r4, #4
 8001dde:	1884      	adds	r4, r0, r2
 8001de0:	603c      	str	r4, [r7, #0]
 8001de2:	eb41 0303 	adc.w	r3, r1, r3
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001dec:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	pres_int = ((p >> 8) * 1000) + (((p & 0xff) * 390625) / 100000);
 8001df0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	0a02      	lsrs	r2, r0, #8
 8001dfe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001e02:	120b      	asrs	r3, r1, #8
 8001e04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e08:	fb03 f402 	mul.w	r4, r3, r2
 8001e0c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001e10:	f002 03ff 	and.w	r3, r2, #255	@ 0xff
 8001e14:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e16:	2300      	movs	r3, #0
 8001e18:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <BME280_ReadPressure+0x61c>)
 8001e1c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001e20:	464a      	mov	r2, r9
 8001e22:	fb03 f202 	mul.w	r2, r3, r2
 8001e26:	2300      	movs	r3, #0
 8001e28:	4641      	mov	r1, r8
 8001e2a:	fb01 f303 	mul.w	r3, r1, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a19      	ldr	r2, [pc, #100]	@ (8001e98 <BME280_ReadPressure+0x61c>)
 8001e32:	4641      	mov	r1, r8
 8001e34:	fba1 1202 	umull	r1, r2, r1, r2
 8001e38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e3c:	460a      	mov	r2, r1
 8001e3e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001e42:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001e46:	4413      	add	r3, r2
 8001e48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001e4c:	4a13      	ldr	r2, [pc, #76]	@ (8001e9c <BME280_ReadPressure+0x620>)
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8001e56:	f7fe feff 	bl	8000c58 <__aeabi_ldivmod>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4613      	mov	r3, r2
 8001e60:	4423      	add	r3, r4
 8001e62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	press_float = pres_int / 100.0f;
 8001e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e72:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001ea0 <BME280_ReadPressure+0x624>
 8001e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7a:	edc7 7a4f 	vstr	s15, [r7, #316]	@ 0x13c
  return press_float;
 8001e7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
}
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e94:	20000204 	.word	0x20000204
 8001e98:	0005f5e1 	.word	0x0005f5e1
 8001e9c:	000186a0 	.word	0x000186a0
 8001ea0:	42c80000 	.word	0x42c80000

08001ea4 <BME280_ReadHumidity>:
//------------------------------------------------
float BME280_ReadHumidity(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
  float hum_float = 0.0f;
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
	int16_t hum_raw;
	int32_t hum_raw_sign, v_x1_u32r;
	BME280_ReadTemperature(); // must be done first to get t_fine
 8001eb0:	f7ff fc8c 	bl	80017cc <BME280_ReadTemperature>
	BME280_ReadReg_BE_S16(BME280_REGISTER_HUMIDDATA,&hum_raw);
 8001eb4:	1cbb      	adds	r3, r7, #2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	20fd      	movs	r0, #253	@ 0xfd
 8001eba:	f7ff f966 	bl	800118a <BME280_ReadReg_BE_S16>
	hum_raw_sign = ((int32_t)hum_raw)&0x0000FFFF;
 8001ebe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	60bb      	str	r3, [r7, #8]
	v_x1_u32r = (temper_int - ((int32_t)76800));
 8001ec6:	4b35      	ldr	r3, [pc, #212]	@ (8001f9c <BME280_ReadHumidity+0xf8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001ece:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	039a      	lsls	r2, r3, #14
 8001ed4:	4b32      	ldr	r3, [pc, #200]	@ (8001fa0 <BME280_ReadHumidity+0xfc>)
 8001ed6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eda:	051b      	lsls	r3, r3, #20
 8001edc:	1ad2      	subs	r2, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001ede:	4b30      	ldr	r3, [pc, #192]	@ (8001fa0 <BME280_ReadHumidity+0xfc>)
 8001ee0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001eec:	1ad3      	subs	r3, r2, r3
		(((int32_t)CalibData.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8001eee:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001ef2:	13db      	asrs	r3, r3, #15
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa0 <BME280_ReadHumidity+0xfc>)
 8001ef6:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001efa:	4611      	mov	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	fb01 f202 	mul.w	r2, r1, r2
 8001f02:	1292      	asrs	r2, r2, #10
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001f04:	4926      	ldr	r1, [pc, #152]	@ (8001fa0 <BME280_ReadHumidity+0xfc>)
 8001f06:	7f09      	ldrb	r1, [r1, #28]
 8001f08:	4608      	mov	r0, r1
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	fb00 f101 	mul.w	r1, r0, r1
 8001f10:	12c9      	asrs	r1, r1, #11
 8001f12:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
		(((((((v_x1_u32r * ((int32_t)CalibData.dig_H6)) >> 10) *
 8001f16:	fb01 f202 	mul.w	r2, r1, r2
		(((v_x1_u32r * ((int32_t)CalibData.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
 8001f1a:	1292      	asrs	r2, r2, #10
 8001f1c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
		((int32_t)2097152)) * ((int32_t)CalibData.dig_H2) + 8192) >> 14));
 8001f20:	491f      	ldr	r1, [pc, #124]	@ (8001fa0 <BME280_ReadHumidity+0xfc>)
 8001f22:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001f26:	fb01 f202 	mul.w	r2, r1, r2
 8001f2a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f2e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((hum_raw_sign << 14) - (((int32_t)CalibData.dig_H4) << 20) -
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	13db      	asrs	r3, r3, #15
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	13d2      	asrs	r2, r2, #15
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	11db      	asrs	r3, r3, #7
		((int32_t)CalibData.dig_H1)) >> 4));
 8001f44:	4a16      	ldr	r2, [pc, #88]	@ (8001fa0 <BME280_ReadHumidity+0xfc>)
 8001f46:	7e12      	ldrb	r2, [r2, #24]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001f48:	fb02 f303 	mul.w	r3, r2, r3
		((int32_t)CalibData.dig_H1)) >> 4));
 8001f4c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f5a:	607b      	str	r3, [r7, #4]
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f62:	bfa8      	it	ge
 8001f64:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001f68:	607b      	str	r3, [r7, #4]
	hum_float = (v_x1_u32r>>12);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	131b      	asrs	r3, r3, #12
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f76:	edc7 7a03 	vstr	s15, [r7, #12]
	hum_float /= 1024.0f;
 8001f7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f7e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8001fa4 <BME280_ReadHumidity+0x100>
 8001f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f86:	edc7 7a03 	vstr	s15, [r7, #12]
  return hum_float;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	ee07 3a90 	vmov	s15, r3
}
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000228 	.word	0x20000228
 8001fa0:	20000204 	.word	0x20000204
 8001fa4:	44800000 	.word	0x44800000

08001fa8 <BME280_ReadAltitude>:
//------------------------------------------------
float BME280_ReadAltitude(float seaLevel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	ed87 0a01 	vstr	s0, [r7, #4]
  float att = 0.0f;
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
	float atm = BME280_ReadPressure();
 8001fb8:	f7ff fc60 	bl	800187c <BME280_ReadPressure>
 8001fbc:	ed87 0a02 	vstr	s0, [r7, #8]
	att = 44330.0 * (1.0 - pow(atm / seaLevel, 0.1903));
 8001fc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fcc:	ee16 0a90 	vmov	r0, s13
 8001fd0:	f7fe fac2 	bl	8000558 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8002028 <BME280_ReadAltitude+0x80>
 8001fdc:	ec43 2b10 	vmov	d0, r2, r3
 8001fe0:	f006 fd52 	bl	8008a88 <pow>
 8001fe4:	ec53 2b10 	vmov	r2, r3, d0
 8001fe8:	f04f 0000 	mov.w	r0, #0
 8001fec:	4912      	ldr	r1, [pc, #72]	@ (8002038 <BME280_ReadAltitude+0x90>)
 8001fee:	f7fe f953 	bl	8000298 <__aeabi_dsub>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	a30d      	add	r3, pc, #52	@ (adr r3, 8002030 <BME280_ReadAltitude+0x88>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fb02 	bl	8000608 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fdd4 	bl	8000bb8 <__aeabi_d2f>
 8002010:	4603      	mov	r3, r0
 8002012:	60fb      	str	r3, [r7, #12]
  return att;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	ee07 3a90 	vmov	s15, r3
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	f3af 8000 	nop.w
 8002028:	1a36e2eb 	.word	0x1a36e2eb
 800202c:	3fc85bc0 	.word	0x3fc85bc0
 8002030:	00000000 	.word	0x00000000
 8002034:	40e5a540 	.word	0x40e5a540
 8002038:	3ff00000 	.word	0x3ff00000

0800203c <BME280_Init>:
//------------------------------------------------
void BME280_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af02      	add	r7, sp, #8
  uint8_t value=0;
 8002042:	2300      	movs	r3, #0
 8002044:	71fb      	strb	r3, [r7, #7]
  uint32_t value32=0;
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
  LED_ON;
 800204a:	2201      	movs	r2, #1
 800204c:	2120      	movs	r1, #32
 800204e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002052:	f000 ff3f 	bl	8002ed4 <HAL_GPIO_WritePin>
	value = BME280_ReadReg(BME280_REG_ID);
 8002056:	20d0      	movs	r0, #208	@ 0xd0
 8002058:	f7ff f866 	bl	8001128 <BME280_ReadReg>
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
	sprintf(str1, "\r\n\r\nID: 0x%02X\r\n", value);
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	461a      	mov	r2, r3
 8002064:	493f      	ldr	r1, [pc, #252]	@ (8002164 <BME280_Init+0x128>)
 8002066:	4840      	ldr	r0, [pc, #256]	@ (8002168 <BME280_Init+0x12c>)
 8002068:	f004 fbe2 	bl	8006830 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 800206c:	483e      	ldr	r0, [pc, #248]	@ (8002168 <BME280_Init+0x12c>)
 800206e:	f7fe f907 	bl	8000280 <strlen>
 8002072:	4603      	mov	r3, r0
 8002074:	b29a      	uxth	r2, r3
 8002076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800207a:	493b      	ldr	r1, [pc, #236]	@ (8002168 <BME280_Init+0x12c>)
 800207c:	483b      	ldr	r0, [pc, #236]	@ (800216c <BME280_Init+0x130>)
 800207e:	f003 fa45 	bl	800550c <HAL_UART_Transmit>
	if(value !=BME280_ID)
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b60      	cmp	r3, #96	@ 0x60
 8002086:	d002      	beq.n	800208e <BME280_Init+0x52>
	{
		Error();
 8002088:	f7fe ff96 	bl	8000fb8 <Error>
		return;
 800208c:	e067      	b.n	800215e <BME280_Init+0x122>
	}
	BME280_WriteReg(BME280_REG_SOFTRESET,BME280_SOFTRESET_VALUE);
 800208e:	21b6      	movs	r1, #182	@ 0xb6
 8002090:	20e0      	movs	r0, #224	@ 0xe0
 8002092:	f7ff f837 	bl	8001104 <BME280_WriteReg>
	while (BME280_ReadStatus() & BME280_STATUS_IM_UPDATE) ;
 8002096:	bf00      	nop
 8002098:	f7ff f8b8 	bl	800120c <BME280_ReadStatus>
 800209c:	4603      	mov	r3, r0
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f8      	bne.n	8002098 <BME280_Init+0x5c>
	BME280_ReadCoefficients();
 80020a6:	f7ff f8c1 	bl	800122c <BME280_ReadCoefficients>
	BME280_SetStandby(BME280_STBY_1000);
 80020aa:	20a0      	movs	r0, #160	@ 0xa0
 80020ac:	f7ff faca 	bl	8001644 <BME280_SetStandby>
	BME280_SetFilter(BME280_FILTER_4);
 80020b0:	2008      	movs	r0, #8
 80020b2:	f7ff fae6 	bl	8001682 <BME280_SetFilter>
	BME280_SetOversamplingTemper(BME280_OSRS_T_x4);
 80020b6:	2060      	movs	r0, #96	@ 0x60
 80020b8:	f7ff fb02 	bl	80016c0 <BME280_SetOversamplingTemper>
	BME280_SetOversamplingPressure(BME280_OSRS_P_x2);
 80020bc:	2008      	movs	r0, #8
 80020be:	f7ff fb1e 	bl	80016fe <BME280_SetOversamplingPressure>
	BME280_SetOversamplingHum(BME280_OSRS_H_x1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7ff fb3a 	bl	800173c <BME280_SetOversamplingHum>
	value32 = BME280_ReadReg(BME280_REG_CTRL_MEAS);
 80020c8:	20f4      	movs	r0, #244	@ 0xf4
 80020ca:	f7ff f82d 	bl	8001128 <BME280_ReadReg>
 80020ce:	4603      	mov	r3, r0
 80020d0:	603b      	str	r3, [r7, #0]
	value32 |= BME280_ReadReg(BME280_REG_CTRL_HUM) << 8;
 80020d2:	20f2      	movs	r0, #242	@ 0xf2
 80020d4:	f7ff f828 	bl	8001128 <BME280_ReadReg>
 80020d8:	4603      	mov	r3, r0
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	461a      	mov	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	603b      	str	r3, [r7, #0]
	sprintf(str1, "Measurements status: %04X\r\n", value32);
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4922      	ldr	r1, [pc, #136]	@ (8002170 <BME280_Init+0x134>)
 80020e8:	481f      	ldr	r0, [pc, #124]	@ (8002168 <BME280_Init+0x12c>)
 80020ea:	f004 fba1 	bl	8006830 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 80020ee:	481e      	ldr	r0, [pc, #120]	@ (8002168 <BME280_Init+0x12c>)
 80020f0:	f7fe f8c6 	bl	8000280 <strlen>
 80020f4:	4603      	mov	r3, r0
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020fc:	491a      	ldr	r1, [pc, #104]	@ (8002168 <BME280_Init+0x12c>)
 80020fe:	481b      	ldr	r0, [pc, #108]	@ (800216c <BME280_Init+0x130>)
 8002100:	f003 fa04 	bl	800550c <HAL_UART_Transmit>
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
		(value32 & BME280_OSRS_T_MSK) ? "ON" : "OFF",
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <BME280_Init+0xd6>
 800210e:	4a19      	ldr	r2, [pc, #100]	@ (8002174 <BME280_Init+0x138>)
 8002110:	e000      	b.n	8002114 <BME280_Init+0xd8>
 8002112:	4a19      	ldr	r2, [pc, #100]	@ (8002178 <BME280_Init+0x13c>)
		(value32 & BME280_OSRS_P_MSK) ? "ON" : "OFF",
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f003 031c 	and.w	r3, r3, #28
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <BME280_Init+0xe6>
 800211e:	4915      	ldr	r1, [pc, #84]	@ (8002174 <BME280_Init+0x138>)
 8002120:	e000      	b.n	8002124 <BME280_Init+0xe8>
 8002122:	4915      	ldr	r1, [pc, #84]	@ (8002178 <BME280_Init+0x13c>)
		((value32 >> 8) & BME280_OSRS_H_MSK) ? "ON" : "OFF");
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 0307 	and.w	r3, r3, #7
	sprintf(str1, "Temperature: %s\r\nPressure: %s\r\nHumidity: %s\r\n",
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <BME280_Init+0xf8>
 8002130:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <BME280_Init+0x138>)
 8002132:	e000      	b.n	8002136 <BME280_Init+0xfa>
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <BME280_Init+0x13c>)
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	460b      	mov	r3, r1
 800213a:	4910      	ldr	r1, [pc, #64]	@ (800217c <BME280_Init+0x140>)
 800213c:	480a      	ldr	r0, [pc, #40]	@ (8002168 <BME280_Init+0x12c>)
 800213e:	f004 fb77 	bl	8006830 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8002142:	4809      	ldr	r0, [pc, #36]	@ (8002168 <BME280_Init+0x12c>)
 8002144:	f7fe f89c 	bl	8000280 <strlen>
 8002148:	4603      	mov	r3, r0
 800214a:	b29a      	uxth	r2, r3
 800214c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002150:	4905      	ldr	r1, [pc, #20]	@ (8002168 <BME280_Init+0x12c>)
 8002152:	4806      	ldr	r0, [pc, #24]	@ (800216c <BME280_Init+0x130>)
 8002154:	f003 f9da 	bl	800550c <HAL_UART_Transmit>
	BME280_SetMode(BME280_MODE_NORMAL);
 8002158:	2003      	movs	r0, #3
 800215a:	f7ff fb18 	bl	800178e <BME280_SetMode>
}
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	08009a80 	.word	0x08009a80
 8002168:	20000280 	.word	0x20000280
 800216c:	200002e8 	.word	0x200002e8
 8002170:	08009a94 	.word	0x08009a94
 8002174:	08009ab0 	.word	0x08009ab0
 8002178:	08009ab4 	.word	0x08009ab4
 800217c:	08009ab8 	.word	0x08009ab8

08002180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	@ 0x28
 8002184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
 8002194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002196:	4b2b      	ldr	r3, [pc, #172]	@ (8002244 <MX_GPIO_Init+0xc4>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4a2a      	ldr	r2, [pc, #168]	@ (8002244 <MX_GPIO_Init+0xc4>)
 800219c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021a0:	6153      	str	r3, [r2, #20]
 80021a2:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ae:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4a24      	ldr	r2, [pc, #144]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021b8:	6153      	str	r3, [r2, #20]
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021d0:	6153      	str	r3, [r2, #20]
 80021d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4a18      	ldr	r2, [pc, #96]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e8:	6153      	str	r3, [r2, #20]
 80021ea:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <MX_GPIO_Init+0xc4>)
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2120      	movs	r1, #32
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fe:	f000 fe69 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002208:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800220c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	480b      	ldr	r0, [pc, #44]	@ (8002248 <MX_GPIO_Init+0xc8>)
 800221a:	f000 fcd1 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800221e:	2320      	movs	r3, #32
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002238:	f000 fcc2 	bl	8002bc0 <HAL_GPIO_Init>

}
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	@ 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	48000800 	.word	0x48000800

0800224c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002250:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <MX_I2C1_Init+0x74>)
 8002252:	4a1c      	ldr	r2, [pc, #112]	@ (80022c4 <MX_I2C1_Init+0x78>)
 8002254:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8002256:	4b1a      	ldr	r3, [pc, #104]	@ (80022c0 <MX_I2C1_Init+0x74>)
 8002258:	f240 220b 	movw	r2, #523	@ 0x20b
 800225c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800225e:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <MX_I2C1_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002264:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <MX_I2C1_Init+0x74>)
 8002266:	2201      	movs	r2, #1
 8002268:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <MX_I2C1_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <MX_I2C1_Init+0x74>)
 8002272:	2200      	movs	r2, #0
 8002274:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <MX_I2C1_Init+0x74>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800227c:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <MX_I2C1_Init+0x74>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <MX_I2C1_Init+0x74>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002288:	480d      	ldr	r0, [pc, #52]	@ (80022c0 <MX_I2C1_Init+0x74>)
 800228a:	f000 fe3b 	bl	8002f04 <HAL_I2C_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002294:	f000 f956 	bl	8002544 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002298:	2100      	movs	r1, #0
 800229a:	4809      	ldr	r0, [pc, #36]	@ (80022c0 <MX_I2C1_Init+0x74>)
 800229c:	f001 fbbe 	bl	8003a1c <HAL_I2CEx_ConfigAnalogFilter>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80022a6:	f000 f94d 	bl	8002544 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022aa:	2100      	movs	r1, #0
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <MX_I2C1_Init+0x74>)
 80022ae:	f001 fc00 	bl	8003ab2 <HAL_I2CEx_ConfigDigitalFilter>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80022b8:	f000 f944 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000022c 	.word	0x2000022c
 80022c4:	40005400 	.word	0x40005400

080022c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	@ 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a17      	ldr	r2, [pc, #92]	@ (8002344 <HAL_I2C_MspInit+0x7c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d128      	bne.n	800233c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4a16      	ldr	r2, [pc, #88]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f4:	6153      	str	r3, [r2, #20]
 80022f6:	4b14      	ldr	r3, [pc, #80]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002302:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002308:	2312      	movs	r3, #18
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002314:	2304      	movs	r3, #4
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	480b      	ldr	r0, [pc, #44]	@ (800234c <HAL_I2C_MspInit+0x84>)
 8002320:	f000 fc4e 	bl	8002bc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 800232a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800232e:	61d3      	str	r3, [r2, #28]
 8002330:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_I2C_MspInit+0x80>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	@ 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40005400 	.word	0x40005400
 8002348:	40021000 	.word	0x40021000
 800234c:	48000400 	.word	0x48000400

08002350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float temperature = 0.0f, preasure = 0.0f, humidity = 0.0f, altitude = 0.0f;
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800236e:	f000 fab7 	bl	80028e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002372:	f000 f887 	bl	8002484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002376:	f7ff ff03 	bl	8002180 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800237a:	f000 fa15 	bl	80027a8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800237e:	f7ff ff65 	bl	800224c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Init();
 8002382:	f7ff fe5b 	bl	800203c <BME280_Init>
  while (1)
  {
//	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)"HEllo\r\n", strlen("HEllo\r\n"), 1000);
//	  HAL_Delay(1000);
	  temperature = BME280_ReadTemperature();
 8002386:	f7ff fa21 	bl	80017cc <BME280_ReadTemperature>
 800238a:	ed87 0a03 	vstr	s0, [r7, #12]
	  preasure = BME280_ReadPressure();
 800238e:	f7ff fa75 	bl	800187c <BME280_ReadPressure>
 8002392:	ed87 0a02 	vstr	s0, [r7, #8]
	  humidity = BME280_ReadHumidity();
 8002396:	f7ff fd85 	bl	8001ea4 <BME280_ReadHumidity>
 800239a:	ed87 0a01 	vstr	s0, [r7, #4]
	  altitude = BME280_ReadAltitude(SEALEVELPRESSURE_PA);
 800239e:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002464 <main+0x114>
 80023a2:	f7ff fe01 	bl	8001fa8 <BME280_ReadAltitude>
 80023a6:	ed87 0a00 	vstr	s0, [r7]
	  sprintf(str1, "Temperature: %.2f *C\r\n", temperature);
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7fe f8d4 	bl	8000558 <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	492c      	ldr	r1, [pc, #176]	@ (8002468 <main+0x118>)
 80023b6:	482d      	ldr	r0, [pc, #180]	@ (800246c <main+0x11c>)
 80023b8:	f004 fa3a 	bl	8006830 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 1000);
 80023bc:	482b      	ldr	r0, [pc, #172]	@ (800246c <main+0x11c>)
 80023be:	f7fd ff5f 	bl	8000280 <strlen>
 80023c2:	4603      	mov	r3, r0
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ca:	4928      	ldr	r1, [pc, #160]	@ (800246c <main+0x11c>)
 80023cc:	4828      	ldr	r0, [pc, #160]	@ (8002470 <main+0x120>)
 80023ce:	f003 f89d 	bl	800550c <HAL_UART_Transmit>

	  sprintf(str1, "Preasure: %.2f *C\r\n", preasure);
 80023d2:	68b8      	ldr	r0, [r7, #8]
 80023d4:	f7fe f8c0 	bl	8000558 <__aeabi_f2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4925      	ldr	r1, [pc, #148]	@ (8002474 <main+0x124>)
 80023de:	4823      	ldr	r0, [pc, #140]	@ (800246c <main+0x11c>)
 80023e0:	f004 fa26 	bl	8006830 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 1000);
 80023e4:	4821      	ldr	r0, [pc, #132]	@ (800246c <main+0x11c>)
 80023e6:	f7fd ff4b 	bl	8000280 <strlen>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f2:	491e      	ldr	r1, [pc, #120]	@ (800246c <main+0x11c>)
 80023f4:	481e      	ldr	r0, [pc, #120]	@ (8002470 <main+0x120>)
 80023f6:	f003 f889 	bl	800550c <HAL_UART_Transmit>

	  sprintf(str1, "Humidity: %.2f *C\r\n", humidity);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f8ac 	bl	8000558 <__aeabi_f2d>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	491c      	ldr	r1, [pc, #112]	@ (8002478 <main+0x128>)
 8002406:	4819      	ldr	r0, [pc, #100]	@ (800246c <main+0x11c>)
 8002408:	f004 fa12 	bl	8006830 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 1000);
 800240c:	4817      	ldr	r0, [pc, #92]	@ (800246c <main+0x11c>)
 800240e:	f7fd ff37 	bl	8000280 <strlen>
 8002412:	4603      	mov	r3, r0
 8002414:	b29a      	uxth	r2, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800241a:	4914      	ldr	r1, [pc, #80]	@ (800246c <main+0x11c>)
 800241c:	4814      	ldr	r0, [pc, #80]	@ (8002470 <main+0x120>)
 800241e:	f003 f875 	bl	800550c <HAL_UART_Transmit>

	  sprintf(str1, "Altitude: %.2f *C\r\n", altitude);
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f7fe f898 	bl	8000558 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4913      	ldr	r1, [pc, #76]	@ (800247c <main+0x12c>)
 800242e:	480f      	ldr	r0, [pc, #60]	@ (800246c <main+0x11c>)
 8002430:	f004 f9fe 	bl	8006830 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 1000);
 8002434:	480d      	ldr	r0, [pc, #52]	@ (800246c <main+0x11c>)
 8002436:	f7fd ff23 	bl	8000280 <strlen>
 800243a:	4603      	mov	r3, r0
 800243c:	b29a      	uxth	r2, r3
 800243e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002442:	490a      	ldr	r1, [pc, #40]	@ (800246c <main+0x11c>)
 8002444:	480a      	ldr	r0, [pc, #40]	@ (8002470 <main+0x120>)
 8002446:	f003 f861 	bl	800550c <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart2, (uint8_t*)"-----------------------------------\r\n", strlen("-----------------------------------\r\n"), 1000);
 800244a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244e:	2225      	movs	r2, #37	@ 0x25
 8002450:	490b      	ldr	r1, [pc, #44]	@ (8002480 <main+0x130>)
 8002452:	4807      	ldr	r0, [pc, #28]	@ (8002470 <main+0x120>)
 8002454:	f003 f85a 	bl	800550c <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8002458:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800245c:	f000 faa6 	bl	80029ac <HAL_Delay>
	  temperature = BME280_ReadTemperature();
 8002460:	bf00      	nop
 8002462:	e790      	b.n	8002386 <main+0x36>
 8002464:	49776020 	.word	0x49776020
 8002468:	08009ae8 	.word	0x08009ae8
 800246c:	20000280 	.word	0x20000280
 8002470:	200002e8 	.word	0x200002e8
 8002474:	08009b00 	.word	0x08009b00
 8002478:	08009b14 	.word	0x08009b14
 800247c:	08009b28 	.word	0x08009b28
 8002480:	08009b3c 	.word	0x08009b3c

08002484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b0a6      	sub	sp, #152	@ 0x98
 8002488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800248e:	2228      	movs	r2, #40	@ 0x28
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f004 fa2f 	bl	80068f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002498:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2258      	movs	r2, #88	@ 0x58
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 fa21 	bl	80068f6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024b4:	2302      	movs	r3, #2
 80024b6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b8:	2301      	movs	r3, #1
 80024ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024bc:	2310      	movs	r3, #16
 80024be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80024d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 fb32 	bl	8003b4c <HAL_RCC_OscConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80024ee:	f000 f829 	bl	8002544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f2:	230f      	movs	r3, #15
 80024f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f6:	2302      	movs	r3, #2
 80024f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fa:	2300      	movs	r3, #0
 80024fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002502:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002508:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800250c:	2102      	movs	r1, #2
 800250e:	4618      	mov	r0, r3
 8002510:	f002 fb70 	bl	8004bf4 <HAL_RCC_ClockConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800251a:	f000 f813 	bl	8002544 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800251e:	2322      	movs	r3, #34	@ 0x22
 8002520:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	4618      	mov	r0, r3
 800252e:	f002 fd81 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002538:	f000 f804 	bl	8002544 <Error_Handler>
  }
}
 800253c:	bf00      	nop
 800253e:	3798      	adds	r7, #152	@ 0x98
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <Error_Handler+0x8>

08002550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002556:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <HAL_MspInit+0x44>)
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_MspInit+0x44>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6193      	str	r3, [r2, #24]
 8002562:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <HAL_MspInit+0x44>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_MspInit+0x44>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <HAL_MspInit+0x44>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_MspInit+0x44>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002586:	2007      	movs	r0, #7
 8002588:	f000 fae6 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000

08002598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <NMI_Handler+0x4>

080025a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <MemManage_Handler+0x4>

080025b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <BusFault_Handler+0x4>

080025b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <UsageFault_Handler+0x4>

080025c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ee:	f000 f9bd 	bl	800296c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  return 1;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <_kill>:

int _kill(int pid, int sig)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002610:	f004 f9c4 	bl	800699c <__errno>
 8002614:	4603      	mov	r3, r0
 8002616:	2216      	movs	r2, #22
 8002618:	601a      	str	r2, [r3, #0]
  return -1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_exit>:

void _exit (int status)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800262e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffe7 	bl	8002606 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <_exit+0x12>

0800263c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e00a      	b.n	8002664 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800264e:	f3af 8000 	nop.w
 8002652:	4601      	mov	r1, r0
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	60ba      	str	r2, [r7, #8]
 800265a:	b2ca      	uxtb	r2, r1
 800265c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	429a      	cmp	r2, r3
 800266a:	dbf0      	blt.n	800264e <_read+0x12>
  }

  return len;
 800266c:	687b      	ldr	r3, [r7, #4]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e009      	b.n	800269c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dbf1      	blt.n	8002688 <_write+0x12>
  }
  return len;
 80026a4:	687b      	ldr	r3, [r7, #4]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_close>:

int _close(int file)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026d6:	605a      	str	r2, [r3, #4]
  return 0;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <_isatty>:

int _isatty(int file)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002720:	4a14      	ldr	r2, [pc, #80]	@ (8002774 <_sbrk+0x5c>)
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <_sbrk+0x60>)
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <_sbrk+0x64>)
 8002736:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <_sbrk+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d207      	bcs.n	8002758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002748:	f004 f928 	bl	800699c <__errno>
 800274c:	4603      	mov	r3, r0
 800274e:	220c      	movs	r2, #12
 8002750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002756:	e009      	b.n	800276c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002758:	4b08      	ldr	r3, [pc, #32]	@ (800277c <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275e:	4b07      	ldr	r3, [pc, #28]	@ (800277c <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	4a05      	ldr	r2, [pc, #20]	@ (800277c <_sbrk+0x64>)
 8002768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20010000 	.word	0x20010000
 8002778:	00000400 	.word	0x00000400
 800277c:	200002e4 	.word	0x200002e4
 8002780:	200004c0 	.word	0x200004c0

08002784 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002788:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <SystemInit+0x20>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <SystemInit+0x20>)
 8002790:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002794:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027ac:	4b14      	ldr	r3, [pc, #80]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027ae:	4a15      	ldr	r2, [pc, #84]	@ (8002804 <MX_USART2_UART_Init+0x5c>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027b2:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b11      	ldr	r3, [pc, #68]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <MX_USART2_UART_Init+0x58>)
 80027ec:	f002 fe40 	bl	8005470 <HAL_UART_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80027f6:	f7ff fea5 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200002e8 	.word	0x200002e8
 8002804:	40004400 	.word	0x40004400

08002808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <HAL_UART_MspInit+0x7c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d128      	bne.n	800287c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_UART_MspInit+0x80>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	4a16      	ldr	r2, [pc, #88]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002834:	61d3      	str	r3, [r2, #28]
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284c:	6153      	str	r3, [r2, #20]
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_UART_MspInit+0x80>)
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800285a:	230c      	movs	r3, #12
 800285c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285e:	2302      	movs	r3, #2
 8002860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800286a:	2307      	movs	r3, #7
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002878:	f000 f9a2 	bl	8002bc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800287c:	bf00      	nop
 800287e:	3728      	adds	r7, #40	@ 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40004400 	.word	0x40004400
 8002888:	40021000 	.word	0x40021000

0800288c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002890:	f7ff ff78 	bl	8002784 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	@ (80028cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <LoopForever+0xe>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <LoopForever+0x16>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ba:	f004 f875 	bl	80069a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028be:	f7ff fd47 	bl	8002350 <main>

080028c2 <LoopForever>:

LoopForever:
    b LoopForever
 80028c2:	e7fe      	b.n	80028c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80028d0:	08009f50 	.word	0x08009f50
  ldr r2, =_sbss
 80028d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80028d8:	200004c0 	.word	0x200004c0

080028dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_2_IRQHandler>
	...

080028e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_Init+0x28>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <HAL_Init+0x28>)
 80028ea:	f043 0310 	orr.w	r3, r3, #16
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f0:	2003      	movs	r0, #3
 80028f2:	f000 f931 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f808 	bl	800290c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028fc:	f7ff fe28 	bl	8002550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000

0800290c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002914:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <HAL_InitTick+0x54>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <HAL_InitTick+0x58>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002922:	fbb3 f3f1 	udiv	r3, r3, r1
 8002926:	fbb2 f3f3 	udiv	r3, r2, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f000 f93b 	bl	8002ba6 <HAL_SYSTICK_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e00e      	b.n	8002958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b0f      	cmp	r3, #15
 800293e:	d80a      	bhi.n	8002956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002940:	2200      	movs	r2, #0
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002948:	f000 f911 	bl	8002b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800294c:	4a06      	ldr	r2, [pc, #24]	@ (8002968 <HAL_InitTick+0x5c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000000 	.word	0x20000000
 8002964:	20000008 	.word	0x20000008
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_IncTick+0x20>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_IncTick+0x24>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4413      	add	r3, r2
 800297c:	4a04      	ldr	r2, [pc, #16]	@ (8002990 <HAL_IncTick+0x24>)
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000008 	.word	0x20000008
 8002990:	20000370 	.word	0x20000370

08002994 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return uwTick;  
 8002998:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <HAL_GetTick+0x14>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000370 	.word	0x20000370

080029ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7ff ffee 	bl	8002994 <HAL_GetTick>
 80029b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029c4:	d005      	beq.n	80029d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_Delay+0x44>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029d2:	bf00      	nop
 80029d4:	f7ff ffde 	bl	8002994 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d8f7      	bhi.n	80029d4 <HAL_Delay+0x28>
  {
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000008 	.word	0x20000008

080029f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a04:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x44>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a40:	4b04      	ldr	r3, [pc, #16]	@ (8002a54 <__NVIC_GetPriorityGrouping+0x18>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	f003 0307 	and.w	r3, r3, #7
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	6039      	str	r1, [r7, #0]
 8002a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	db0a      	blt.n	8002a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	490c      	ldr	r1, [pc, #48]	@ (8002aa4 <__NVIC_SetPriority+0x4c>)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a80:	e00a      	b.n	8002a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <__NVIC_SetPriority+0x50>)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	3b04      	subs	r3, #4
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	440b      	add	r3, r1
 8002a96:	761a      	strb	r2, [r3, #24]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f1c3 0307 	rsb	r3, r3, #7
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	bf28      	it	cs
 8002aca:	2304      	movcs	r3, #4
 8002acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	2b06      	cmp	r3, #6
 8002ad4:	d902      	bls.n	8002adc <NVIC_EncodePriority+0x30>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3b03      	subs	r3, #3
 8002ada:	e000      	b.n	8002ade <NVIC_EncodePriority+0x32>
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43da      	mvns	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	401a      	ands	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43d9      	mvns	r1, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	4313      	orrs	r3, r2
         );
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3724      	adds	r7, #36	@ 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b24:	d301      	bcc.n	8002b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00f      	b.n	8002b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b54 <SysTick_Config+0x40>)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b32:	210f      	movs	r1, #15
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b38:	f7ff ff8e 	bl	8002a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b3c:	4b05      	ldr	r3, [pc, #20]	@ (8002b54 <SysTick_Config+0x40>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <SysTick_Config+0x40>)
 8002b44:	2207      	movs	r2, #7
 8002b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff47 	bl	80029f4 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff5c 	bl	8002a3c <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ff8e 	bl	8002aac <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff5d 	bl	8002a58 <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffb0 	bl	8002b14 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bce:	e160      	b.n	8002e92 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8152 	beq.w	8002e8c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 0303 	and.w	r3, r3, #3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d005      	beq.n	8002c00 <HAL_GPIO_Init+0x40>
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d130      	bne.n	8002c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c36:	2201      	movs	r2, #1
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0201 	and.w	r2, r3, #1
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d017      	beq.n	8002c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d123      	bne.n	8002cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	6939      	ldr	r1, [r7, #16]
 8002cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0203 	and.w	r2, r3, #3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80ac 	beq.w	8002e8c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d34:	4b5e      	ldr	r3, [pc, #376]	@ (8002eb0 <HAL_GPIO_Init+0x2f0>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb0 <HAL_GPIO_Init+0x2f0>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6193      	str	r3, [r2, #24]
 8002d40:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb0 <HAL_GPIO_Init+0x2f0>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d4c:	4a59      	ldr	r2, [pc, #356]	@ (8002eb4 <HAL_GPIO_Init+0x2f4>)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	220f      	movs	r2, #15
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d76:	d025      	beq.n	8002dc4 <HAL_GPIO_Init+0x204>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb8 <HAL_GPIO_Init+0x2f8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d01f      	beq.n	8002dc0 <HAL_GPIO_Init+0x200>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a4e      	ldr	r2, [pc, #312]	@ (8002ebc <HAL_GPIO_Init+0x2fc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d019      	beq.n	8002dbc <HAL_GPIO_Init+0x1fc>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002ec0 <HAL_GPIO_Init+0x300>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <HAL_GPIO_Init+0x1f8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec4 <HAL_GPIO_Init+0x304>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00d      	beq.n	8002db4 <HAL_GPIO_Init+0x1f4>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec8 <HAL_GPIO_Init+0x308>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <HAL_GPIO_Init+0x1f0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a4a      	ldr	r2, [pc, #296]	@ (8002ecc <HAL_GPIO_Init+0x30c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_GPIO_Init+0x1ec>
 8002da8:	2306      	movs	r3, #6
 8002daa:	e00c      	b.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002dac:	2307      	movs	r3, #7
 8002dae:	e00a      	b.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002db0:	2305      	movs	r3, #5
 8002db2:	e008      	b.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002db4:	2304      	movs	r3, #4
 8002db6:	e006      	b.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002db8:	2303      	movs	r3, #3
 8002dba:	e004      	b.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e002      	b.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e000      	b.n	8002dc6 <HAL_GPIO_Init+0x206>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	f002 0203 	and.w	r2, r2, #3
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	4093      	lsls	r3, r2
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dd6:	4937      	ldr	r1, [pc, #220]	@ (8002eb4 <HAL_GPIO_Init+0x2f4>)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002de4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002e08:	4a31      	ldr	r2, [pc, #196]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e0e:	4b30      	ldr	r3, [pc, #192]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002e32:	4a27      	ldr	r2, [pc, #156]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e38:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e86:	4a12      	ldr	r2, [pc, #72]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f47f ae97 	bne.w	8002bd0 <HAL_GPIO_Init+0x10>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	bf00      	nop
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000
 8002eb8:	48000400 	.word	0x48000400
 8002ebc:	48000800 	.word	0x48000800
 8002ec0:	48000c00 	.word	0x48000c00
 8002ec4:	48001000 	.word	0x48001000
 8002ec8:	48001400 	.word	0x48001400
 8002ecc:	48001800 	.word	0x48001800
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ef2:	887a      	ldrh	r2, [r7, #2]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e08d      	b.n	8003032 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff f9cc 	bl	80022c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d107      	bne.n	8002f7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	e006      	b.n	8002f8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d108      	bne.n	8002fa6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	e007      	b.n	8002fb6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691a      	ldr	r2, [r3, #16]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69d9      	ldr	r1, [r3, #28]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	f040 80f9 	bne.w	8003256 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_I2C_Mem_Write+0x34>
 800306a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003076:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0ed      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_I2C_Mem_Write+0x4e>
 8003086:	2302      	movs	r3, #2
 8003088:	e0e6      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003092:	f7ff fc7f 	bl	8002994 <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2319      	movs	r3, #25
 800309e:	2201      	movs	r2, #1
 80030a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fac3 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d1      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2221      	movs	r2, #33	@ 0x21
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	@ 0x40
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a3a      	ldr	r2, [r7, #32]
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030dc:	88f8      	ldrh	r0, [r7, #6]
 80030de:	893a      	ldrh	r2, [r7, #8]
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4603      	mov	r3, r0
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f9d3 	bl	8003498 <I2C_RequestMemoryWrite>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0a9      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2bff      	cmp	r3, #255	@ 0xff
 800310c:	d90e      	bls.n	800312c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	22ff      	movs	r2, #255	@ 0xff
 8003112:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003118:	b2da      	uxtb	r2, r3
 800311a:	8979      	ldrh	r1, [r7, #10]
 800311c:	2300      	movs	r3, #0
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fc47 	bl	80039b8 <I2C_TransferConfig>
 800312a:	e00f      	b.n	800314c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313a:	b2da      	uxtb	r2, r3
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	2300      	movs	r3, #0
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fc36 	bl	80039b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fac6 	bl	80036e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e07b      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	1c5a      	adds	r2, r3, #1
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d034      	beq.n	8003204 <HAL_I2C_Mem_Write+0x1c8>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d130      	bne.n	8003204 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a8:	2200      	movs	r2, #0
 80031aa:	2180      	movs	r1, #128	@ 0x80
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fa3f 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e04d      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2bff      	cmp	r3, #255	@ 0xff
 80031c4:	d90e      	bls.n	80031e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	22ff      	movs	r2, #255	@ 0xff
 80031ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	2300      	movs	r3, #0
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fbeb 	bl	80039b8 <I2C_TransferConfig>
 80031e2:	e00f      	b.n	8003204 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	2300      	movs	r3, #0
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fbda 	bl	80039b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d19e      	bne.n	800314c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 faac 	bl	8003770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e01a      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2220      	movs	r2, #32
 8003228:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <HAL_I2C_Mem_Write+0x224>)
 8003236:	400b      	ands	r3, r1
 8003238:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	e000      	b.n	8003258 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	fe00e800 	.word	0xfe00e800

08003264 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	817b      	strh	r3, [r7, #10]
 8003276:	460b      	mov	r3, r1
 8003278:	813b      	strh	r3, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 80fd 	bne.w	8003486 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_I2C_Mem_Read+0x34>
 8003292:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800329e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0f1      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Mem_Read+0x4e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0ea      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ba:	f7ff fb6b 	bl	8002994 <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	2319      	movs	r3, #25
 80032c6:	2201      	movs	r2, #1
 80032c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f9af 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0d5      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2222      	movs	r2, #34	@ 0x22
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a3a      	ldr	r2, [r7, #32]
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003304:	88f8      	ldrh	r0, [r7, #6]
 8003306:	893a      	ldrh	r2, [r7, #8]
 8003308:	8979      	ldrh	r1, [r7, #10]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4603      	mov	r3, r0
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f913 	bl	8003540 <I2C_RequestMemoryRead>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0ad      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2bff      	cmp	r3, #255	@ 0xff
 8003334:	d90e      	bls.n	8003354 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	b2da      	uxtb	r2, r3
 8003342:	8979      	ldrh	r1, [r7, #10]
 8003344:	4b52      	ldr	r3, [pc, #328]	@ (8003490 <HAL_I2C_Mem_Read+0x22c>)
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fb33 	bl	80039b8 <I2C_TransferConfig>
 8003352:	e00f      	b.n	8003374 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003362:	b2da      	uxtb	r2, r3
 8003364:	8979      	ldrh	r1, [r7, #10]
 8003366:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <HAL_I2C_Mem_Read+0x22c>)
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fb22 	bl	80039b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337a:	2200      	movs	r2, #0
 800337c:	2104      	movs	r1, #4
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f956 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e07c      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d034      	beq.n	8003434 <HAL_I2C_Mem_Read+0x1d0>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d130      	bne.n	8003434 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d8:	2200      	movs	r2, #0
 80033da:	2180      	movs	r1, #128	@ 0x80
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f927 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e04d      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2bff      	cmp	r3, #255	@ 0xff
 80033f4:	d90e      	bls.n	8003414 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	b2da      	uxtb	r2, r3
 8003402:	8979      	ldrh	r1, [r7, #10]
 8003404:	2300      	movs	r3, #0
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fad3 	bl	80039b8 <I2C_TransferConfig>
 8003412:	e00f      	b.n	8003434 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003422:	b2da      	uxtb	r2, r3
 8003424:	8979      	ldrh	r1, [r7, #10]
 8003426:	2300      	movs	r3, #0
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fac2 	bl	80039b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d19a      	bne.n	8003374 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f994 	bl	8003770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e01a      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2220      	movs	r2, #32
 8003458:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_I2C_Mem_Read+0x230>)
 8003466:	400b      	ands	r3, r1
 8003468:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	80002400 	.word	0x80002400
 8003494:	fe00e800 	.word	0xfe00e800

08003498 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	4b20      	ldr	r3, [pc, #128]	@ (800353c <I2C_RequestMemoryWrite+0xa4>)
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fa79 	bl	80039b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f909 	bl	80036e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e02c      	b.n	8003534 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034e0:	893b      	ldrh	r3, [r7, #8]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80034ea:	e015      	b.n	8003518 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ec:	893b      	ldrh	r3, [r7, #8]
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	69b9      	ldr	r1, [r7, #24]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8ef 	bl	80036e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e012      	b.n	8003534 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350e:	893b      	ldrh	r3, [r7, #8]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2200      	movs	r2, #0
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f884 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	80002000 	.word	0x80002000

08003540 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4603      	mov	r3, r0
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	460b      	mov	r3, r1
 8003554:	813b      	strh	r3, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	8979      	ldrh	r1, [r7, #10]
 8003560:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <I2C_RequestMemoryRead+0xa4>)
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 fa26 	bl	80039b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f8b6 	bl	80036e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e02c      	b.n	80035da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d105      	bne.n	8003592 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003586:	893b      	ldrh	r3, [r7, #8]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003590:	e015      	b.n	80035be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003592:	893b      	ldrh	r3, [r7, #8]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	b29b      	uxth	r3, r3
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	69b9      	ldr	r1, [r7, #24]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f89c 	bl	80036e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e012      	b.n	80035da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2140      	movs	r1, #64	@ 0x40
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f831 	bl	8003630 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e000      	b.n	80035da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	80002000 	.word	0x80002000

080035e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d103      	bne.n	8003606 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d007      	beq.n	8003624 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	619a      	str	r2, [r3, #24]
  }
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003640:	e03b      	b.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8d6 	bl	80037f8 <I2C_IsErrorOccurred>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e041      	b.n	80036da <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800365c:	d02d      	beq.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7ff f999 	bl	8002994 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x44>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d122      	bne.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	429a      	cmp	r2, r3
 8003690:	d113      	bne.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	f043 0220 	orr.w	r2, r3, #32
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e00f      	b.n	80036da <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4013      	ands	r3, r2
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	bf0c      	ite	eq
 80036ca:	2301      	moveq	r3, #1
 80036cc:	2300      	movne	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	461a      	mov	r2, r3
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d0b4      	beq.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ee:	e033      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f87f 	bl	80037f8 <I2C_IsErrorOccurred>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e031      	b.n	8003768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800370a:	d025      	beq.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370c:	f7ff f942 	bl	8002994 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	429a      	cmp	r2, r3
 800371a:	d302      	bcc.n	8003722 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d11a      	bne.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d013      	beq.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e007      	b.n	8003768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d1c4      	bne.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377c:	e02f      	b.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f838 	bl	80037f8 <I2C_IsErrorOccurred>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e02d      	b.n	80037ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003792:	f7ff f8ff 	bl	8002994 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d302      	bcc.n	80037a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d11a      	bne.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d013      	beq.n	80037de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e007      	b.n	80037ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d1c8      	bne.n	800377e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
	...

080037f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	@ 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d068      	beq.n	80038f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2210      	movs	r2, #16
 800382a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800382c:	e049      	b.n	80038c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003834:	d045      	beq.n	80038c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7ff f8ad 	bl	8002994 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_IsErrorOccurred+0x54>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d13a      	bne.n	80038c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003856:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800385e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800386a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386e:	d121      	bne.n	80038b4 <I2C_IsErrorOccurred+0xbc>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003876:	d01d      	beq.n	80038b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	2b20      	cmp	r3, #32
 800387c:	d01a      	beq.n	80038b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800388c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800388e:	f7ff f881 	bl	8002994 <HAL_GetTick>
 8003892:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003894:	e00e      	b.n	80038b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003896:	f7ff f87d 	bl	8002994 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b19      	cmp	r3, #25
 80038a2:	d907      	bls.n	80038b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	f043 0320 	orr.w	r3, r3, #32
 80038aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038b2:	e006      	b.n	80038c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d1e9      	bne.n	8003896 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d003      	beq.n	80038d8 <I2C_IsErrorOccurred+0xe0>
 80038d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0aa      	beq.n	800382e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2220      	movs	r2, #32
 80038e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f043 0308 	orr.w	r3, r3, #8
 8003930:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800393a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00b      	beq.n	8003964 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800395c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01c      	beq.n	80039a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f7ff fe3b 	bl	80035e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <I2C_IsErrorOccurred+0x1bc>)
 800397e:	400b      	ands	r3, r1
 8003980:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3728      	adds	r7, #40	@ 0x28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	fe00e800 	.word	0xfe00e800

080039b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	460b      	mov	r3, r1
 80039c4:	817b      	strh	r3, [r7, #10]
 80039c6:	4613      	mov	r3, r2
 80039c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d0:	7a7b      	ldrb	r3, [r7, #9]
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	0d5b      	lsrs	r3, r3, #21
 80039f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039f6:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <I2C_TransferConfig+0x60>)
 80039f8:	430b      	orrs	r3, r1
 80039fa:	43db      	mvns	r3, r3
 80039fc:	ea02 0103 	and.w	r1, r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	03ff63ff 	.word	0x03ff63ff

08003a1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d138      	bne.n	8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e032      	b.n	8003aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	@ 0x24
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6819      	ldr	r1, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d139      	bne.n	8003b3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e033      	b.n	8003b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2224      	movs	r2, #36	@ 0x24
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e000      	b.n	8003b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f001 b83a 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 816f 	beq.w	8003e66 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003b88:	4bb5      	ldr	r3, [pc, #724]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d00c      	beq.n	8003bae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b94:	4bb2      	ldr	r3, [pc, #712]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d15c      	bne.n	8003c5a <HAL_RCC_OscConfig+0x10e>
 8003ba0:	4baf      	ldr	r3, [pc, #700]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bac:	d155      	bne.n	8003c5a <HAL_RCC_OscConfig+0x10e>
 8003bae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bb2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003bc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_RCC_OscConfig+0x94>
 8003bda:	4ba1      	ldr	r3, [pc, #644]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e015      	b.n	8003c0c <HAL_RCC_OscConfig+0xc0>
 8003be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003be4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003bf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003bfc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003c08:	4b95      	ldr	r3, [pc, #596]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c10:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003c14:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003c18:	fa92 f2a2 	rbit	r2, r2
 8003c1c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003c20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f042 0220 	orr.w	r2, r2, #32
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f002 021f 	and.w	r2, r2, #31
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8111 	beq.w	8003e64 <HAL_RCC_OscConfig+0x318>
 8003c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 8108 	bne.w	8003e64 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f000 bfc6 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x12e>
 8003c6c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a7b      	ldr	r2, [pc, #492]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	e036      	b.n	8003ce8 <HAL_RCC_OscConfig+0x19c>
 8003c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x158>
 8003c8a:	4b75      	ldr	r3, [pc, #468]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a74      	ldr	r2, [pc, #464]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b72      	ldr	r3, [pc, #456]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a71      	ldr	r2, [pc, #452]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003c9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e021      	b.n	8003ce8 <HAL_RCC_OscConfig+0x19c>
 8003ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x184>
 8003cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a69      	ldr	r2, [pc, #420]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b67      	ldr	r3, [pc, #412]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a66      	ldr	r2, [pc, #408]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0x19c>
 8003cd0:	4b63      	ldr	r3, [pc, #396]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a62      	ldr	r2, [pc, #392]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b60      	ldr	r3, [pc, #384]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5f      	ldr	r2, [pc, #380]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d059      	beq.n	8003dac <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fe4c 	bl	8002994 <HAL_GetTick>
 8003cfc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d02:	f7fe fe47 	bl	8002994 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	@ 0x64
 8003d10:	d902      	bls.n	8003d18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	f000 bf67 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
 8003d18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d1c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003d2c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d30:	fab3 f383 	clz	r3, r3
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_RCC_OscConfig+0x1fe>
 8003d44:	4b46      	ldr	r3, [pc, #280]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	e015      	b.n	8003d76 <HAL_RCC_OscConfig+0x22a>
 8003d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d4e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003d5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d62:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003d66:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003d72:	4b3b      	ldr	r3, [pc, #236]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d7a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003d7e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003d8a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003d8e:	fab2 f282 	clz	r2, r2
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	f042 0220 	orr.w	r2, r2, #32
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	f002 021f 	and.w	r2, r2, #31
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ab      	beq.n	8003d02 <HAL_RCC_OscConfig+0x1b6>
 8003daa:	e05c      	b.n	8003e66 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7fe fdf2 	bl	8002994 <HAL_GetTick>
 8003db0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db6:	f7fe fded 	bl	8002994 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	@ 0x64
 8003dc4:	d902      	bls.n	8003dcc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	f000 bf0d 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
 8003dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dd0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003de0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de4:	fab3 f383 	clz	r3, r3
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d102      	bne.n	8003dfe <HAL_RCC_OscConfig+0x2b2>
 8003df8:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x2de>
 8003dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e02:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e16:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003e1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003e26:	4b0e      	ldr	r3, [pc, #56]	@ (8003e60 <HAL_RCC_OscConfig+0x314>)
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e2e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003e32:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003e36:	fa92 f2a2 	rbit	r2, r2
 8003e3a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003e3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003e42:	fab2 f282 	clz	r2, r2
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	f042 0220 	orr.w	r2, r2, #32
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	f002 021f 	and.w	r2, r2, #31
 8003e52:	2101      	movs	r1, #1
 8003e54:	fa01 f202 	lsl.w	r2, r1, r2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ab      	bne.n	8003db6 <HAL_RCC_OscConfig+0x26a>
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_OscConfig+0x31a>
 8003e60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 817f 	beq.w	800417a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e7c:	4ba7      	ldr	r3, [pc, #668]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e88:	4ba4      	ldr	r3, [pc, #656]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d173      	bne.n	8003f7c <HAL_RCC_OscConfig+0x430>
 8003e94:	4ba1      	ldr	r3, [pc, #644]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea0:	d16c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x430>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003eb4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d102      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x386>
 8003ecc:	4b93      	ldr	r3, [pc, #588]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	e013      	b.n	8003efa <HAL_RCC_OscConfig+0x3ae>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003eea:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ef6:	4b89      	ldr	r3, [pc, #548]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	2202      	movs	r2, #2
 8003efc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003f00:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003f04:	fa92 f2a2 	rbit	r2, r2
 8003f08:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003f0c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003f10:	fab2 f282 	clz	r2, r2
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	f042 0220 	orr.w	r2, r2, #32
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	f002 021f 	and.w	r2, r2, #31
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f202 	lsl.w	r2, r1, r2
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3f6>
 8003f2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d002      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f000 be52 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f42:	4b76      	ldr	r3, [pc, #472]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	21f8      	movs	r1, #248	@ 0xf8
 8003f58:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003f60:	fa91 f1a1 	rbit	r1, r1
 8003f64:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003f68:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003f6c:	fab1 f181 	clz	r1, r1
 8003f70:	b2c9      	uxtb	r1, r1
 8003f72:	408b      	lsls	r3, r1
 8003f74:	4969      	ldr	r1, [pc, #420]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	e0fe      	b.n	800417a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8088 	beq.w	800409e <HAL_RCC_OscConfig+0x552>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003fa0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa4:	fab3 f383 	clz	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003fae:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fe fceb 	bl	8002994 <HAL_GetTick>
 8003fbe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc2:	e00a      	b.n	8003fda <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc4:	f7fe fce6 	bl	8002994 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d902      	bls.n	8003fda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	f000 be06 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003fec:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d102      	bne.n	800400a <HAL_RCC_OscConfig+0x4be>
 8004004:	4b45      	ldr	r3, [pc, #276]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	e013      	b.n	8004032 <HAL_RCC_OscConfig+0x4e6>
 800400a:	2302      	movs	r3, #2
 800400c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800401c:	2302      	movs	r3, #2
 800401e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004022:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004026:	fa93 f3a3 	rbit	r3, r3
 800402a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800402e:	4b3b      	ldr	r3, [pc, #236]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	2202      	movs	r2, #2
 8004034:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8004038:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800403c:	fa92 f2a2 	rbit	r2, r2
 8004040:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004044:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004048:	fab2 f282 	clz	r2, r2
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	f042 0220 	orr.w	r2, r2, #32
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	f002 021f 	and.w	r2, r2, #31
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f202 	lsl.w	r2, r1, r2
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0af      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004064:	4b2d      	ldr	r3, [pc, #180]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800406c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004070:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	21f8      	movs	r1, #248	@ 0xf8
 800407a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8004082:	fa91 f1a1 	rbit	r1, r1
 8004086:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800408a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800408e:	fab1 f181 	clz	r1, r1
 8004092:	b2c9      	uxtb	r1, r1
 8004094:	408b      	lsls	r3, r1
 8004096:	4921      	ldr	r1, [pc, #132]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
 800409c:	e06d      	b.n	800417a <HAL_RCC_OscConfig+0x62e>
 800409e:	2301      	movs	r3, #1
 80040a0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80040b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040be:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	461a      	mov	r2, r3
 80040c6:	2300      	movs	r3, #0
 80040c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fe fc63 	bl	8002994 <HAL_GetTick>
 80040ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fe fc5e 	bl	8002994 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d902      	bls.n	80040ea <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	f000 bd7e 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
 80040ea:	2302      	movs	r3, #2
 80040ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80040fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	b2db      	uxtb	r3, r3
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <HAL_RCC_OscConfig+0x5d4>
 8004114:	4b01      	ldr	r3, [pc, #4]	@ (800411c <HAL_RCC_OscConfig+0x5d0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	e016      	b.n	8004148 <HAL_RCC_OscConfig+0x5fc>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	2302      	movs	r3, #2
 8004122:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004132:	2302      	movs	r3, #2
 8004134:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004138:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800413c:	fa93 f3a3 	rbit	r3, r3
 8004140:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004144:	4bbf      	ldr	r3, [pc, #764]	@ (8004444 <HAL_RCC_OscConfig+0x8f8>)
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	2202      	movs	r2, #2
 800414a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800414e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004152:	fa92 f2a2 	rbit	r2, r2
 8004156:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800415a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800415e:	fab2 f282 	clz	r2, r2
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	f042 0220 	orr.w	r2, r2, #32
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	f002 021f 	and.w	r2, r2, #31
 800416e:	2101      	movs	r1, #1
 8004170:	fa01 f202 	lsl.w	r2, r1, r2
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1ac      	bne.n	80040d4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800417e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8113 	beq.w	80043b6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004190:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004194:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d07c      	beq.n	800429a <HAL_RCC_OscConfig+0x74e>
 80041a0:	2301      	movs	r3, #1
 80041a2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80041b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	4ba2      	ldr	r3, [pc, #648]	@ (8004448 <HAL_RCC_OscConfig+0x8fc>)
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	461a      	mov	r2, r3
 80041c6:	2301      	movs	r3, #1
 80041c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ca:	f7fe fbe3 	bl	8002994 <HAL_GetTick>
 80041ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fe fbde 	bl	8002994 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d902      	bls.n	80041ea <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	f000 bcfe 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
 80041ea:	2302      	movs	r3, #2
 80041ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041f4:	fa93 f2a3 	rbit	r2, r3
 80041f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800420a:	2202      	movs	r2, #2
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	fa93 f2a3 	rbit	r2, r3
 800421c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800422a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800422e:	2202      	movs	r2, #2
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004236:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	fa93 f2a3 	rbit	r2, r3
 8004240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004244:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004248:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	4b7e      	ldr	r3, [pc, #504]	@ (8004444 <HAL_RCC_OscConfig+0x8f8>)
 800424c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800424e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004252:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004256:	2102      	movs	r1, #2
 8004258:	6019      	str	r1, [r3, #0]
 800425a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800425e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	fa93 f1a3 	rbit	r1, r3
 8004268:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800426c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004270:	6019      	str	r1, [r3, #0]
  return result;
 8004272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004276:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 031f 	and.w	r3, r3, #31
 800428c:	2101      	movs	r1, #1
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	4013      	ands	r3, r2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d09d      	beq.n	80041d4 <HAL_RCC_OscConfig+0x688>
 8004298:	e08d      	b.n	80043b6 <HAL_RCC_OscConfig+0x86a>
 800429a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800429e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	fa93 f2a3 	rbit	r2, r3
 80042b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80042bc:	601a      	str	r2, [r3, #0]
  return result;
 80042be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80042c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	4b5d      	ldr	r3, [pc, #372]	@ (8004448 <HAL_RCC_OscConfig+0x8fc>)
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	461a      	mov	r2, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042dc:	f7fe fb5a 	bl	8002994 <HAL_GetTick>
 80042e0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e6:	f7fe fb55 	bl	8002994 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	f000 bc75 	b.w	8004be6 <HAL_RCC_OscConfig+0x109a>
 80042fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004300:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004304:	2202      	movs	r2, #2
 8004306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800430c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	fa93 f2a3 	rbit	r2, r3
 8004316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800431a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004328:	2202      	movs	r2, #2
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	fa93 f2a3 	rbit	r2, r3
 800433a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800433e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004348:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800434c:	2202      	movs	r2, #2
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004354:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	fa93 f2a3 	rbit	r2, r3
 800435e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004362:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004366:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	4b36      	ldr	r3, [pc, #216]	@ (8004444 <HAL_RCC_OscConfig+0x8f8>)
 800436a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800436c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004370:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004374:	2102      	movs	r1, #2
 8004376:	6019      	str	r1, [r3, #0]
 8004378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800437c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	fa93 f1a3 	rbit	r1, r3
 8004386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800438a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800438e:	6019      	str	r1, [r3, #0]
  return result;
 8004390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004394:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2101      	movs	r1, #1
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	4013      	ands	r3, r2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d197      	bne.n	80042e6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 81a5 	beq.w	8004716 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004444 <HAL_RCC_OscConfig+0x8f8>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <HAL_RCC_OscConfig+0x8f8>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4a18      	ldr	r2, [pc, #96]	@ (8004444 <HAL_RCC_OscConfig+0x8f8>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	61d3      	str	r3, [r2, #28]
 80043ea:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <HAL_RCC_OscConfig+0x8f8>)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80043f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004400:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004404:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <HAL_RCC_OscConfig+0x900>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d121      	bne.n	800445c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004418:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <HAL_RCC_OscConfig+0x900>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a0b      	ldr	r2, [pc, #44]	@ (800444c <HAL_RCC_OscConfig+0x900>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004422:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004424:	f7fe fab6 	bl	8002994 <HAL_GetTick>
 8004428:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442c:	e010      	b.n	8004450 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442e:	f7fe fab1 	bl	8002994 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	@ 0x64
 800443c:	d908      	bls.n	8004450 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e3d1      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
 8004448:	10908120 	.word	0x10908120
 800444c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004450:	4b8d      	ldr	r3, [pc, #564]	@ (8004688 <HAL_RCC_OscConfig+0xb3c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0e8      	beq.n	800442e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800445c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004460:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x92e>
 800446c:	4b87      	ldr	r3, [pc, #540]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	4a86      	ldr	r2, [pc, #536]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6213      	str	r3, [r2, #32]
 8004478:	e035      	b.n	80044e6 <HAL_RCC_OscConfig+0x99a>
 800447a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800447e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x958>
 800448a:	4b80      	ldr	r3, [pc, #512]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	4a7f      	ldr	r2, [pc, #508]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	6213      	str	r3, [r2, #32]
 8004496:	4b7d      	ldr	r3, [pc, #500]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a7c      	ldr	r2, [pc, #496]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 800449c:	f023 0304 	bic.w	r3, r3, #4
 80044a0:	6213      	str	r3, [r2, #32]
 80044a2:	e020      	b.n	80044e6 <HAL_RCC_OscConfig+0x99a>
 80044a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d10c      	bne.n	80044ce <HAL_RCC_OscConfig+0x982>
 80044b4:	4b75      	ldr	r3, [pc, #468]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4a74      	ldr	r2, [pc, #464]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	4b72      	ldr	r3, [pc, #456]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a71      	ldr	r2, [pc, #452]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	e00b      	b.n	80044e6 <HAL_RCC_OscConfig+0x99a>
 80044ce:	4b6f      	ldr	r3, [pc, #444]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a6e      	ldr	r2, [pc, #440]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	6213      	str	r3, [r2, #32]
 80044da:	4b6c      	ldr	r3, [pc, #432]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a6b      	ldr	r2, [pc, #428]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8081 	beq.w	80045fa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f8:	f7fe fa4c 	bl	8002994 <HAL_GetTick>
 80044fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004500:	e00b      	b.n	800451a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fe fa47 	bl	8002994 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e365      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
 800451a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800451e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004522:	2202      	movs	r2, #2
 8004524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800452a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	fa93 f2a3 	rbit	r2, r3
 8004534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004538:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004542:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004546:	2202      	movs	r2, #2
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800454e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	fa93 f2a3 	rbit	r2, r3
 8004558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800455c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004560:	601a      	str	r2, [r3, #0]
  return result;
 8004562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004566:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800456a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	b2db      	uxtb	r3, r3
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	b2db      	uxtb	r3, r3
 8004576:	f043 0302 	orr.w	r3, r3, #2
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d102      	bne.n	8004586 <HAL_RCC_OscConfig+0xa3a>
 8004580:	4b42      	ldr	r3, [pc, #264]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	e013      	b.n	80045ae <HAL_RCC_OscConfig+0xa62>
 8004586:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800458a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800458e:	2202      	movs	r2, #2
 8004590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004596:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	fa93 f2a3 	rbit	r2, r3
 80045a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045a4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	4b38      	ldr	r3, [pc, #224]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045b2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045b6:	2102      	movs	r1, #2
 80045b8:	6011      	str	r1, [r2, #0]
 80045ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045be:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	fa92 f1a2 	rbit	r1, r2
 80045c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045cc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80045d0:	6011      	str	r1, [r2, #0]
  return result;
 80045d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045d6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	fab2 f282 	clz	r2, r2
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	f002 021f 	and.w	r2, r2, #31
 80045ec:	2101      	movs	r1, #1
 80045ee:	fa01 f202 	lsl.w	r2, r1, r2
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d084      	beq.n	8004502 <HAL_RCC_OscConfig+0x9b6>
 80045f8:	e083      	b.n	8004702 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fa:	f7fe f9cb 	bl	8002994 <HAL_GetTick>
 80045fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004602:	e00b      	b.n	800461c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fe f9c6 	bl	8002994 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004614:	4293      	cmp	r3, r2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e2e4      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
 800461c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004620:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004624:	2202      	movs	r2, #2
 8004626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800462c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	fa93 f2a3 	rbit	r2, r3
 8004636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800463a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004644:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004648:	2202      	movs	r2, #2
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004650:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	fa93 f2a3 	rbit	r2, r3
 800465a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800465e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004662:	601a      	str	r2, [r3, #0]
  return result;
 8004664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004668:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800466c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466e:	fab3 f383 	clz	r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f043 0302 	orr.w	r3, r3, #2
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d106      	bne.n	8004690 <HAL_RCC_OscConfig+0xb44>
 8004682:	4b02      	ldr	r3, [pc, #8]	@ (800468c <HAL_RCC_OscConfig+0xb40>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	e017      	b.n	80046b8 <HAL_RCC_OscConfig+0xb6c>
 8004688:	40007000 	.word	0x40007000
 800468c:	40021000 	.word	0x40021000
 8004690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004694:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004698:	2202      	movs	r2, #2
 800469a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046a0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f2a3 	rbit	r2, r3
 80046aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046ae:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4bb3      	ldr	r3, [pc, #716]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046c0:	2102      	movs	r1, #2
 80046c2:	6011      	str	r1, [r2, #0]
 80046c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046c8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	fa92 f1a2 	rbit	r1, r2
 80046d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046d6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80046da:	6011      	str	r1, [r2, #0]
  return result;
 80046dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80046e0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	fab2 f282 	clz	r2, r2
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	f002 021f 	and.w	r2, r2, #31
 80046f6:	2101      	movs	r1, #1
 80046f8:	fa01 f202 	lsl.w	r2, r1, r2
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d180      	bne.n	8004604 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004702:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470a:	4b9e      	ldr	r3, [pc, #632]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	4a9d      	ldr	r2, [pc, #628]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004714:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800471a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 825e 	beq.w	8004be4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004728:	4b96      	ldr	r3, [pc, #600]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b08      	cmp	r3, #8
 8004732:	f000 821f 	beq.w	8004b74 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800473a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b02      	cmp	r3, #2
 8004744:	f040 8170 	bne.w	8004a28 <HAL_RCC_OscConfig+0xedc>
 8004748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800474c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004750:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800475a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	fa93 f2a3 	rbit	r2, r3
 8004764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004768:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800476c:	601a      	str	r2, [r3, #0]
  return result;
 800476e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004772:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004776:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	fab3 f383 	clz	r3, r3
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004782:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fe f901 	bl	8002994 <HAL_GetTick>
 8004792:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004796:	e009      	b.n	80047ac <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004798:	f7fe f8fc 	bl	8002994 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e21c      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
 80047ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047b0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047be:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	fa93 f2a3 	rbit	r2, r3
 80047c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047d0:	601a      	str	r2, [r3, #0]
  return result;
 80047d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80047da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d102      	bne.n	80047f6 <HAL_RCC_OscConfig+0xcaa>
 80047f0:	4b64      	ldr	r3, [pc, #400]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	e027      	b.n	8004846 <HAL_RCC_OscConfig+0xcfa>
 80047f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047fa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80047fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004808:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	fa93 f2a3 	rbit	r2, r3
 8004812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004816:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004820:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004824:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800482e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	fa93 f2a3 	rbit	r2, r3
 8004838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800483c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	4b50      	ldr	r3, [pc, #320]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800484a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800484e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004852:	6011      	str	r1, [r2, #0]
 8004854:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004858:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	fa92 f1a2 	rbit	r1, r2
 8004862:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004866:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800486a:	6011      	str	r1, [r2, #0]
  return result;
 800486c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004870:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	fab2 f282 	clz	r2, r2
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	f042 0220 	orr.w	r2, r2, #32
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	f002 021f 	and.w	r2, r2, #31
 8004886:	2101      	movs	r1, #1
 8004888:	fa01 f202 	lsl.w	r2, r1, r2
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d182      	bne.n	8004798 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004892:	4b3c      	ldr	r3, [pc, #240]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f023 020f 	bic.w	r2, r3, #15
 800489a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800489e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	4937      	ldr	r1, [pc, #220]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80048ac:	4b35      	ldr	r3, [pc, #212]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80048b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a19      	ldr	r1, [r3, #32]
 80048c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	492d      	ldr	r1, [pc, #180]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	604b      	str	r3, [r1, #4]
 80048d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048d8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80048e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048e6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f2a3 	rbit	r2, r3
 80048f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80048f8:	601a      	str	r2, [r3, #0]
  return result;
 80048fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048fe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004902:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004904:	fab3 f383 	clz	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800490e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	461a      	mov	r2, r3
 8004916:	2301      	movs	r3, #1
 8004918:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fe f83b 	bl	8002994 <HAL_GetTick>
 800491e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004922:	e009      	b.n	8004938 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004924:	f7fe f836 	bl	8002994 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e156      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
 8004938:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800493c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004940:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800494a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	fa93 f2a3 	rbit	r2, r3
 8004954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004958:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800495c:	601a      	str	r2, [r3, #0]
  return result;
 800495e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004962:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004966:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004968:	fab3 f383 	clz	r3, r3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <HAL_RCC_OscConfig+0xe3c>
 800497c:	4b01      	ldr	r3, [pc, #4]	@ (8004984 <HAL_RCC_OscConfig+0xe38>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	e02a      	b.n	80049d8 <HAL_RCC_OscConfig+0xe8c>
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
 8004988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800498c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004990:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800499a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	fa93 f2a3 	rbit	r2, r3
 80049a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80049b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049c0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	fa93 f2a3 	rbit	r2, r3
 80049ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049ce:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	4b86      	ldr	r3, [pc, #536]	@ (8004bf0 <HAL_RCC_OscConfig+0x10a4>)
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80049dc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80049e4:	6011      	str	r1, [r2, #0]
 80049e6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80049ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	fa92 f1a2 	rbit	r1, r2
 80049f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80049f8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80049fc:	6011      	str	r1, [r2, #0]
  return result;
 80049fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004a02:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	fab2 f282 	clz	r2, r2
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	f042 0220 	orr.w	r2, r2, #32
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	f002 021f 	and.w	r2, r2, #31
 8004a18:	2101      	movs	r1, #1
 8004a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f43f af7f 	beq.w	8004924 <HAL_RCC_OscConfig+0xdd8>
 8004a26:	e0dd      	b.n	8004be4 <HAL_RCC_OscConfig+0x1098>
 8004a28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a2c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a3a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	fa93 f2a3 	rbit	r2, r3
 8004a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a48:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a4c:	601a      	str	r2, [r3, #0]
  return result;
 8004a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004a56:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a58:	fab3 f383 	clz	r3, r3
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a62:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6e:	f7fd ff91 	bl	8002994 <HAL_GetTick>
 8004a72:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a76:	e009      	b.n	8004a8c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd ff8c 	bl	8002994 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e0ac      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
 8004a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a90:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004a94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004a9e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	fa93 f2a3 	rbit	r2, r3
 8004aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004aac:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004ab0:	601a      	str	r2, [r3, #0]
  return result;
 8004ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ab6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004aba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004abc:	fab3 f383 	clz	r3, r3
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d102      	bne.n	8004ad6 <HAL_RCC_OscConfig+0xf8a>
 8004ad0:	4b47      	ldr	r3, [pc, #284]	@ (8004bf0 <HAL_RCC_OscConfig+0x10a4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	e027      	b.n	8004b26 <HAL_RCC_OscConfig+0xfda>
 8004ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ada:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004ade:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ae8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	fa93 f2a3 	rbit	r2, r3
 8004af2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004af6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b00:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004b04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b0e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	fa93 f2a3 	rbit	r2, r3
 8004b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b1c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	4b33      	ldr	r3, [pc, #204]	@ (8004bf0 <HAL_RCC_OscConfig+0x10a4>)
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b2a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b2e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004b32:	6011      	str	r1, [r2, #0]
 8004b34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b38:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004b3c:	6812      	ldr	r2, [r2, #0]
 8004b3e:	fa92 f1a2 	rbit	r1, r2
 8004b42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b46:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004b4a:	6011      	str	r1, [r2, #0]
  return result;
 8004b4c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004b50:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	fab2 f282 	clz	r2, r2
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	f042 0220 	orr.w	r2, r2, #32
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	f002 021f 	and.w	r2, r2, #31
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d182      	bne.n	8004a78 <HAL_RCC_OscConfig+0xf2c>
 8004b72:	e037      	b.n	8004be4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e02e      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b88:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <HAL_RCC_OscConfig+0x10a4>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004b90:	4b17      	ldr	r3, [pc, #92]	@ (8004bf0 <HAL_RCC_OscConfig+0x10a4>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004b98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b9c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004ba0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ba4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d117      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004bb0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004bb4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b09e      	sub	sp, #120	@ 0x78
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e162      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b90      	ldr	r3, [pc, #576]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d910      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 0207 	bic.w	r2, r3, #7
 8004c22:	498b      	ldr	r1, [pc, #556]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c2a:	4b89      	ldr	r3, [pc, #548]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e14a      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4b82      	ldr	r3, [pc, #520]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	497f      	ldr	r1, [pc, #508]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80dc 	beq.w	8004e20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d13c      	bne.n	8004cea <HAL_RCC_ClockConfig+0xf6>
 8004c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c74:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c80:	fab3 f383 	clz	r3, r3
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d102      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xa6>
 8004c94:	4b6f      	ldr	r3, [pc, #444]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	e00f      	b.n	8004cba <HAL_RCC_ClockConfig+0xc6>
 8004c9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ca2:	fa93 f3a3 	rbit	r3, r3
 8004ca6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cb6:	4b67      	ldr	r3, [pc, #412]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004cc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cc2:	fa92 f2a2 	rbit	r2, r2
 8004cc6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004cc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0220 	orr.w	r2, r2, #32
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d17b      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0f3      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d13c      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x178>
 8004cf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cf6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d102      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x128>
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCC_ClockConfig+0x148>
 8004d1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d38:	4b46      	ldr	r3, [pc, #280]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d40:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004d42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d44:	fa92 f2a2 	rbit	r2, r2
 8004d48:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d4c:	fab2 f282 	clz	r2, r2
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	f042 0220 	orr.w	r2, r2, #32
 8004d56:	b2d2      	uxtb	r2, r2
 8004d58:	f002 021f 	and.w	r2, r2, #31
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d13a      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0b2      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x1a0>
 8004d8e:	4b31      	ldr	r3, [pc, #196]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	e00d      	b.n	8004db0 <HAL_RCC_ClockConfig+0x1bc>
 8004d94:	2302      	movs	r3, #2
 8004d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da0:	2302      	movs	r3, #2
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	4b29      	ldr	r3, [pc, #164]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	2202      	movs	r2, #2
 8004db2:	61ba      	str	r2, [r7, #24]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	fa92 f2a2 	rbit	r2, r2
 8004dba:	617a      	str	r2, [r7, #20]
  return result;
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	fab2 f282 	clz	r2, r2
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	f042 0220 	orr.w	r2, r2, #32
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	f002 021f 	and.w	r2, r2, #31
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e079      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b1d      	ldr	r3, [pc, #116]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	491a      	ldr	r1, [pc, #104]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fd fdd0 	bl	8002994 <HAL_GetTick>
 8004df4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fd fdcc 	bl	8002994 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e061      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <HAL_RCC_ClockConfig+0x260>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d214      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b08      	ldr	r3, [pc, #32]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 0207 	bic.w	r2, r3, #7
 8004e36:	4906      	ldr	r1, [pc, #24]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3e:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <HAL_RCC_ClockConfig+0x25c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d005      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e040      	b.n	8004ed2 <HAL_RCC_ClockConfig+0x2de>
 8004e50:	40022000 	.word	0x40022000
 8004e54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e64:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	491a      	ldr	r1, [pc, #104]	@ (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e82:	4b16      	ldr	r3, [pc, #88]	@ (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4912      	ldr	r1, [pc, #72]	@ (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004e96:	f000 f829 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8004e9a:	4601      	mov	r1, r0
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <HAL_RCC_ClockConfig+0x2e8>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea4:	22f0      	movs	r2, #240	@ 0xf0
 8004ea6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	fa92 f2a2 	rbit	r2, r2
 8004eae:	60fa      	str	r2, [r7, #12]
  return result;
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	fab2 f282 	clz	r2, r2
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	40d3      	lsrs	r3, r2
 8004eba:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <HAL_RCC_ClockConfig+0x2ec>)
 8004ebc:	5cd3      	ldrb	r3, [r2, r3]
 8004ebe:	fa21 f303 	lsr.w	r3, r1, r3
 8004ec2:	4a08      	ldr	r2, [pc, #32]	@ (8004ee4 <HAL_RCC_ClockConfig+0x2f0>)
 8004ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ec6:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <HAL_RCC_ClockConfig+0x2f4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fd fd1e 	bl	800290c <HAL_InitTick>
  
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3778      	adds	r7, #120	@ 0x78
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	08009b64 	.word	0x08009b64
 8004ee4:	20000000 	.word	0x20000000
 8004ee8:	20000004 	.word	0x20000004

08004eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f06:	4b1f      	ldr	r3, [pc, #124]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x30>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0x36>
 8004f1a:	e029      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f1e:	613b      	str	r3, [r7, #16]
      break;
 8004f20:	e029      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	0c9b      	lsrs	r3, r3, #18
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	4a18      	ldr	r2, [pc, #96]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f2c:	5cd3      	ldrb	r3, [r2, r3]
 8004f2e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004f30:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f48:	4a0f      	ldr	r2, [pc, #60]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	e007      	b.n	8004f6a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	613b      	str	r3, [r7, #16]
      break;
 8004f6e:	e002      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f72:	613b      	str	r3, [r7, #16]
      break;
 8004f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f76:	693b      	ldr	r3, [r7, #16]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40021000 	.word	0x40021000
 8004f88:	007a1200 	.word	0x007a1200
 8004f8c:	08009b7c 	.word	0x08009b7c
 8004f90:	08009b8c 	.word	0x08009b8c

08004f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f98:	4b03      	ldr	r3, [pc, #12]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000000 	.word	0x20000000

08004fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004fb2:	f7ff ffef 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004fc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	fa92 f2a2 	rbit	r2, r2
 8004fcc:	603a      	str	r2, [r7, #0]
  return result;
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	fab2 f282 	clz	r2, r2
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	40d3      	lsrs	r3, r2
 8004fd8:	4a04      	ldr	r2, [pc, #16]	@ (8004fec <HAL_RCC_GetPCLK1Freq+0x40>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	08009b74 	.word	0x08009b74

08004ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004ff6:	f7ff ffcd 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800502c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005004:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005008:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	fa92 f2a2 	rbit	r2, r2
 8005010:	603a      	str	r2, [r7, #0]
  return result;
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	fab2 f282 	clz	r2, r2
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	40d3      	lsrs	r3, r2
 800501c:	4a04      	ldr	r2, [pc, #16]	@ (8005030 <HAL_RCC_GetPCLK2Freq+0x40>)
 800501e:	5cd3      	ldrb	r3, [r2, r3]
 8005020:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40021000 	.word	0x40021000
 8005030:	08009b74 	.word	0x08009b74

08005034 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b092      	sub	sp, #72	@ 0x48
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005044:	2300      	movs	r3, #0
 8005046:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 80d4 	beq.w	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005058:	4b4e      	ldr	r3, [pc, #312]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10e      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005064:	4b4b      	ldr	r3, [pc, #300]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	4a4a      	ldr	r2, [pc, #296]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800506e:	61d3      	str	r3, [r2, #28]
 8005070:	4b48      	ldr	r3, [pc, #288]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507c:	2301      	movs	r3, #1
 800507e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b45      	ldr	r3, [pc, #276]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d118      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508e:	4b42      	ldr	r3, [pc, #264]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a41      	ldr	r2, [pc, #260]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005098:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509a:	f7fd fc7b 	bl	8002994 <HAL_GetTick>
 800509e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	e008      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a2:	f7fd fc77 	bl	8002994 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b64      	cmp	r3, #100	@ 0x64
 80050ae:	d901      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e1d6      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b4:	4b38      	ldr	r3, [pc, #224]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c0:	4b34      	ldr	r3, [pc, #208]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 8084 	beq.w	80051da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050dc:	429a      	cmp	r2, r3
 80050de:	d07c      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e0:	4b2c      	ldr	r3, [pc, #176]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80050ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050fa:	fab3 f383 	clz	r3, r3
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	4b26      	ldr	r3, [pc, #152]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	461a      	mov	r2, r3
 800510a:	2301      	movs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800511c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	461a      	mov	r2, r3
 800512e:	2300      	movs	r3, #0
 8005130:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005132:	4a18      	ldr	r2, [pc, #96]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005136:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04b      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005142:	f7fd fc27 	bl	8002994 <HAL_GetTick>
 8005146:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fd fc23 	bl	8002994 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e180      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005160:	2302      	movs	r3, #2
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
 800516c:	2302      	movs	r3, #2
 800516e:	623b      	str	r3, [r7, #32]
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	fa93 f3a3 	rbit	r3, r3
 8005176:	61fb      	str	r3, [r7, #28]
  return result;
 8005178:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d108      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800518e:	4b01      	ldr	r3, [pc, #4]	@ (8005194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	e00d      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005194:	40021000 	.word	0x40021000
 8005198:	40007000 	.word	0x40007000
 800519c:	10908100 	.word	0x10908100
 80051a0:	2302      	movs	r3, #2
 80051a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	4b9a      	ldr	r3, [pc, #616]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	2202      	movs	r2, #2
 80051b2:	613a      	str	r2, [r7, #16]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	fa92 f2a2 	rbit	r2, r2
 80051ba:	60fa      	str	r2, [r7, #12]
  return result;
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	fab2 f282 	clz	r2, r2
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	f002 021f 	and.w	r2, r2, #31
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f202 	lsl.w	r2, r1, r2
 80051d4:	4013      	ands	r3, r2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0b7      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80051da:	4b8f      	ldr	r3, [pc, #572]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	498c      	ldr	r1, [pc, #560]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f4:	4b88      	ldr	r3, [pc, #544]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4a87      	ldr	r2, [pc, #540]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80051fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800520c:	4b82      	ldr	r3, [pc, #520]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005210:	f023 0203 	bic.w	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	497f      	ldr	r1, [pc, #508]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800521a:	4313      	orrs	r3, r2
 800521c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d008      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800522a:	4b7b      	ldr	r3, [pc, #492]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	4978      	ldr	r1, [pc, #480]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005238:	4313      	orrs	r3, r2
 800523a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005248:	4b73      	ldr	r3, [pc, #460]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4970      	ldr	r1, [pc, #448]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005266:	4b6c      	ldr	r3, [pc, #432]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	f023 0210 	bic.w	r2, r3, #16
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4969      	ldr	r1, [pc, #420]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005274:	4313      	orrs	r3, r2
 8005276:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005284:	4b64      	ldr	r3, [pc, #400]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005290:	4961      	ldr	r1, [pc, #388]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005292:	4313      	orrs	r3, r2
 8005294:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	f023 0220 	bic.w	r2, r3, #32
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	495a      	ldr	r1, [pc, #360]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052c0:	4b55      	ldr	r3, [pc, #340]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	4952      	ldr	r1, [pc, #328]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052de:	4b4e      	ldr	r3, [pc, #312]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	494b      	ldr	r1, [pc, #300]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052fc:	4b46      	ldr	r3, [pc, #280]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	4943      	ldr	r1, [pc, #268]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800530a:	4313      	orrs	r3, r2
 800530c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800531a:	4b3f      	ldr	r3, [pc, #252]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	493c      	ldr	r1, [pc, #240]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005338:	4b37      	ldr	r3, [pc, #220]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	4934      	ldr	r1, [pc, #208]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005356:	4b30      	ldr	r3, [pc, #192]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	492d      	ldr	r1, [pc, #180]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005364:	4313      	orrs	r3, r2
 8005366:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005374:	4b28      	ldr	r3, [pc, #160]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005378:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005380:	4925      	ldr	r1, [pc, #148]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005392:	4b21      	ldr	r3, [pc, #132]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005396:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	491e      	ldr	r1, [pc, #120]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d008      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80053b0:	4b19      	ldr	r3, [pc, #100]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053bc:	4916      	ldr	r1, [pc, #88]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80053ce:	4b12      	ldr	r3, [pc, #72]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053da:	490f      	ldr	r1, [pc, #60]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d008      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80053ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	4907      	ldr	r1, [pc, #28]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800540a:	4b03      	ldr	r3, [pc, #12]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	e002      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541e:	4913      	ldr	r1, [pc, #76]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005420:	4313      	orrs	r3, r2
 8005422:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005430:	4b0e      	ldr	r3, [pc, #56]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005434:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543c:	490b      	ldr	r1, [pc, #44]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800543e:	4313      	orrs	r3, r2
 8005440:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005452:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545a:	4904      	ldr	r1, [pc, #16]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800545c:	4313      	orrs	r3, r2
 800545e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3748      	adds	r7, #72	@ 0x48
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000

08005470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e040      	b.n	8005504 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fd f9b8 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2224      	movs	r2, #36	@ 0x24
 800549c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa86 	bl	80059c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f8af 	bl	8005620 <UART_SetConfig>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e01b      	b.n	8005504 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fb05 	bl	8005b0c <UART_CheckIdleState>
 8005502:	4603      	mov	r3, r0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	@ 0x28
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005520:	2b20      	cmp	r3, #32
 8005522:	d177      	bne.n	8005614 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_UART_Transmit+0x24>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e070      	b.n	8005616 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2221      	movs	r2, #33	@ 0x21
 8005540:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005542:	f7fd fa27 	bl	8002994 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005560:	d108      	bne.n	8005574 <HAL_UART_Transmit+0x68>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d104      	bne.n	8005574 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e003      	b.n	800557c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005578:	2300      	movs	r3, #0
 800557a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800557c:	e02f      	b.n	80055de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	2180      	movs	r1, #128	@ 0x80
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fb67 	bl	8005c5c <UART_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e03b      	b.n	8005616 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b0:	b292      	uxth	r2, r2
 80055b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3302      	adds	r3, #2
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	e007      	b.n	80055cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	3301      	adds	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1c9      	bne.n	800557e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2140      	movs	r1, #64	@ 0x40
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fb31 	bl	8005c5c <UART_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e005      	b.n	8005616 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b92      	ldr	r3, [pc, #584]	@ (8005894 <UART_SetConfig+0x274>)
 800564c:	4013      	ands	r3, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	430b      	orrs	r3, r1
 8005656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	430a      	orrs	r2, r1
 8005690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a80      	ldr	r2, [pc, #512]	@ (8005898 <UART_SetConfig+0x278>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d120      	bne.n	80056de <UART_SetConfig+0xbe>
 800569c:	4b7f      	ldr	r3, [pc, #508]	@ (800589c <UART_SetConfig+0x27c>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	f003 0303 	and.w	r3, r3, #3
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d817      	bhi.n	80056d8 <UART_SetConfig+0xb8>
 80056a8:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <UART_SetConfig+0x90>)
 80056aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ae:	bf00      	nop
 80056b0:	080056c1 	.word	0x080056c1
 80056b4:	080056cd 	.word	0x080056cd
 80056b8:	080056d3 	.word	0x080056d3
 80056bc:	080056c7 	.word	0x080056c7
 80056c0:	2301      	movs	r3, #1
 80056c2:	77fb      	strb	r3, [r7, #31]
 80056c4:	e0b5      	b.n	8005832 <UART_SetConfig+0x212>
 80056c6:	2302      	movs	r3, #2
 80056c8:	77fb      	strb	r3, [r7, #31]
 80056ca:	e0b2      	b.n	8005832 <UART_SetConfig+0x212>
 80056cc:	2304      	movs	r3, #4
 80056ce:	77fb      	strb	r3, [r7, #31]
 80056d0:	e0af      	b.n	8005832 <UART_SetConfig+0x212>
 80056d2:	2308      	movs	r3, #8
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e0ac      	b.n	8005832 <UART_SetConfig+0x212>
 80056d8:	2310      	movs	r3, #16
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e0a9      	b.n	8005832 <UART_SetConfig+0x212>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6f      	ldr	r2, [pc, #444]	@ (80058a0 <UART_SetConfig+0x280>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d124      	bne.n	8005732 <UART_SetConfig+0x112>
 80056e8:	4b6c      	ldr	r3, [pc, #432]	@ (800589c <UART_SetConfig+0x27c>)
 80056ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056f4:	d011      	beq.n	800571a <UART_SetConfig+0xfa>
 80056f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80056fa:	d817      	bhi.n	800572c <UART_SetConfig+0x10c>
 80056fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005700:	d011      	beq.n	8005726 <UART_SetConfig+0x106>
 8005702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005706:	d811      	bhi.n	800572c <UART_SetConfig+0x10c>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <UART_SetConfig+0xf4>
 800570c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005710:	d006      	beq.n	8005720 <UART_SetConfig+0x100>
 8005712:	e00b      	b.n	800572c <UART_SetConfig+0x10c>
 8005714:	2300      	movs	r3, #0
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e08b      	b.n	8005832 <UART_SetConfig+0x212>
 800571a:	2302      	movs	r3, #2
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e088      	b.n	8005832 <UART_SetConfig+0x212>
 8005720:	2304      	movs	r3, #4
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e085      	b.n	8005832 <UART_SetConfig+0x212>
 8005726:	2308      	movs	r3, #8
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e082      	b.n	8005832 <UART_SetConfig+0x212>
 800572c:	2310      	movs	r3, #16
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e07f      	b.n	8005832 <UART_SetConfig+0x212>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a5b      	ldr	r2, [pc, #364]	@ (80058a4 <UART_SetConfig+0x284>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d124      	bne.n	8005786 <UART_SetConfig+0x166>
 800573c:	4b57      	ldr	r3, [pc, #348]	@ (800589c <UART_SetConfig+0x27c>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005744:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005748:	d011      	beq.n	800576e <UART_SetConfig+0x14e>
 800574a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800574e:	d817      	bhi.n	8005780 <UART_SetConfig+0x160>
 8005750:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005754:	d011      	beq.n	800577a <UART_SetConfig+0x15a>
 8005756:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800575a:	d811      	bhi.n	8005780 <UART_SetConfig+0x160>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <UART_SetConfig+0x148>
 8005760:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005764:	d006      	beq.n	8005774 <UART_SetConfig+0x154>
 8005766:	e00b      	b.n	8005780 <UART_SetConfig+0x160>
 8005768:	2300      	movs	r3, #0
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e061      	b.n	8005832 <UART_SetConfig+0x212>
 800576e:	2302      	movs	r3, #2
 8005770:	77fb      	strb	r3, [r7, #31]
 8005772:	e05e      	b.n	8005832 <UART_SetConfig+0x212>
 8005774:	2304      	movs	r3, #4
 8005776:	77fb      	strb	r3, [r7, #31]
 8005778:	e05b      	b.n	8005832 <UART_SetConfig+0x212>
 800577a:	2308      	movs	r3, #8
 800577c:	77fb      	strb	r3, [r7, #31]
 800577e:	e058      	b.n	8005832 <UART_SetConfig+0x212>
 8005780:	2310      	movs	r3, #16
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e055      	b.n	8005832 <UART_SetConfig+0x212>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a47      	ldr	r2, [pc, #284]	@ (80058a8 <UART_SetConfig+0x288>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d124      	bne.n	80057da <UART_SetConfig+0x1ba>
 8005790:	4b42      	ldr	r3, [pc, #264]	@ (800589c <UART_SetConfig+0x27c>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005798:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800579c:	d011      	beq.n	80057c2 <UART_SetConfig+0x1a2>
 800579e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057a2:	d817      	bhi.n	80057d4 <UART_SetConfig+0x1b4>
 80057a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057a8:	d011      	beq.n	80057ce <UART_SetConfig+0x1ae>
 80057aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ae:	d811      	bhi.n	80057d4 <UART_SetConfig+0x1b4>
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <UART_SetConfig+0x19c>
 80057b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057b8:	d006      	beq.n	80057c8 <UART_SetConfig+0x1a8>
 80057ba:	e00b      	b.n	80057d4 <UART_SetConfig+0x1b4>
 80057bc:	2300      	movs	r3, #0
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e037      	b.n	8005832 <UART_SetConfig+0x212>
 80057c2:	2302      	movs	r3, #2
 80057c4:	77fb      	strb	r3, [r7, #31]
 80057c6:	e034      	b.n	8005832 <UART_SetConfig+0x212>
 80057c8:	2304      	movs	r3, #4
 80057ca:	77fb      	strb	r3, [r7, #31]
 80057cc:	e031      	b.n	8005832 <UART_SetConfig+0x212>
 80057ce:	2308      	movs	r3, #8
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e02e      	b.n	8005832 <UART_SetConfig+0x212>
 80057d4:	2310      	movs	r3, #16
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e02b      	b.n	8005832 <UART_SetConfig+0x212>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a33      	ldr	r2, [pc, #204]	@ (80058ac <UART_SetConfig+0x28c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d124      	bne.n	800582e <UART_SetConfig+0x20e>
 80057e4:	4b2d      	ldr	r3, [pc, #180]	@ (800589c <UART_SetConfig+0x27c>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80057ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057f0:	d011      	beq.n	8005816 <UART_SetConfig+0x1f6>
 80057f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80057f6:	d817      	bhi.n	8005828 <UART_SetConfig+0x208>
 80057f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057fc:	d011      	beq.n	8005822 <UART_SetConfig+0x202>
 80057fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005802:	d811      	bhi.n	8005828 <UART_SetConfig+0x208>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <UART_SetConfig+0x1f0>
 8005808:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580c:	d006      	beq.n	800581c <UART_SetConfig+0x1fc>
 800580e:	e00b      	b.n	8005828 <UART_SetConfig+0x208>
 8005810:	2300      	movs	r3, #0
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e00d      	b.n	8005832 <UART_SetConfig+0x212>
 8005816:	2302      	movs	r3, #2
 8005818:	77fb      	strb	r3, [r7, #31]
 800581a:	e00a      	b.n	8005832 <UART_SetConfig+0x212>
 800581c:	2304      	movs	r3, #4
 800581e:	77fb      	strb	r3, [r7, #31]
 8005820:	e007      	b.n	8005832 <UART_SetConfig+0x212>
 8005822:	2308      	movs	r3, #8
 8005824:	77fb      	strb	r3, [r7, #31]
 8005826:	e004      	b.n	8005832 <UART_SetConfig+0x212>
 8005828:	2310      	movs	r3, #16
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e001      	b.n	8005832 <UART_SetConfig+0x212>
 800582e:	2310      	movs	r3, #16
 8005830:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800583a:	d16b      	bne.n	8005914 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800583c:	7ffb      	ldrb	r3, [r7, #31]
 800583e:	2b08      	cmp	r3, #8
 8005840:	d838      	bhi.n	80058b4 <UART_SetConfig+0x294>
 8005842:	a201      	add	r2, pc, #4	@ (adr r2, 8005848 <UART_SetConfig+0x228>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	0800586d 	.word	0x0800586d
 800584c:	08005875 	.word	0x08005875
 8005850:	0800587d 	.word	0x0800587d
 8005854:	080058b5 	.word	0x080058b5
 8005858:	08005883 	.word	0x08005883
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058b5 	.word	0x080058b5
 8005864:	080058b5 	.word	0x080058b5
 8005868:	0800588b 	.word	0x0800588b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800586c:	f7ff fb9e 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8005870:	61b8      	str	r0, [r7, #24]
        break;
 8005872:	e024      	b.n	80058be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005874:	f7ff fbbc 	bl	8004ff0 <HAL_RCC_GetPCLK2Freq>
 8005878:	61b8      	str	r0, [r7, #24]
        break;
 800587a:	e020      	b.n	80058be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800587c:	4b0c      	ldr	r3, [pc, #48]	@ (80058b0 <UART_SetConfig+0x290>)
 800587e:	61bb      	str	r3, [r7, #24]
        break;
 8005880:	e01d      	b.n	80058be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005882:	f7ff fb33 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 8005886:	61b8      	str	r0, [r7, #24]
        break;
 8005888:	e019      	b.n	80058be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800588a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800588e:	61bb      	str	r3, [r7, #24]
        break;
 8005890:	e015      	b.n	80058be <UART_SetConfig+0x29e>
 8005892:	bf00      	nop
 8005894:	efff69f3 	.word	0xefff69f3
 8005898:	40013800 	.word	0x40013800
 800589c:	40021000 	.word	0x40021000
 80058a0:	40004400 	.word	0x40004400
 80058a4:	40004800 	.word	0x40004800
 80058a8:	40004c00 	.word	0x40004c00
 80058ac:	40005000 	.word	0x40005000
 80058b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	77bb      	strb	r3, [r7, #30]
        break;
 80058bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d073      	beq.n	80059ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	005a      	lsls	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	441a      	add	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b0f      	cmp	r3, #15
 80058de:	d916      	bls.n	800590e <UART_SetConfig+0x2ee>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e6:	d212      	bcs.n	800590e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f023 030f 	bic.w	r3, r3, #15
 80058f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	4313      	orrs	r3, r2
 8005902:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	89fa      	ldrh	r2, [r7, #14]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	e04e      	b.n	80059ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	77bb      	strb	r3, [r7, #30]
 8005912:	e04b      	b.n	80059ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005914:	7ffb      	ldrb	r3, [r7, #31]
 8005916:	2b08      	cmp	r3, #8
 8005918:	d827      	bhi.n	800596a <UART_SetConfig+0x34a>
 800591a:	a201      	add	r2, pc, #4	@ (adr r2, 8005920 <UART_SetConfig+0x300>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	0800596b 	.word	0x0800596b
 8005930:	0800595b 	.word	0x0800595b
 8005934:	0800596b 	.word	0x0800596b
 8005938:	0800596b 	.word	0x0800596b
 800593c:	0800596b 	.word	0x0800596b
 8005940:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005944:	f7ff fb32 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8005948:	61b8      	str	r0, [r7, #24]
        break;
 800594a:	e013      	b.n	8005974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800594c:	f7ff fb50 	bl	8004ff0 <HAL_RCC_GetPCLK2Freq>
 8005950:	61b8      	str	r0, [r7, #24]
        break;
 8005952:	e00f      	b.n	8005974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b1b      	ldr	r3, [pc, #108]	@ (80059c4 <UART_SetConfig+0x3a4>)
 8005956:	61bb      	str	r3, [r7, #24]
        break;
 8005958:	e00c      	b.n	8005974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7ff fac7 	bl	8004eec <HAL_RCC_GetSysClockFreq>
 800595e:	61b8      	str	r0, [r7, #24]
        break;
 8005960:	e008      	b.n	8005974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	61bb      	str	r3, [r7, #24]
        break;
 8005968:	e004      	b.n	8005974 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	77bb      	strb	r3, [r7, #30]
        break;
 8005972:	bf00      	nop
    }

    if (pclk != 0U)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	085a      	lsrs	r2, r3, #1
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	441a      	add	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b0f      	cmp	r3, #15
 8005992:	d909      	bls.n	80059a8 <UART_SetConfig+0x388>
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800599a:	d205      	bcs.n	80059a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	e001      	b.n	80059ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	007a1200 	.word	0x007a1200

080059c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01a      	beq.n	8005ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ac6:	d10a      	bne.n	8005ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]
  }
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b098      	sub	sp, #96	@ 0x60
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b1c:	f7fc ff3a 	bl	8002994 <HAL_GetTick>
 8005b20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d12e      	bne.n	8005b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f88c 	bl	8005c5c <UART_WaitOnFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d021      	beq.n	8005b8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b70:	e841 2300 	strex	r3, r2, [r1]
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1e6      	bne.n	8005b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e062      	b.n	8005c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d149      	bne.n	8005c30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f856 	bl	8005c5c <UART_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d03c      	beq.n	8005c30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e6      	bne.n	8005bb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3308      	adds	r3, #8
 8005bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c08:	61fa      	str	r2, [r7, #28]
 8005c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	617b      	str	r3, [r7, #20]
   return(result);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e011      	b.n	8005c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3758      	adds	r7, #88	@ 0x58
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6c:	e04f      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c74:	d04b      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c76:	f7fc fe8d 	bl	8002994 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e04e      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d037      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b80      	cmp	r3, #128	@ 0x80
 8005ca2:	d034      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2b40      	cmp	r3, #64	@ 0x40
 8005ca8:	d031      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d110      	bne.n	8005cda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f838 	bl	8005d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e029      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ce8:	d111      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f81e 	bl	8005d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e00f      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4013      	ands	r3, r2
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2301      	moveq	r3, #1
 8005d20:	2300      	movne	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d0a0      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b095      	sub	sp, #84	@ 0x54
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e5      	bne.n	8005d70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d118      	bne.n	8005dde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6979      	ldr	r1, [r7, #20]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e6      	bne.n	8005dac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005df2:	bf00      	nop
 8005df4:	3754      	adds	r7, #84	@ 0x54
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <__cvt>:
 8005dfe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e02:	ec57 6b10 	vmov	r6, r7, d0
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	bfbb      	ittet	lt
 8005e10:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e14:	461f      	movlt	r7, r3
 8005e16:	2300      	movge	r3, #0
 8005e18:	232d      	movlt	r3, #45	@ 0x2d
 8005e1a:	700b      	strb	r3, [r1, #0]
 8005e1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e1e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e22:	4691      	mov	r9, r2
 8005e24:	f023 0820 	bic.w	r8, r3, #32
 8005e28:	bfbc      	itt	lt
 8005e2a:	4632      	movlt	r2, r6
 8005e2c:	4616      	movlt	r6, r2
 8005e2e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e32:	d005      	beq.n	8005e40 <__cvt+0x42>
 8005e34:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e38:	d100      	bne.n	8005e3c <__cvt+0x3e>
 8005e3a:	3401      	adds	r4, #1
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	e000      	b.n	8005e42 <__cvt+0x44>
 8005e40:	2103      	movs	r1, #3
 8005e42:	ab03      	add	r3, sp, #12
 8005e44:	9301      	str	r3, [sp, #4]
 8005e46:	ab02      	add	r3, sp, #8
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	ec47 6b10 	vmov	d0, r6, r7
 8005e4e:	4653      	mov	r3, sl
 8005e50:	4622      	mov	r2, r4
 8005e52:	f000 fe59 	bl	8006b08 <_dtoa_r>
 8005e56:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	d119      	bne.n	8005e92 <__cvt+0x94>
 8005e5e:	f019 0f01 	tst.w	r9, #1
 8005e62:	d00e      	beq.n	8005e82 <__cvt+0x84>
 8005e64:	eb00 0904 	add.w	r9, r0, r4
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	4639      	mov	r1, r7
 8005e70:	f7fa fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e74:	b108      	cbz	r0, 8005e7a <__cvt+0x7c>
 8005e76:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e7a:	2230      	movs	r2, #48	@ 0x30
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	454b      	cmp	r3, r9
 8005e80:	d31e      	bcc.n	8005ec0 <__cvt+0xc2>
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e86:	1b5b      	subs	r3, r3, r5
 8005e88:	4628      	mov	r0, r5
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	b004      	add	sp, #16
 8005e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e92:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e96:	eb00 0904 	add.w	r9, r0, r4
 8005e9a:	d1e5      	bne.n	8005e68 <__cvt+0x6a>
 8005e9c:	7803      	ldrb	r3, [r0, #0]
 8005e9e:	2b30      	cmp	r3, #48	@ 0x30
 8005ea0:	d10a      	bne.n	8005eb8 <__cvt+0xba>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	f7fa fe15 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eae:	b918      	cbnz	r0, 8005eb8 <__cvt+0xba>
 8005eb0:	f1c4 0401 	rsb	r4, r4, #1
 8005eb4:	f8ca 4000 	str.w	r4, [sl]
 8005eb8:	f8da 3000 	ldr.w	r3, [sl]
 8005ebc:	4499      	add	r9, r3
 8005ebe:	e7d3      	b.n	8005e68 <__cvt+0x6a>
 8005ec0:	1c59      	adds	r1, r3, #1
 8005ec2:	9103      	str	r1, [sp, #12]
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e7d9      	b.n	8005e7c <__cvt+0x7e>

08005ec8 <__exponent>:
 8005ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eca:	2900      	cmp	r1, #0
 8005ecc:	bfba      	itte	lt
 8005ece:	4249      	neglt	r1, r1
 8005ed0:	232d      	movlt	r3, #45	@ 0x2d
 8005ed2:	232b      	movge	r3, #43	@ 0x2b
 8005ed4:	2909      	cmp	r1, #9
 8005ed6:	7002      	strb	r2, [r0, #0]
 8005ed8:	7043      	strb	r3, [r0, #1]
 8005eda:	dd29      	ble.n	8005f30 <__exponent+0x68>
 8005edc:	f10d 0307 	add.w	r3, sp, #7
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	270a      	movs	r7, #10
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	fbb1 f6f7 	udiv	r6, r1, r7
 8005eea:	fb07 1416 	mls	r4, r7, r6, r1
 8005eee:	3430      	adds	r4, #48	@ 0x30
 8005ef0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	2c63      	cmp	r4, #99	@ 0x63
 8005ef8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005efc:	4631      	mov	r1, r6
 8005efe:	dcf1      	bgt.n	8005ee4 <__exponent+0x1c>
 8005f00:	3130      	adds	r1, #48	@ 0x30
 8005f02:	1e94      	subs	r4, r2, #2
 8005f04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f08:	1c41      	adds	r1, r0, #1
 8005f0a:	4623      	mov	r3, r4
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	d30a      	bcc.n	8005f26 <__exponent+0x5e>
 8005f10:	f10d 0309 	add.w	r3, sp, #9
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	42ac      	cmp	r4, r5
 8005f18:	bf88      	it	hi
 8005f1a:	2300      	movhi	r3, #0
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	4403      	add	r3, r0
 8005f20:	1a18      	subs	r0, r3, r0
 8005f22:	b003      	add	sp, #12
 8005f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f26:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f2e:	e7ed      	b.n	8005f0c <__exponent+0x44>
 8005f30:	2330      	movs	r3, #48	@ 0x30
 8005f32:	3130      	adds	r1, #48	@ 0x30
 8005f34:	7083      	strb	r3, [r0, #2]
 8005f36:	70c1      	strb	r1, [r0, #3]
 8005f38:	1d03      	adds	r3, r0, #4
 8005f3a:	e7f1      	b.n	8005f20 <__exponent+0x58>

08005f3c <_printf_float>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	b08d      	sub	sp, #52	@ 0x34
 8005f42:	460c      	mov	r4, r1
 8005f44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f48:	4616      	mov	r6, r2
 8005f4a:	461f      	mov	r7, r3
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	f000 fcdb 	bl	8006908 <_localeconv_r>
 8005f52:	6803      	ldr	r3, [r0, #0]
 8005f54:	9304      	str	r3, [sp, #16]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fa f992 	bl	8000280 <strlen>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f60:	f8d8 3000 	ldr.w	r3, [r8]
 8005f64:	9005      	str	r0, [sp, #20]
 8005f66:	3307      	adds	r3, #7
 8005f68:	f023 0307 	bic.w	r3, r3, #7
 8005f6c:	f103 0208 	add.w	r2, r3, #8
 8005f70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f74:	f8d4 b000 	ldr.w	fp, [r4]
 8005f78:	f8c8 2000 	str.w	r2, [r8]
 8005f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f84:	9307      	str	r3, [sp, #28]
 8005f86:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f92:	4b9c      	ldr	r3, [pc, #624]	@ (8006204 <_printf_float+0x2c8>)
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f98:	f7fa fdd0 	bl	8000b3c <__aeabi_dcmpun>
 8005f9c:	bb70      	cbnz	r0, 8005ffc <_printf_float+0xc0>
 8005f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa2:	4b98      	ldr	r3, [pc, #608]	@ (8006204 <_printf_float+0x2c8>)
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fa8:	f7fa fdaa 	bl	8000b00 <__aeabi_dcmple>
 8005fac:	bb30      	cbnz	r0, 8005ffc <_printf_float+0xc0>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	f7fa fd99 	bl	8000aec <__aeabi_dcmplt>
 8005fba:	b110      	cbz	r0, 8005fc2 <_printf_float+0x86>
 8005fbc:	232d      	movs	r3, #45	@ 0x2d
 8005fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fc2:	4a91      	ldr	r2, [pc, #580]	@ (8006208 <_printf_float+0x2cc>)
 8005fc4:	4b91      	ldr	r3, [pc, #580]	@ (800620c <_printf_float+0x2d0>)
 8005fc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fca:	bf94      	ite	ls
 8005fcc:	4690      	movls	r8, r2
 8005fce:	4698      	movhi	r8, r3
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	f02b 0304 	bic.w	r3, fp, #4
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	f04f 0900 	mov.w	r9, #0
 8005fde:	9700      	str	r7, [sp, #0]
 8005fe0:	4633      	mov	r3, r6
 8005fe2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f000 f9d2 	bl	8006390 <_printf_common>
 8005fec:	3001      	adds	r0, #1
 8005fee:	f040 808d 	bne.w	800610c <_printf_float+0x1d0>
 8005ff2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ff6:	b00d      	add	sp, #52	@ 0x34
 8005ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa fd9a 	bl	8000b3c <__aeabi_dcmpun>
 8006008:	b140      	cbz	r0, 800601c <_printf_float+0xe0>
 800600a:	464b      	mov	r3, r9
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfbc      	itt	lt
 8006010:	232d      	movlt	r3, #45	@ 0x2d
 8006012:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006016:	4a7e      	ldr	r2, [pc, #504]	@ (8006210 <_printf_float+0x2d4>)
 8006018:	4b7e      	ldr	r3, [pc, #504]	@ (8006214 <_printf_float+0x2d8>)
 800601a:	e7d4      	b.n	8005fc6 <_printf_float+0x8a>
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006022:	9206      	str	r2, [sp, #24]
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	d13b      	bne.n	80060a0 <_printf_float+0x164>
 8006028:	2306      	movs	r3, #6
 800602a:	6063      	str	r3, [r4, #4]
 800602c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006030:	2300      	movs	r3, #0
 8006032:	6022      	str	r2, [r4, #0]
 8006034:	9303      	str	r3, [sp, #12]
 8006036:	ab0a      	add	r3, sp, #40	@ 0x28
 8006038:	e9cd a301 	strd	sl, r3, [sp, #4]
 800603c:	ab09      	add	r3, sp, #36	@ 0x24
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	6861      	ldr	r1, [r4, #4]
 8006042:	ec49 8b10 	vmov	d0, r8, r9
 8006046:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800604a:	4628      	mov	r0, r5
 800604c:	f7ff fed7 	bl	8005dfe <__cvt>
 8006050:	9b06      	ldr	r3, [sp, #24]
 8006052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006054:	2b47      	cmp	r3, #71	@ 0x47
 8006056:	4680      	mov	r8, r0
 8006058:	d129      	bne.n	80060ae <_printf_float+0x172>
 800605a:	1cc8      	adds	r0, r1, #3
 800605c:	db02      	blt.n	8006064 <_printf_float+0x128>
 800605e:	6863      	ldr	r3, [r4, #4]
 8006060:	4299      	cmp	r1, r3
 8006062:	dd41      	ble.n	80060e8 <_printf_float+0x1ac>
 8006064:	f1aa 0a02 	sub.w	sl, sl, #2
 8006068:	fa5f fa8a 	uxtb.w	sl, sl
 800606c:	3901      	subs	r1, #1
 800606e:	4652      	mov	r2, sl
 8006070:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006074:	9109      	str	r1, [sp, #36]	@ 0x24
 8006076:	f7ff ff27 	bl	8005ec8 <__exponent>
 800607a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800607c:	1813      	adds	r3, r2, r0
 800607e:	2a01      	cmp	r2, #1
 8006080:	4681      	mov	r9, r0
 8006082:	6123      	str	r3, [r4, #16]
 8006084:	dc02      	bgt.n	800608c <_printf_float+0x150>
 8006086:	6822      	ldr	r2, [r4, #0]
 8006088:	07d2      	lsls	r2, r2, #31
 800608a:	d501      	bpl.n	8006090 <_printf_float+0x154>
 800608c:	3301      	adds	r3, #1
 800608e:	6123      	str	r3, [r4, #16]
 8006090:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0a2      	beq.n	8005fde <_printf_float+0xa2>
 8006098:	232d      	movs	r3, #45	@ 0x2d
 800609a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609e:	e79e      	b.n	8005fde <_printf_float+0xa2>
 80060a0:	9a06      	ldr	r2, [sp, #24]
 80060a2:	2a47      	cmp	r2, #71	@ 0x47
 80060a4:	d1c2      	bne.n	800602c <_printf_float+0xf0>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1c0      	bne.n	800602c <_printf_float+0xf0>
 80060aa:	2301      	movs	r3, #1
 80060ac:	e7bd      	b.n	800602a <_printf_float+0xee>
 80060ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060b2:	d9db      	bls.n	800606c <_printf_float+0x130>
 80060b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060b8:	d118      	bne.n	80060ec <_printf_float+0x1b0>
 80060ba:	2900      	cmp	r1, #0
 80060bc:	6863      	ldr	r3, [r4, #4]
 80060be:	dd0b      	ble.n	80060d8 <_printf_float+0x19c>
 80060c0:	6121      	str	r1, [r4, #16]
 80060c2:	b913      	cbnz	r3, 80060ca <_printf_float+0x18e>
 80060c4:	6822      	ldr	r2, [r4, #0]
 80060c6:	07d0      	lsls	r0, r2, #31
 80060c8:	d502      	bpl.n	80060d0 <_printf_float+0x194>
 80060ca:	3301      	adds	r3, #1
 80060cc:	440b      	add	r3, r1
 80060ce:	6123      	str	r3, [r4, #16]
 80060d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	e7db      	b.n	8006090 <_printf_float+0x154>
 80060d8:	b913      	cbnz	r3, 80060e0 <_printf_float+0x1a4>
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	07d2      	lsls	r2, r2, #31
 80060de:	d501      	bpl.n	80060e4 <_printf_float+0x1a8>
 80060e0:	3302      	adds	r3, #2
 80060e2:	e7f4      	b.n	80060ce <_printf_float+0x192>
 80060e4:	2301      	movs	r3, #1
 80060e6:	e7f2      	b.n	80060ce <_printf_float+0x192>
 80060e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ee:	4299      	cmp	r1, r3
 80060f0:	db05      	blt.n	80060fe <_printf_float+0x1c2>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	6121      	str	r1, [r4, #16]
 80060f6:	07d8      	lsls	r0, r3, #31
 80060f8:	d5ea      	bpl.n	80060d0 <_printf_float+0x194>
 80060fa:	1c4b      	adds	r3, r1, #1
 80060fc:	e7e7      	b.n	80060ce <_printf_float+0x192>
 80060fe:	2900      	cmp	r1, #0
 8006100:	bfd4      	ite	le
 8006102:	f1c1 0202 	rsble	r2, r1, #2
 8006106:	2201      	movgt	r2, #1
 8006108:	4413      	add	r3, r2
 800610a:	e7e0      	b.n	80060ce <_printf_float+0x192>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	055a      	lsls	r2, r3, #21
 8006110:	d407      	bmi.n	8006122 <_printf_float+0x1e6>
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	4642      	mov	r2, r8
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	d12b      	bne.n	8006178 <_printf_float+0x23c>
 8006120:	e767      	b.n	8005ff2 <_printf_float+0xb6>
 8006122:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006126:	f240 80dd 	bls.w	80062e4 <_printf_float+0x3a8>
 800612a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800612e:	2200      	movs	r2, #0
 8006130:	2300      	movs	r3, #0
 8006132:	f7fa fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006136:	2800      	cmp	r0, #0
 8006138:	d033      	beq.n	80061a2 <_printf_float+0x266>
 800613a:	4a37      	ldr	r2, [pc, #220]	@ (8006218 <_printf_float+0x2dc>)
 800613c:	2301      	movs	r3, #1
 800613e:	4631      	mov	r1, r6
 8006140:	4628      	mov	r0, r5
 8006142:	47b8      	blx	r7
 8006144:	3001      	adds	r0, #1
 8006146:	f43f af54 	beq.w	8005ff2 <_printf_float+0xb6>
 800614a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800614e:	4543      	cmp	r3, r8
 8006150:	db02      	blt.n	8006158 <_printf_float+0x21c>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	07d8      	lsls	r0, r3, #31
 8006156:	d50f      	bpl.n	8006178 <_printf_float+0x23c>
 8006158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	f43f af45 	beq.w	8005ff2 <_printf_float+0xb6>
 8006168:	f04f 0900 	mov.w	r9, #0
 800616c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006170:	f104 0a1a 	add.w	sl, r4, #26
 8006174:	45c8      	cmp	r8, r9
 8006176:	dc09      	bgt.n	800618c <_printf_float+0x250>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	079b      	lsls	r3, r3, #30
 800617c:	f100 8103 	bmi.w	8006386 <_printf_float+0x44a>
 8006180:	68e0      	ldr	r0, [r4, #12]
 8006182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006184:	4298      	cmp	r0, r3
 8006186:	bfb8      	it	lt
 8006188:	4618      	movlt	r0, r3
 800618a:	e734      	b.n	8005ff6 <_printf_float+0xba>
 800618c:	2301      	movs	r3, #1
 800618e:	4652      	mov	r2, sl
 8006190:	4631      	mov	r1, r6
 8006192:	4628      	mov	r0, r5
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f af2b 	beq.w	8005ff2 <_printf_float+0xb6>
 800619c:	f109 0901 	add.w	r9, r9, #1
 80061a0:	e7e8      	b.n	8006174 <_printf_float+0x238>
 80061a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	dc39      	bgt.n	800621c <_printf_float+0x2e0>
 80061a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006218 <_printf_float+0x2dc>)
 80061aa:	2301      	movs	r3, #1
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f af1d 	beq.w	8005ff2 <_printf_float+0xb6>
 80061b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061bc:	ea59 0303 	orrs.w	r3, r9, r3
 80061c0:	d102      	bne.n	80061c8 <_printf_float+0x28c>
 80061c2:	6823      	ldr	r3, [r4, #0]
 80061c4:	07d9      	lsls	r1, r3, #31
 80061c6:	d5d7      	bpl.n	8006178 <_printf_float+0x23c>
 80061c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061cc:	4631      	mov	r1, r6
 80061ce:	4628      	mov	r0, r5
 80061d0:	47b8      	blx	r7
 80061d2:	3001      	adds	r0, #1
 80061d4:	f43f af0d 	beq.w	8005ff2 <_printf_float+0xb6>
 80061d8:	f04f 0a00 	mov.w	sl, #0
 80061dc:	f104 0b1a 	add.w	fp, r4, #26
 80061e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e2:	425b      	negs	r3, r3
 80061e4:	4553      	cmp	r3, sl
 80061e6:	dc01      	bgt.n	80061ec <_printf_float+0x2b0>
 80061e8:	464b      	mov	r3, r9
 80061ea:	e793      	b.n	8006114 <_printf_float+0x1d8>
 80061ec:	2301      	movs	r3, #1
 80061ee:	465a      	mov	r2, fp
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f aefb 	beq.w	8005ff2 <_printf_float+0xb6>
 80061fc:	f10a 0a01 	add.w	sl, sl, #1
 8006200:	e7ee      	b.n	80061e0 <_printf_float+0x2a4>
 8006202:	bf00      	nop
 8006204:	7fefffff 	.word	0x7fefffff
 8006208:	08009b9c 	.word	0x08009b9c
 800620c:	08009ba0 	.word	0x08009ba0
 8006210:	08009ba4 	.word	0x08009ba4
 8006214:	08009ba8 	.word	0x08009ba8
 8006218:	08009bac 	.word	0x08009bac
 800621c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800621e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006222:	4553      	cmp	r3, sl
 8006224:	bfa8      	it	ge
 8006226:	4653      	movge	r3, sl
 8006228:	2b00      	cmp	r3, #0
 800622a:	4699      	mov	r9, r3
 800622c:	dc36      	bgt.n	800629c <_printf_float+0x360>
 800622e:	f04f 0b00 	mov.w	fp, #0
 8006232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006236:	f104 021a 	add.w	r2, r4, #26
 800623a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800623c:	9306      	str	r3, [sp, #24]
 800623e:	eba3 0309 	sub.w	r3, r3, r9
 8006242:	455b      	cmp	r3, fp
 8006244:	dc31      	bgt.n	80062aa <_printf_float+0x36e>
 8006246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006248:	459a      	cmp	sl, r3
 800624a:	dc3a      	bgt.n	80062c2 <_printf_float+0x386>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	07da      	lsls	r2, r3, #31
 8006250:	d437      	bmi.n	80062c2 <_printf_float+0x386>
 8006252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006254:	ebaa 0903 	sub.w	r9, sl, r3
 8006258:	9b06      	ldr	r3, [sp, #24]
 800625a:	ebaa 0303 	sub.w	r3, sl, r3
 800625e:	4599      	cmp	r9, r3
 8006260:	bfa8      	it	ge
 8006262:	4699      	movge	r9, r3
 8006264:	f1b9 0f00 	cmp.w	r9, #0
 8006268:	dc33      	bgt.n	80062d2 <_printf_float+0x396>
 800626a:	f04f 0800 	mov.w	r8, #0
 800626e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006272:	f104 0b1a 	add.w	fp, r4, #26
 8006276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006278:	ebaa 0303 	sub.w	r3, sl, r3
 800627c:	eba3 0309 	sub.w	r3, r3, r9
 8006280:	4543      	cmp	r3, r8
 8006282:	f77f af79 	ble.w	8006178 <_printf_float+0x23c>
 8006286:	2301      	movs	r3, #1
 8006288:	465a      	mov	r2, fp
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	f43f aeae 	beq.w	8005ff2 <_printf_float+0xb6>
 8006296:	f108 0801 	add.w	r8, r8, #1
 800629a:	e7ec      	b.n	8006276 <_printf_float+0x33a>
 800629c:	4642      	mov	r2, r8
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	d1c2      	bne.n	800622e <_printf_float+0x2f2>
 80062a8:	e6a3      	b.n	8005ff2 <_printf_float+0xb6>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4631      	mov	r1, r6
 80062ae:	4628      	mov	r0, r5
 80062b0:	9206      	str	r2, [sp, #24]
 80062b2:	47b8      	blx	r7
 80062b4:	3001      	adds	r0, #1
 80062b6:	f43f ae9c 	beq.w	8005ff2 <_printf_float+0xb6>
 80062ba:	9a06      	ldr	r2, [sp, #24]
 80062bc:	f10b 0b01 	add.w	fp, fp, #1
 80062c0:	e7bb      	b.n	800623a <_printf_float+0x2fe>
 80062c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c6:	4631      	mov	r1, r6
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b8      	blx	r7
 80062cc:	3001      	adds	r0, #1
 80062ce:	d1c0      	bne.n	8006252 <_printf_float+0x316>
 80062d0:	e68f      	b.n	8005ff2 <_printf_float+0xb6>
 80062d2:	9a06      	ldr	r2, [sp, #24]
 80062d4:	464b      	mov	r3, r9
 80062d6:	4442      	add	r2, r8
 80062d8:	4631      	mov	r1, r6
 80062da:	4628      	mov	r0, r5
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	d1c3      	bne.n	800626a <_printf_float+0x32e>
 80062e2:	e686      	b.n	8005ff2 <_printf_float+0xb6>
 80062e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062e8:	f1ba 0f01 	cmp.w	sl, #1
 80062ec:	dc01      	bgt.n	80062f2 <_printf_float+0x3b6>
 80062ee:	07db      	lsls	r3, r3, #31
 80062f0:	d536      	bpl.n	8006360 <_printf_float+0x424>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4642      	mov	r2, r8
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f ae78 	beq.w	8005ff2 <_printf_float+0xb6>
 8006302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006306:	4631      	mov	r1, r6
 8006308:	4628      	mov	r0, r5
 800630a:	47b8      	blx	r7
 800630c:	3001      	adds	r0, #1
 800630e:	f43f ae70 	beq.w	8005ff2 <_printf_float+0xb6>
 8006312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800631e:	f7fa fbdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006322:	b9c0      	cbnz	r0, 8006356 <_printf_float+0x41a>
 8006324:	4653      	mov	r3, sl
 8006326:	f108 0201 	add.w	r2, r8, #1
 800632a:	4631      	mov	r1, r6
 800632c:	4628      	mov	r0, r5
 800632e:	47b8      	blx	r7
 8006330:	3001      	adds	r0, #1
 8006332:	d10c      	bne.n	800634e <_printf_float+0x412>
 8006334:	e65d      	b.n	8005ff2 <_printf_float+0xb6>
 8006336:	2301      	movs	r3, #1
 8006338:	465a      	mov	r2, fp
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	f43f ae56 	beq.w	8005ff2 <_printf_float+0xb6>
 8006346:	f108 0801 	add.w	r8, r8, #1
 800634a:	45d0      	cmp	r8, sl
 800634c:	dbf3      	blt.n	8006336 <_printf_float+0x3fa>
 800634e:	464b      	mov	r3, r9
 8006350:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006354:	e6df      	b.n	8006116 <_printf_float+0x1da>
 8006356:	f04f 0800 	mov.w	r8, #0
 800635a:	f104 0b1a 	add.w	fp, r4, #26
 800635e:	e7f4      	b.n	800634a <_printf_float+0x40e>
 8006360:	2301      	movs	r3, #1
 8006362:	4642      	mov	r2, r8
 8006364:	e7e1      	b.n	800632a <_printf_float+0x3ee>
 8006366:	2301      	movs	r3, #1
 8006368:	464a      	mov	r2, r9
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	f43f ae3e 	beq.w	8005ff2 <_printf_float+0xb6>
 8006376:	f108 0801 	add.w	r8, r8, #1
 800637a:	68e3      	ldr	r3, [r4, #12]
 800637c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800637e:	1a5b      	subs	r3, r3, r1
 8006380:	4543      	cmp	r3, r8
 8006382:	dcf0      	bgt.n	8006366 <_printf_float+0x42a>
 8006384:	e6fc      	b.n	8006180 <_printf_float+0x244>
 8006386:	f04f 0800 	mov.w	r8, #0
 800638a:	f104 0919 	add.w	r9, r4, #25
 800638e:	e7f4      	b.n	800637a <_printf_float+0x43e>

08006390 <_printf_common>:
 8006390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	4616      	mov	r6, r2
 8006396:	4698      	mov	r8, r3
 8006398:	688a      	ldr	r2, [r1, #8]
 800639a:	690b      	ldr	r3, [r1, #16]
 800639c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a0:	4293      	cmp	r3, r2
 80063a2:	bfb8      	it	lt
 80063a4:	4613      	movlt	r3, r2
 80063a6:	6033      	str	r3, [r6, #0]
 80063a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063ac:	4607      	mov	r7, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	b10a      	cbz	r2, 80063b6 <_printf_common+0x26>
 80063b2:	3301      	adds	r3, #1
 80063b4:	6033      	str	r3, [r6, #0]
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	0699      	lsls	r1, r3, #26
 80063ba:	bf42      	ittt	mi
 80063bc:	6833      	ldrmi	r3, [r6, #0]
 80063be:	3302      	addmi	r3, #2
 80063c0:	6033      	strmi	r3, [r6, #0]
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	f015 0506 	ands.w	r5, r5, #6
 80063c8:	d106      	bne.n	80063d8 <_printf_common+0x48>
 80063ca:	f104 0a19 	add.w	sl, r4, #25
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	6832      	ldr	r2, [r6, #0]
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dc26      	bgt.n	8006426 <_printf_common+0x96>
 80063d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	3b00      	subs	r3, #0
 80063e0:	bf18      	it	ne
 80063e2:	2301      	movne	r3, #1
 80063e4:	0692      	lsls	r2, r2, #26
 80063e6:	d42b      	bmi.n	8006440 <_printf_common+0xb0>
 80063e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063ec:	4641      	mov	r1, r8
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c8      	blx	r9
 80063f2:	3001      	adds	r0, #1
 80063f4:	d01e      	beq.n	8006434 <_printf_common+0xa4>
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	6922      	ldr	r2, [r4, #16]
 80063fa:	f003 0306 	and.w	r3, r3, #6
 80063fe:	2b04      	cmp	r3, #4
 8006400:	bf02      	ittt	eq
 8006402:	68e5      	ldreq	r5, [r4, #12]
 8006404:	6833      	ldreq	r3, [r6, #0]
 8006406:	1aed      	subeq	r5, r5, r3
 8006408:	68a3      	ldr	r3, [r4, #8]
 800640a:	bf0c      	ite	eq
 800640c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006410:	2500      	movne	r5, #0
 8006412:	4293      	cmp	r3, r2
 8006414:	bfc4      	itt	gt
 8006416:	1a9b      	subgt	r3, r3, r2
 8006418:	18ed      	addgt	r5, r5, r3
 800641a:	2600      	movs	r6, #0
 800641c:	341a      	adds	r4, #26
 800641e:	42b5      	cmp	r5, r6
 8006420:	d11a      	bne.n	8006458 <_printf_common+0xc8>
 8006422:	2000      	movs	r0, #0
 8006424:	e008      	b.n	8006438 <_printf_common+0xa8>
 8006426:	2301      	movs	r3, #1
 8006428:	4652      	mov	r2, sl
 800642a:	4641      	mov	r1, r8
 800642c:	4638      	mov	r0, r7
 800642e:	47c8      	blx	r9
 8006430:	3001      	adds	r0, #1
 8006432:	d103      	bne.n	800643c <_printf_common+0xac>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	3501      	adds	r5, #1
 800643e:	e7c6      	b.n	80063ce <_printf_common+0x3e>
 8006440:	18e1      	adds	r1, r4, r3
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	2030      	movs	r0, #48	@ 0x30
 8006446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800644a:	4422      	add	r2, r4
 800644c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006454:	3302      	adds	r3, #2
 8006456:	e7c7      	b.n	80063e8 <_printf_common+0x58>
 8006458:	2301      	movs	r3, #1
 800645a:	4622      	mov	r2, r4
 800645c:	4641      	mov	r1, r8
 800645e:	4638      	mov	r0, r7
 8006460:	47c8      	blx	r9
 8006462:	3001      	adds	r0, #1
 8006464:	d0e6      	beq.n	8006434 <_printf_common+0xa4>
 8006466:	3601      	adds	r6, #1
 8006468:	e7d9      	b.n	800641e <_printf_common+0x8e>
	...

0800646c <_printf_i>:
 800646c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	7e0f      	ldrb	r7, [r1, #24]
 8006472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006474:	2f78      	cmp	r7, #120	@ 0x78
 8006476:	4691      	mov	r9, r2
 8006478:	4680      	mov	r8, r0
 800647a:	460c      	mov	r4, r1
 800647c:	469a      	mov	sl, r3
 800647e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006482:	d807      	bhi.n	8006494 <_printf_i+0x28>
 8006484:	2f62      	cmp	r7, #98	@ 0x62
 8006486:	d80a      	bhi.n	800649e <_printf_i+0x32>
 8006488:	2f00      	cmp	r7, #0
 800648a:	f000 80d2 	beq.w	8006632 <_printf_i+0x1c6>
 800648e:	2f58      	cmp	r7, #88	@ 0x58
 8006490:	f000 80b9 	beq.w	8006606 <_printf_i+0x19a>
 8006494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800649c:	e03a      	b.n	8006514 <_printf_i+0xa8>
 800649e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064a2:	2b15      	cmp	r3, #21
 80064a4:	d8f6      	bhi.n	8006494 <_printf_i+0x28>
 80064a6:	a101      	add	r1, pc, #4	@ (adr r1, 80064ac <_printf_i+0x40>)
 80064a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064ac:	08006505 	.word	0x08006505
 80064b0:	08006519 	.word	0x08006519
 80064b4:	08006495 	.word	0x08006495
 80064b8:	08006495 	.word	0x08006495
 80064bc:	08006495 	.word	0x08006495
 80064c0:	08006495 	.word	0x08006495
 80064c4:	08006519 	.word	0x08006519
 80064c8:	08006495 	.word	0x08006495
 80064cc:	08006495 	.word	0x08006495
 80064d0:	08006495 	.word	0x08006495
 80064d4:	08006495 	.word	0x08006495
 80064d8:	08006619 	.word	0x08006619
 80064dc:	08006543 	.word	0x08006543
 80064e0:	080065d3 	.word	0x080065d3
 80064e4:	08006495 	.word	0x08006495
 80064e8:	08006495 	.word	0x08006495
 80064ec:	0800663b 	.word	0x0800663b
 80064f0:	08006495 	.word	0x08006495
 80064f4:	08006543 	.word	0x08006543
 80064f8:	08006495 	.word	0x08006495
 80064fc:	08006495 	.word	0x08006495
 8006500:	080065db 	.word	0x080065db
 8006504:	6833      	ldr	r3, [r6, #0]
 8006506:	1d1a      	adds	r2, r3, #4
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6032      	str	r2, [r6, #0]
 800650c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006514:	2301      	movs	r3, #1
 8006516:	e09d      	b.n	8006654 <_printf_i+0x1e8>
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	6820      	ldr	r0, [r4, #0]
 800651c:	1d19      	adds	r1, r3, #4
 800651e:	6031      	str	r1, [r6, #0]
 8006520:	0606      	lsls	r6, r0, #24
 8006522:	d501      	bpl.n	8006528 <_printf_i+0xbc>
 8006524:	681d      	ldr	r5, [r3, #0]
 8006526:	e003      	b.n	8006530 <_printf_i+0xc4>
 8006528:	0645      	lsls	r5, r0, #25
 800652a:	d5fb      	bpl.n	8006524 <_printf_i+0xb8>
 800652c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006530:	2d00      	cmp	r5, #0
 8006532:	da03      	bge.n	800653c <_printf_i+0xd0>
 8006534:	232d      	movs	r3, #45	@ 0x2d
 8006536:	426d      	negs	r5, r5
 8006538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800653c:	4859      	ldr	r0, [pc, #356]	@ (80066a4 <_printf_i+0x238>)
 800653e:	230a      	movs	r3, #10
 8006540:	e011      	b.n	8006566 <_printf_i+0xfa>
 8006542:	6821      	ldr	r1, [r4, #0]
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	0608      	lsls	r0, r1, #24
 8006548:	f853 5b04 	ldr.w	r5, [r3], #4
 800654c:	d402      	bmi.n	8006554 <_printf_i+0xe8>
 800654e:	0649      	lsls	r1, r1, #25
 8006550:	bf48      	it	mi
 8006552:	b2ad      	uxthmi	r5, r5
 8006554:	2f6f      	cmp	r7, #111	@ 0x6f
 8006556:	4853      	ldr	r0, [pc, #332]	@ (80066a4 <_printf_i+0x238>)
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	bf14      	ite	ne
 800655c:	230a      	movne	r3, #10
 800655e:	2308      	moveq	r3, #8
 8006560:	2100      	movs	r1, #0
 8006562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006566:	6866      	ldr	r6, [r4, #4]
 8006568:	60a6      	str	r6, [r4, #8]
 800656a:	2e00      	cmp	r6, #0
 800656c:	bfa2      	ittt	ge
 800656e:	6821      	ldrge	r1, [r4, #0]
 8006570:	f021 0104 	bicge.w	r1, r1, #4
 8006574:	6021      	strge	r1, [r4, #0]
 8006576:	b90d      	cbnz	r5, 800657c <_printf_i+0x110>
 8006578:	2e00      	cmp	r6, #0
 800657a:	d04b      	beq.n	8006614 <_printf_i+0x1a8>
 800657c:	4616      	mov	r6, r2
 800657e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006582:	fb03 5711 	mls	r7, r3, r1, r5
 8006586:	5dc7      	ldrb	r7, [r0, r7]
 8006588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800658c:	462f      	mov	r7, r5
 800658e:	42bb      	cmp	r3, r7
 8006590:	460d      	mov	r5, r1
 8006592:	d9f4      	bls.n	800657e <_printf_i+0x112>
 8006594:	2b08      	cmp	r3, #8
 8006596:	d10b      	bne.n	80065b0 <_printf_i+0x144>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	07df      	lsls	r7, r3, #31
 800659c:	d508      	bpl.n	80065b0 <_printf_i+0x144>
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4299      	cmp	r1, r3
 80065a4:	bfde      	ittt	le
 80065a6:	2330      	movle	r3, #48	@ 0x30
 80065a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80065b0:	1b92      	subs	r2, r2, r6
 80065b2:	6122      	str	r2, [r4, #16]
 80065b4:	f8cd a000 	str.w	sl, [sp]
 80065b8:	464b      	mov	r3, r9
 80065ba:	aa03      	add	r2, sp, #12
 80065bc:	4621      	mov	r1, r4
 80065be:	4640      	mov	r0, r8
 80065c0:	f7ff fee6 	bl	8006390 <_printf_common>
 80065c4:	3001      	adds	r0, #1
 80065c6:	d14a      	bne.n	800665e <_printf_i+0x1f2>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065cc:	b004      	add	sp, #16
 80065ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f043 0320 	orr.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	4833      	ldr	r0, [pc, #204]	@ (80066a8 <_printf_i+0x23c>)
 80065dc:	2778      	movs	r7, #120	@ 0x78
 80065de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	6831      	ldr	r1, [r6, #0]
 80065e6:	061f      	lsls	r7, r3, #24
 80065e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ec:	d402      	bmi.n	80065f4 <_printf_i+0x188>
 80065ee:	065f      	lsls	r7, r3, #25
 80065f0:	bf48      	it	mi
 80065f2:	b2ad      	uxthmi	r5, r5
 80065f4:	6031      	str	r1, [r6, #0]
 80065f6:	07d9      	lsls	r1, r3, #31
 80065f8:	bf44      	itt	mi
 80065fa:	f043 0320 	orrmi.w	r3, r3, #32
 80065fe:	6023      	strmi	r3, [r4, #0]
 8006600:	b11d      	cbz	r5, 800660a <_printf_i+0x19e>
 8006602:	2310      	movs	r3, #16
 8006604:	e7ac      	b.n	8006560 <_printf_i+0xf4>
 8006606:	4827      	ldr	r0, [pc, #156]	@ (80066a4 <_printf_i+0x238>)
 8006608:	e7e9      	b.n	80065de <_printf_i+0x172>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	f023 0320 	bic.w	r3, r3, #32
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	e7f6      	b.n	8006602 <_printf_i+0x196>
 8006614:	4616      	mov	r6, r2
 8006616:	e7bd      	b.n	8006594 <_printf_i+0x128>
 8006618:	6833      	ldr	r3, [r6, #0]
 800661a:	6825      	ldr	r5, [r4, #0]
 800661c:	6961      	ldr	r1, [r4, #20]
 800661e:	1d18      	adds	r0, r3, #4
 8006620:	6030      	str	r0, [r6, #0]
 8006622:	062e      	lsls	r6, r5, #24
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	d501      	bpl.n	800662c <_printf_i+0x1c0>
 8006628:	6019      	str	r1, [r3, #0]
 800662a:	e002      	b.n	8006632 <_printf_i+0x1c6>
 800662c:	0668      	lsls	r0, r5, #25
 800662e:	d5fb      	bpl.n	8006628 <_printf_i+0x1bc>
 8006630:	8019      	strh	r1, [r3, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	6123      	str	r3, [r4, #16]
 8006636:	4616      	mov	r6, r2
 8006638:	e7bc      	b.n	80065b4 <_printf_i+0x148>
 800663a:	6833      	ldr	r3, [r6, #0]
 800663c:	1d1a      	adds	r2, r3, #4
 800663e:	6032      	str	r2, [r6, #0]
 8006640:	681e      	ldr	r6, [r3, #0]
 8006642:	6862      	ldr	r2, [r4, #4]
 8006644:	2100      	movs	r1, #0
 8006646:	4630      	mov	r0, r6
 8006648:	f7f9 fdca 	bl	80001e0 <memchr>
 800664c:	b108      	cbz	r0, 8006652 <_printf_i+0x1e6>
 800664e:	1b80      	subs	r0, r0, r6
 8006650:	6060      	str	r0, [r4, #4]
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	2300      	movs	r3, #0
 8006658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665c:	e7aa      	b.n	80065b4 <_printf_i+0x148>
 800665e:	6923      	ldr	r3, [r4, #16]
 8006660:	4632      	mov	r2, r6
 8006662:	4649      	mov	r1, r9
 8006664:	4640      	mov	r0, r8
 8006666:	47d0      	blx	sl
 8006668:	3001      	adds	r0, #1
 800666a:	d0ad      	beq.n	80065c8 <_printf_i+0x15c>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	079b      	lsls	r3, r3, #30
 8006670:	d413      	bmi.n	800669a <_printf_i+0x22e>
 8006672:	68e0      	ldr	r0, [r4, #12]
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	4298      	cmp	r0, r3
 8006678:	bfb8      	it	lt
 800667a:	4618      	movlt	r0, r3
 800667c:	e7a6      	b.n	80065cc <_printf_i+0x160>
 800667e:	2301      	movs	r3, #1
 8006680:	4632      	mov	r2, r6
 8006682:	4649      	mov	r1, r9
 8006684:	4640      	mov	r0, r8
 8006686:	47d0      	blx	sl
 8006688:	3001      	adds	r0, #1
 800668a:	d09d      	beq.n	80065c8 <_printf_i+0x15c>
 800668c:	3501      	adds	r5, #1
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	9903      	ldr	r1, [sp, #12]
 8006692:	1a5b      	subs	r3, r3, r1
 8006694:	42ab      	cmp	r3, r5
 8006696:	dcf2      	bgt.n	800667e <_printf_i+0x212>
 8006698:	e7eb      	b.n	8006672 <_printf_i+0x206>
 800669a:	2500      	movs	r5, #0
 800669c:	f104 0619 	add.w	r6, r4, #25
 80066a0:	e7f5      	b.n	800668e <_printf_i+0x222>
 80066a2:	bf00      	nop
 80066a4:	08009bae 	.word	0x08009bae
 80066a8:	08009bbf 	.word	0x08009bbf

080066ac <std>:
 80066ac:	2300      	movs	r3, #0
 80066ae:	b510      	push	{r4, lr}
 80066b0:	4604      	mov	r4, r0
 80066b2:	e9c0 3300 	strd	r3, r3, [r0]
 80066b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066ba:	6083      	str	r3, [r0, #8]
 80066bc:	8181      	strh	r1, [r0, #12]
 80066be:	6643      	str	r3, [r0, #100]	@ 0x64
 80066c0:	81c2      	strh	r2, [r0, #14]
 80066c2:	6183      	str	r3, [r0, #24]
 80066c4:	4619      	mov	r1, r3
 80066c6:	2208      	movs	r2, #8
 80066c8:	305c      	adds	r0, #92	@ 0x5c
 80066ca:	f000 f914 	bl	80068f6 <memset>
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <std+0x58>)
 80066d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80066d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006708 <std+0x5c>)
 80066d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066d6:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <std+0x60>)
 80066d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <std+0x64>)
 80066dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <std+0x68>)
 80066e0:	6224      	str	r4, [r4, #32]
 80066e2:	429c      	cmp	r4, r3
 80066e4:	d006      	beq.n	80066f4 <std+0x48>
 80066e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066ea:	4294      	cmp	r4, r2
 80066ec:	d002      	beq.n	80066f4 <std+0x48>
 80066ee:	33d0      	adds	r3, #208	@ 0xd0
 80066f0:	429c      	cmp	r4, r3
 80066f2:	d105      	bne.n	8006700 <std+0x54>
 80066f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066fc:	f000 b978 	b.w	80069f0 <__retarget_lock_init_recursive>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	bf00      	nop
 8006704:	08006871 	.word	0x08006871
 8006708:	08006893 	.word	0x08006893
 800670c:	080068cb 	.word	0x080068cb
 8006710:	080068ef 	.word	0x080068ef
 8006714:	20000374 	.word	0x20000374

08006718 <stdio_exit_handler>:
 8006718:	4a02      	ldr	r2, [pc, #8]	@ (8006724 <stdio_exit_handler+0xc>)
 800671a:	4903      	ldr	r1, [pc, #12]	@ (8006728 <stdio_exit_handler+0x10>)
 800671c:	4803      	ldr	r0, [pc, #12]	@ (800672c <stdio_exit_handler+0x14>)
 800671e:	f000 b869 	b.w	80067f4 <_fwalk_sglue>
 8006722:	bf00      	nop
 8006724:	2000000c 	.word	0x2000000c
 8006728:	0800834d 	.word	0x0800834d
 800672c:	2000001c 	.word	0x2000001c

08006730 <cleanup_stdio>:
 8006730:	6841      	ldr	r1, [r0, #4]
 8006732:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <cleanup_stdio+0x34>)
 8006734:	4299      	cmp	r1, r3
 8006736:	b510      	push	{r4, lr}
 8006738:	4604      	mov	r4, r0
 800673a:	d001      	beq.n	8006740 <cleanup_stdio+0x10>
 800673c:	f001 fe06 	bl	800834c <_fflush_r>
 8006740:	68a1      	ldr	r1, [r4, #8]
 8006742:	4b09      	ldr	r3, [pc, #36]	@ (8006768 <cleanup_stdio+0x38>)
 8006744:	4299      	cmp	r1, r3
 8006746:	d002      	beq.n	800674e <cleanup_stdio+0x1e>
 8006748:	4620      	mov	r0, r4
 800674a:	f001 fdff 	bl	800834c <_fflush_r>
 800674e:	68e1      	ldr	r1, [r4, #12]
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <cleanup_stdio+0x3c>)
 8006752:	4299      	cmp	r1, r3
 8006754:	d004      	beq.n	8006760 <cleanup_stdio+0x30>
 8006756:	4620      	mov	r0, r4
 8006758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800675c:	f001 bdf6 	b.w	800834c <_fflush_r>
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop
 8006764:	20000374 	.word	0x20000374
 8006768:	200003dc 	.word	0x200003dc
 800676c:	20000444 	.word	0x20000444

08006770 <global_stdio_init.part.0>:
 8006770:	b510      	push	{r4, lr}
 8006772:	4b0b      	ldr	r3, [pc, #44]	@ (80067a0 <global_stdio_init.part.0+0x30>)
 8006774:	4c0b      	ldr	r4, [pc, #44]	@ (80067a4 <global_stdio_init.part.0+0x34>)
 8006776:	4a0c      	ldr	r2, [pc, #48]	@ (80067a8 <global_stdio_init.part.0+0x38>)
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	4620      	mov	r0, r4
 800677c:	2200      	movs	r2, #0
 800677e:	2104      	movs	r1, #4
 8006780:	f7ff ff94 	bl	80066ac <std>
 8006784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006788:	2201      	movs	r2, #1
 800678a:	2109      	movs	r1, #9
 800678c:	f7ff ff8e 	bl	80066ac <std>
 8006790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006794:	2202      	movs	r2, #2
 8006796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800679a:	2112      	movs	r1, #18
 800679c:	f7ff bf86 	b.w	80066ac <std>
 80067a0:	200004ac 	.word	0x200004ac
 80067a4:	20000374 	.word	0x20000374
 80067a8:	08006719 	.word	0x08006719

080067ac <__sfp_lock_acquire>:
 80067ac:	4801      	ldr	r0, [pc, #4]	@ (80067b4 <__sfp_lock_acquire+0x8>)
 80067ae:	f000 b920 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 80067b2:	bf00      	nop
 80067b4:	200004b5 	.word	0x200004b5

080067b8 <__sfp_lock_release>:
 80067b8:	4801      	ldr	r0, [pc, #4]	@ (80067c0 <__sfp_lock_release+0x8>)
 80067ba:	f000 b91b 	b.w	80069f4 <__retarget_lock_release_recursive>
 80067be:	bf00      	nop
 80067c0:	200004b5 	.word	0x200004b5

080067c4 <__sinit>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	4604      	mov	r4, r0
 80067c8:	f7ff fff0 	bl	80067ac <__sfp_lock_acquire>
 80067cc:	6a23      	ldr	r3, [r4, #32]
 80067ce:	b11b      	cbz	r3, 80067d8 <__sinit+0x14>
 80067d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d4:	f7ff bff0 	b.w	80067b8 <__sfp_lock_release>
 80067d8:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <__sinit+0x28>)
 80067da:	6223      	str	r3, [r4, #32]
 80067dc:	4b04      	ldr	r3, [pc, #16]	@ (80067f0 <__sinit+0x2c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f5      	bne.n	80067d0 <__sinit+0xc>
 80067e4:	f7ff ffc4 	bl	8006770 <global_stdio_init.part.0>
 80067e8:	e7f2      	b.n	80067d0 <__sinit+0xc>
 80067ea:	bf00      	nop
 80067ec:	08006731 	.word	0x08006731
 80067f0:	200004ac 	.word	0x200004ac

080067f4 <_fwalk_sglue>:
 80067f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f8:	4607      	mov	r7, r0
 80067fa:	4688      	mov	r8, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	2600      	movs	r6, #0
 8006800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006804:	f1b9 0901 	subs.w	r9, r9, #1
 8006808:	d505      	bpl.n	8006816 <_fwalk_sglue+0x22>
 800680a:	6824      	ldr	r4, [r4, #0]
 800680c:	2c00      	cmp	r4, #0
 800680e:	d1f7      	bne.n	8006800 <_fwalk_sglue+0xc>
 8006810:	4630      	mov	r0, r6
 8006812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d907      	bls.n	800682c <_fwalk_sglue+0x38>
 800681c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006820:	3301      	adds	r3, #1
 8006822:	d003      	beq.n	800682c <_fwalk_sglue+0x38>
 8006824:	4629      	mov	r1, r5
 8006826:	4638      	mov	r0, r7
 8006828:	47c0      	blx	r8
 800682a:	4306      	orrs	r6, r0
 800682c:	3568      	adds	r5, #104	@ 0x68
 800682e:	e7e9      	b.n	8006804 <_fwalk_sglue+0x10>

08006830 <siprintf>:
 8006830:	b40e      	push	{r1, r2, r3}
 8006832:	b500      	push	{lr}
 8006834:	b09c      	sub	sp, #112	@ 0x70
 8006836:	ab1d      	add	r3, sp, #116	@ 0x74
 8006838:	9002      	str	r0, [sp, #8]
 800683a:	9006      	str	r0, [sp, #24]
 800683c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006840:	4809      	ldr	r0, [pc, #36]	@ (8006868 <siprintf+0x38>)
 8006842:	9107      	str	r1, [sp, #28]
 8006844:	9104      	str	r1, [sp, #16]
 8006846:	4909      	ldr	r1, [pc, #36]	@ (800686c <siprintf+0x3c>)
 8006848:	f853 2b04 	ldr.w	r2, [r3], #4
 800684c:	9105      	str	r1, [sp, #20]
 800684e:	6800      	ldr	r0, [r0, #0]
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	a902      	add	r1, sp, #8
 8006854:	f001 fbfa 	bl	800804c <_svfiprintf_r>
 8006858:	9b02      	ldr	r3, [sp, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	b01c      	add	sp, #112	@ 0x70
 8006860:	f85d eb04 	ldr.w	lr, [sp], #4
 8006864:	b003      	add	sp, #12
 8006866:	4770      	bx	lr
 8006868:	20000018 	.word	0x20000018
 800686c:	ffff0208 	.word	0xffff0208

08006870 <__sread>:
 8006870:	b510      	push	{r4, lr}
 8006872:	460c      	mov	r4, r1
 8006874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006878:	f000 f86c 	bl	8006954 <_read_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	bfab      	itete	ge
 8006880:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006882:	89a3      	ldrhlt	r3, [r4, #12]
 8006884:	181b      	addge	r3, r3, r0
 8006886:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800688a:	bfac      	ite	ge
 800688c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800688e:	81a3      	strhlt	r3, [r4, #12]
 8006890:	bd10      	pop	{r4, pc}

08006892 <__swrite>:
 8006892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006896:	461f      	mov	r7, r3
 8006898:	898b      	ldrh	r3, [r1, #12]
 800689a:	05db      	lsls	r3, r3, #23
 800689c:	4605      	mov	r5, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	4616      	mov	r6, r2
 80068a2:	d505      	bpl.n	80068b0 <__swrite+0x1e>
 80068a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a8:	2302      	movs	r3, #2
 80068aa:	2200      	movs	r2, #0
 80068ac:	f000 f840 	bl	8006930 <_lseek_r>
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068ba:	81a3      	strh	r3, [r4, #12]
 80068bc:	4632      	mov	r2, r6
 80068be:	463b      	mov	r3, r7
 80068c0:	4628      	mov	r0, r5
 80068c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	f000 b857 	b.w	8006978 <_write_r>

080068ca <__sseek>:
 80068ca:	b510      	push	{r4, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d2:	f000 f82d 	bl	8006930 <_lseek_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	bf15      	itete	ne
 80068dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068e6:	81a3      	strheq	r3, [r4, #12]
 80068e8:	bf18      	it	ne
 80068ea:	81a3      	strhne	r3, [r4, #12]
 80068ec:	bd10      	pop	{r4, pc}

080068ee <__sclose>:
 80068ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f2:	f000 b80d 	b.w	8006910 <_close_r>

080068f6 <memset>:
 80068f6:	4402      	add	r2, r0
 80068f8:	4603      	mov	r3, r0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d100      	bne.n	8006900 <memset+0xa>
 80068fe:	4770      	bx	lr
 8006900:	f803 1b01 	strb.w	r1, [r3], #1
 8006904:	e7f9      	b.n	80068fa <memset+0x4>
	...

08006908 <_localeconv_r>:
 8006908:	4800      	ldr	r0, [pc, #0]	@ (800690c <_localeconv_r+0x4>)
 800690a:	4770      	bx	lr
 800690c:	20000158 	.word	0x20000158

08006910 <_close_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d06      	ldr	r5, [pc, #24]	@ (800692c <_close_r+0x1c>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	f7fb fec7 	bl	80026ae <_close>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_close_r+0x1a>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_close_r+0x1a>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	200004b0 	.word	0x200004b0

08006930 <_lseek_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d07      	ldr	r5, [pc, #28]	@ (8006950 <_lseek_r+0x20>)
 8006934:	4604      	mov	r4, r0
 8006936:	4608      	mov	r0, r1
 8006938:	4611      	mov	r1, r2
 800693a:	2200      	movs	r2, #0
 800693c:	602a      	str	r2, [r5, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	f7fb fedc 	bl	80026fc <_lseek>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d102      	bne.n	800694e <_lseek_r+0x1e>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	b103      	cbz	r3, 800694e <_lseek_r+0x1e>
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	200004b0 	.word	0x200004b0

08006954 <_read_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d07      	ldr	r5, [pc, #28]	@ (8006974 <_read_r+0x20>)
 8006958:	4604      	mov	r4, r0
 800695a:	4608      	mov	r0, r1
 800695c:	4611      	mov	r1, r2
 800695e:	2200      	movs	r2, #0
 8006960:	602a      	str	r2, [r5, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	f7fb fe6a 	bl	800263c <_read>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_read_r+0x1e>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_read_r+0x1e>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	200004b0 	.word	0x200004b0

08006978 <_write_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d07      	ldr	r5, [pc, #28]	@ (8006998 <_write_r+0x20>)
 800697c:	4604      	mov	r4, r0
 800697e:	4608      	mov	r0, r1
 8006980:	4611      	mov	r1, r2
 8006982:	2200      	movs	r2, #0
 8006984:	602a      	str	r2, [r5, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f7fb fe75 	bl	8002676 <_write>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_write_r+0x1e>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_write_r+0x1e>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	200004b0 	.word	0x200004b0

0800699c <__errno>:
 800699c:	4b01      	ldr	r3, [pc, #4]	@ (80069a4 <__errno+0x8>)
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000018 	.word	0x20000018

080069a8 <__libc_init_array>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	4d0d      	ldr	r5, [pc, #52]	@ (80069e0 <__libc_init_array+0x38>)
 80069ac:	4c0d      	ldr	r4, [pc, #52]	@ (80069e4 <__libc_init_array+0x3c>)
 80069ae:	1b64      	subs	r4, r4, r5
 80069b0:	10a4      	asrs	r4, r4, #2
 80069b2:	2600      	movs	r6, #0
 80069b4:	42a6      	cmp	r6, r4
 80069b6:	d109      	bne.n	80069cc <__libc_init_array+0x24>
 80069b8:	4d0b      	ldr	r5, [pc, #44]	@ (80069e8 <__libc_init_array+0x40>)
 80069ba:	4c0c      	ldr	r4, [pc, #48]	@ (80069ec <__libc_init_array+0x44>)
 80069bc:	f002 ffc2 	bl	8009944 <_init>
 80069c0:	1b64      	subs	r4, r4, r5
 80069c2:	10a4      	asrs	r4, r4, #2
 80069c4:	2600      	movs	r6, #0
 80069c6:	42a6      	cmp	r6, r4
 80069c8:	d105      	bne.n	80069d6 <__libc_init_array+0x2e>
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d0:	4798      	blx	r3
 80069d2:	3601      	adds	r6, #1
 80069d4:	e7ee      	b.n	80069b4 <__libc_init_array+0xc>
 80069d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069da:	4798      	blx	r3
 80069dc:	3601      	adds	r6, #1
 80069de:	e7f2      	b.n	80069c6 <__libc_init_array+0x1e>
 80069e0:	08009f48 	.word	0x08009f48
 80069e4:	08009f48 	.word	0x08009f48
 80069e8:	08009f48 	.word	0x08009f48
 80069ec:	08009f4c 	.word	0x08009f4c

080069f0 <__retarget_lock_init_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <__retarget_lock_acquire_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <__retarget_lock_release_recursive>:
 80069f4:	4770      	bx	lr

080069f6 <quorem>:
 80069f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	6903      	ldr	r3, [r0, #16]
 80069fc:	690c      	ldr	r4, [r1, #16]
 80069fe:	42a3      	cmp	r3, r4
 8006a00:	4607      	mov	r7, r0
 8006a02:	db7e      	blt.n	8006b02 <quorem+0x10c>
 8006a04:	3c01      	subs	r4, #1
 8006a06:	f101 0814 	add.w	r8, r1, #20
 8006a0a:	00a3      	lsls	r3, r4, #2
 8006a0c:	f100 0514 	add.w	r5, r0, #20
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a20:	3301      	adds	r3, #1
 8006a22:	429a      	cmp	r2, r3
 8006a24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a28:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a2c:	d32e      	bcc.n	8006a8c <quorem+0x96>
 8006a2e:	f04f 0a00 	mov.w	sl, #0
 8006a32:	46c4      	mov	ip, r8
 8006a34:	46ae      	mov	lr, r5
 8006a36:	46d3      	mov	fp, sl
 8006a38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a3c:	b298      	uxth	r0, r3
 8006a3e:	fb06 a000 	mla	r0, r6, r0, sl
 8006a42:	0c02      	lsrs	r2, r0, #16
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	fb06 2303 	mla	r3, r6, r3, r2
 8006a4a:	f8de 2000 	ldr.w	r2, [lr]
 8006a4e:	b280      	uxth	r0, r0
 8006a50:	b292      	uxth	r2, r2
 8006a52:	1a12      	subs	r2, r2, r0
 8006a54:	445a      	add	r2, fp
 8006a56:	f8de 0000 	ldr.w	r0, [lr]
 8006a5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a64:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a68:	b292      	uxth	r2, r2
 8006a6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a6e:	45e1      	cmp	r9, ip
 8006a70:	f84e 2b04 	str.w	r2, [lr], #4
 8006a74:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a78:	d2de      	bcs.n	8006a38 <quorem+0x42>
 8006a7a:	9b00      	ldr	r3, [sp, #0]
 8006a7c:	58eb      	ldr	r3, [r5, r3]
 8006a7e:	b92b      	cbnz	r3, 8006a8c <quorem+0x96>
 8006a80:	9b01      	ldr	r3, [sp, #4]
 8006a82:	3b04      	subs	r3, #4
 8006a84:	429d      	cmp	r5, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	d32f      	bcc.n	8006aea <quorem+0xf4>
 8006a8a:	613c      	str	r4, [r7, #16]
 8006a8c:	4638      	mov	r0, r7
 8006a8e:	f001 f979 	bl	8007d84 <__mcmp>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	db25      	blt.n	8006ae2 <quorem+0xec>
 8006a96:	4629      	mov	r1, r5
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a9e:	f8d1 c000 	ldr.w	ip, [r1]
 8006aa2:	fa1f fe82 	uxth.w	lr, r2
 8006aa6:	fa1f f38c 	uxth.w	r3, ip
 8006aaa:	eba3 030e 	sub.w	r3, r3, lr
 8006aae:	4403      	add	r3, r0
 8006ab0:	0c12      	lsrs	r2, r2, #16
 8006ab2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ab6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ac0:	45c1      	cmp	r9, r8
 8006ac2:	f841 3b04 	str.w	r3, [r1], #4
 8006ac6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006aca:	d2e6      	bcs.n	8006a9a <quorem+0xa4>
 8006acc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ad0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ad4:	b922      	cbnz	r2, 8006ae0 <quorem+0xea>
 8006ad6:	3b04      	subs	r3, #4
 8006ad8:	429d      	cmp	r5, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	d30b      	bcc.n	8006af6 <quorem+0x100>
 8006ade:	613c      	str	r4, [r7, #16]
 8006ae0:	3601      	adds	r6, #1
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	b003      	add	sp, #12
 8006ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	3b04      	subs	r3, #4
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	d1cb      	bne.n	8006a8a <quorem+0x94>
 8006af2:	3c01      	subs	r4, #1
 8006af4:	e7c6      	b.n	8006a84 <quorem+0x8e>
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	3b04      	subs	r3, #4
 8006afa:	2a00      	cmp	r2, #0
 8006afc:	d1ef      	bne.n	8006ade <quorem+0xe8>
 8006afe:	3c01      	subs	r4, #1
 8006b00:	e7ea      	b.n	8006ad8 <quorem+0xe2>
 8006b02:	2000      	movs	r0, #0
 8006b04:	e7ee      	b.n	8006ae4 <quorem+0xee>
	...

08006b08 <_dtoa_r>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	69c7      	ldr	r7, [r0, #28]
 8006b0e:	b099      	sub	sp, #100	@ 0x64
 8006b10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b14:	ec55 4b10 	vmov	r4, r5, d0
 8006b18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006b1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b1c:	4683      	mov	fp, r0
 8006b1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b22:	b97f      	cbnz	r7, 8006b44 <_dtoa_r+0x3c>
 8006b24:	2010      	movs	r0, #16
 8006b26:	f000 fdfd 	bl	8007724 <malloc>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b30:	b920      	cbnz	r0, 8006b3c <_dtoa_r+0x34>
 8006b32:	4ba7      	ldr	r3, [pc, #668]	@ (8006dd0 <_dtoa_r+0x2c8>)
 8006b34:	21ef      	movs	r1, #239	@ 0xef
 8006b36:	48a7      	ldr	r0, [pc, #668]	@ (8006dd4 <_dtoa_r+0x2cc>)
 8006b38:	f001 fc68 	bl	800840c <__assert_func>
 8006b3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b40:	6007      	str	r7, [r0, #0]
 8006b42:	60c7      	str	r7, [r0, #12]
 8006b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b48:	6819      	ldr	r1, [r3, #0]
 8006b4a:	b159      	cbz	r1, 8006b64 <_dtoa_r+0x5c>
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	604a      	str	r2, [r1, #4]
 8006b50:	2301      	movs	r3, #1
 8006b52:	4093      	lsls	r3, r2
 8006b54:	608b      	str	r3, [r1, #8]
 8006b56:	4658      	mov	r0, fp
 8006b58:	f000 feda 	bl	8007910 <_Bfree>
 8006b5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	1e2b      	subs	r3, r5, #0
 8006b66:	bfb9      	ittee	lt
 8006b68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b6c:	9303      	strlt	r3, [sp, #12]
 8006b6e:	2300      	movge	r3, #0
 8006b70:	6033      	strge	r3, [r6, #0]
 8006b72:	9f03      	ldr	r7, [sp, #12]
 8006b74:	4b98      	ldr	r3, [pc, #608]	@ (8006dd8 <_dtoa_r+0x2d0>)
 8006b76:	bfbc      	itt	lt
 8006b78:	2201      	movlt	r2, #1
 8006b7a:	6032      	strlt	r2, [r6, #0]
 8006b7c:	43bb      	bics	r3, r7
 8006b7e:	d112      	bne.n	8006ba6 <_dtoa_r+0x9e>
 8006b80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b8c:	4323      	orrs	r3, r4
 8006b8e:	f000 854d 	beq.w	800762c <_dtoa_r+0xb24>
 8006b92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006dec <_dtoa_r+0x2e4>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 854f 	beq.w	800763c <_dtoa_r+0xb34>
 8006b9e:	f10a 0303 	add.w	r3, sl, #3
 8006ba2:	f000 bd49 	b.w	8007638 <_dtoa_r+0xb30>
 8006ba6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006baa:	2200      	movs	r2, #0
 8006bac:	ec51 0b17 	vmov	r0, r1, d7
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006bb6:	f7f9 ff8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bba:	4680      	mov	r8, r0
 8006bbc:	b158      	cbz	r0, 8006bd6 <_dtoa_r+0xce>
 8006bbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bc6:	b113      	cbz	r3, 8006bce <_dtoa_r+0xc6>
 8006bc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006bca:	4b84      	ldr	r3, [pc, #528]	@ (8006ddc <_dtoa_r+0x2d4>)
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006df0 <_dtoa_r+0x2e8>
 8006bd2:	f000 bd33 	b.w	800763c <_dtoa_r+0xb34>
 8006bd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006bda:	aa16      	add	r2, sp, #88	@ 0x58
 8006bdc:	a917      	add	r1, sp, #92	@ 0x5c
 8006bde:	4658      	mov	r0, fp
 8006be0:	f001 f980 	bl	8007ee4 <__d2b>
 8006be4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006be8:	4681      	mov	r9, r0
 8006bea:	2e00      	cmp	r6, #0
 8006bec:	d077      	beq.n	8006cde <_dtoa_r+0x1d6>
 8006bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bf0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c08:	4619      	mov	r1, r3
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	4b74      	ldr	r3, [pc, #464]	@ (8006de0 <_dtoa_r+0x2d8>)
 8006c0e:	f7f9 fb43 	bl	8000298 <__aeabi_dsub>
 8006c12:	a369      	add	r3, pc, #420	@ (adr r3, 8006db8 <_dtoa_r+0x2b0>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 fcf6 	bl	8000608 <__aeabi_dmul>
 8006c1c:	a368      	add	r3, pc, #416	@ (adr r3, 8006dc0 <_dtoa_r+0x2b8>)
 8006c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c22:	f7f9 fb3b 	bl	800029c <__adddf3>
 8006c26:	4604      	mov	r4, r0
 8006c28:	4630      	mov	r0, r6
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	f7f9 fc82 	bl	8000534 <__aeabi_i2d>
 8006c30:	a365      	add	r3, pc, #404	@ (adr r3, 8006dc8 <_dtoa_r+0x2c0>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 fce7 	bl	8000608 <__aeabi_dmul>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 fb2b 	bl	800029c <__adddf3>
 8006c46:	4604      	mov	r4, r0
 8006c48:	460d      	mov	r5, r1
 8006c4a:	f7f9 ff8d 	bl	8000b68 <__aeabi_d2iz>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	4607      	mov	r7, r0
 8006c52:	2300      	movs	r3, #0
 8006c54:	4620      	mov	r0, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	f7f9 ff48 	bl	8000aec <__aeabi_dcmplt>
 8006c5c:	b140      	cbz	r0, 8006c70 <_dtoa_r+0x168>
 8006c5e:	4638      	mov	r0, r7
 8006c60:	f7f9 fc68 	bl	8000534 <__aeabi_i2d>
 8006c64:	4622      	mov	r2, r4
 8006c66:	462b      	mov	r3, r5
 8006c68:	f7f9 ff36 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c6c:	b900      	cbnz	r0, 8006c70 <_dtoa_r+0x168>
 8006c6e:	3f01      	subs	r7, #1
 8006c70:	2f16      	cmp	r7, #22
 8006c72:	d851      	bhi.n	8006d18 <_dtoa_r+0x210>
 8006c74:	4b5b      	ldr	r3, [pc, #364]	@ (8006de4 <_dtoa_r+0x2dc>)
 8006c76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c82:	f7f9 ff33 	bl	8000aec <__aeabi_dcmplt>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d048      	beq.n	8006d1c <_dtoa_r+0x214>
 8006c8a:	3f01      	subs	r7, #1
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c92:	1b9b      	subs	r3, r3, r6
 8006c94:	1e5a      	subs	r2, r3, #1
 8006c96:	bf44      	itt	mi
 8006c98:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c9c:	2300      	movmi	r3, #0
 8006c9e:	9208      	str	r2, [sp, #32]
 8006ca0:	bf54      	ite	pl
 8006ca2:	f04f 0800 	movpl.w	r8, #0
 8006ca6:	9308      	strmi	r3, [sp, #32]
 8006ca8:	2f00      	cmp	r7, #0
 8006caa:	db39      	blt.n	8006d20 <_dtoa_r+0x218>
 8006cac:	9b08      	ldr	r3, [sp, #32]
 8006cae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006cb0:	443b      	add	r3, r7
 8006cb2:	9308      	str	r3, [sp, #32]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cba:	2b09      	cmp	r3, #9
 8006cbc:	d864      	bhi.n	8006d88 <_dtoa_r+0x280>
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	bfc4      	itt	gt
 8006cc2:	3b04      	subgt	r3, #4
 8006cc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc8:	f1a3 0302 	sub.w	r3, r3, #2
 8006ccc:	bfcc      	ite	gt
 8006cce:	2400      	movgt	r4, #0
 8006cd0:	2401      	movle	r4, #1
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d863      	bhi.n	8006d9e <_dtoa_r+0x296>
 8006cd6:	e8df f003 	tbb	[pc, r3]
 8006cda:	372a      	.short	0x372a
 8006cdc:	5535      	.short	0x5535
 8006cde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006ce2:	441e      	add	r6, r3
 8006ce4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	bfc1      	itttt	gt
 8006cec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cf0:	409f      	lslgt	r7, r3
 8006cf2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006cf6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006cfa:	bfd6      	itet	le
 8006cfc:	f1c3 0320 	rsble	r3, r3, #32
 8006d00:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d04:	fa04 f003 	lslle.w	r0, r4, r3
 8006d08:	f7f9 fc04 	bl	8000514 <__aeabi_ui2d>
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d12:	3e01      	subs	r6, #1
 8006d14:	9214      	str	r2, [sp, #80]	@ 0x50
 8006d16:	e777      	b.n	8006c08 <_dtoa_r+0x100>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e7b8      	b.n	8006c8e <_dtoa_r+0x186>
 8006d1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d1e:	e7b7      	b.n	8006c90 <_dtoa_r+0x188>
 8006d20:	427b      	negs	r3, r7
 8006d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d24:	2300      	movs	r3, #0
 8006d26:	eba8 0807 	sub.w	r8, r8, r7
 8006d2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d2c:	e7c4      	b.n	8006cb8 <_dtoa_r+0x1b0>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	dc35      	bgt.n	8006da4 <_dtoa_r+0x29c>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	9307      	str	r3, [sp, #28]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d42:	e00b      	b.n	8006d5c <_dtoa_r+0x254>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e7f3      	b.n	8006d30 <_dtoa_r+0x228>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d4e:	18fb      	adds	r3, r7, r3
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	bfb8      	it	lt
 8006d5a:	2301      	movlt	r3, #1
 8006d5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d60:	2100      	movs	r1, #0
 8006d62:	2204      	movs	r2, #4
 8006d64:	f102 0514 	add.w	r5, r2, #20
 8006d68:	429d      	cmp	r5, r3
 8006d6a:	d91f      	bls.n	8006dac <_dtoa_r+0x2a4>
 8006d6c:	6041      	str	r1, [r0, #4]
 8006d6e:	4658      	mov	r0, fp
 8006d70:	f000 fd8e 	bl	8007890 <_Balloc>
 8006d74:	4682      	mov	sl, r0
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d13c      	bne.n	8006df4 <_dtoa_r+0x2ec>
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006de8 <_dtoa_r+0x2e0>)
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d82:	e6d8      	b.n	8006b36 <_dtoa_r+0x2e>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e7e0      	b.n	8006d4a <_dtoa_r+0x242>
 8006d88:	2401      	movs	r4, #1
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	9307      	str	r3, [sp, #28]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2312      	movs	r3, #18
 8006d9c:	e7d0      	b.n	8006d40 <_dtoa_r+0x238>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006da2:	e7f5      	b.n	8006d90 <_dtoa_r+0x288>
 8006da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	9307      	str	r3, [sp, #28]
 8006daa:	e7d7      	b.n	8006d5c <_dtoa_r+0x254>
 8006dac:	3101      	adds	r1, #1
 8006dae:	0052      	lsls	r2, r2, #1
 8006db0:	e7d8      	b.n	8006d64 <_dtoa_r+0x25c>
 8006db2:	bf00      	nop
 8006db4:	f3af 8000 	nop.w
 8006db8:	636f4361 	.word	0x636f4361
 8006dbc:	3fd287a7 	.word	0x3fd287a7
 8006dc0:	8b60c8b3 	.word	0x8b60c8b3
 8006dc4:	3fc68a28 	.word	0x3fc68a28
 8006dc8:	509f79fb 	.word	0x509f79fb
 8006dcc:	3fd34413 	.word	0x3fd34413
 8006dd0:	08009bdd 	.word	0x08009bdd
 8006dd4:	08009bf4 	.word	0x08009bf4
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	08009bad 	.word	0x08009bad
 8006de0:	3ff80000 	.word	0x3ff80000
 8006de4:	08009cf0 	.word	0x08009cf0
 8006de8:	08009c4c 	.word	0x08009c4c
 8006dec:	08009bd9 	.word	0x08009bd9
 8006df0:	08009bac 	.word	0x08009bac
 8006df4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006df8:	6018      	str	r0, [r3, #0]
 8006dfa:	9b07      	ldr	r3, [sp, #28]
 8006dfc:	2b0e      	cmp	r3, #14
 8006dfe:	f200 80a4 	bhi.w	8006f4a <_dtoa_r+0x442>
 8006e02:	2c00      	cmp	r4, #0
 8006e04:	f000 80a1 	beq.w	8006f4a <_dtoa_r+0x442>
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	dd33      	ble.n	8006e74 <_dtoa_r+0x36c>
 8006e0c:	4bad      	ldr	r3, [pc, #692]	@ (80070c4 <_dtoa_r+0x5bc>)
 8006e0e:	f007 020f 	and.w	r2, r7, #15
 8006e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e16:	ed93 7b00 	vldr	d7, [r3]
 8006e1a:	05f8      	lsls	r0, r7, #23
 8006e1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e24:	d516      	bpl.n	8006e54 <_dtoa_r+0x34c>
 8006e26:	4ba8      	ldr	r3, [pc, #672]	@ (80070c8 <_dtoa_r+0x5c0>)
 8006e28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e30:	f7f9 fd14 	bl	800085c <__aeabi_ddiv>
 8006e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e38:	f004 040f 	and.w	r4, r4, #15
 8006e3c:	2603      	movs	r6, #3
 8006e3e:	4da2      	ldr	r5, [pc, #648]	@ (80070c8 <_dtoa_r+0x5c0>)
 8006e40:	b954      	cbnz	r4, 8006e58 <_dtoa_r+0x350>
 8006e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4a:	f7f9 fd07 	bl	800085c <__aeabi_ddiv>
 8006e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e52:	e028      	b.n	8006ea6 <_dtoa_r+0x39e>
 8006e54:	2602      	movs	r6, #2
 8006e56:	e7f2      	b.n	8006e3e <_dtoa_r+0x336>
 8006e58:	07e1      	lsls	r1, r4, #31
 8006e5a:	d508      	bpl.n	8006e6e <_dtoa_r+0x366>
 8006e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e64:	f7f9 fbd0 	bl	8000608 <__aeabi_dmul>
 8006e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e6c:	3601      	adds	r6, #1
 8006e6e:	1064      	asrs	r4, r4, #1
 8006e70:	3508      	adds	r5, #8
 8006e72:	e7e5      	b.n	8006e40 <_dtoa_r+0x338>
 8006e74:	f000 80d2 	beq.w	800701c <_dtoa_r+0x514>
 8006e78:	427c      	negs	r4, r7
 8006e7a:	4b92      	ldr	r3, [pc, #584]	@ (80070c4 <_dtoa_r+0x5bc>)
 8006e7c:	4d92      	ldr	r5, [pc, #584]	@ (80070c8 <_dtoa_r+0x5c0>)
 8006e7e:	f004 020f 	and.w	r2, r4, #15
 8006e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e8e:	f7f9 fbbb 	bl	8000608 <__aeabi_dmul>
 8006e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e96:	1124      	asrs	r4, r4, #4
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2602      	movs	r6, #2
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	f040 80b2 	bne.w	8007006 <_dtoa_r+0x4fe>
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1d3      	bne.n	8006e4e <_dtoa_r+0x346>
 8006ea6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ea8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80b7 	beq.w	8007020 <_dtoa_r+0x518>
 8006eb2:	4b86      	ldr	r3, [pc, #536]	@ (80070cc <_dtoa_r+0x5c4>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	4629      	mov	r1, r5
 8006eba:	f7f9 fe17 	bl	8000aec <__aeabi_dcmplt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f000 80ae 	beq.w	8007020 <_dtoa_r+0x518>
 8006ec4:	9b07      	ldr	r3, [sp, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80aa 	beq.w	8007020 <_dtoa_r+0x518>
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd37      	ble.n	8006f42 <_dtoa_r+0x43a>
 8006ed2:	1e7b      	subs	r3, r7, #1
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4b7d      	ldr	r3, [pc, #500]	@ (80070d0 <_dtoa_r+0x5c8>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	4629      	mov	r1, r5
 8006ede:	f7f9 fb93 	bl	8000608 <__aeabi_dmul>
 8006ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee6:	9c00      	ldr	r4, [sp, #0]
 8006ee8:	3601      	adds	r6, #1
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7f9 fb22 	bl	8000534 <__aeabi_i2d>
 8006ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ef4:	f7f9 fb88 	bl	8000608 <__aeabi_dmul>
 8006ef8:	4b76      	ldr	r3, [pc, #472]	@ (80070d4 <_dtoa_r+0x5cc>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	f7f9 f9ce 	bl	800029c <__adddf3>
 8006f00:	4605      	mov	r5, r0
 8006f02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	f040 808d 	bne.w	8007026 <_dtoa_r+0x51e>
 8006f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f10:	4b71      	ldr	r3, [pc, #452]	@ (80070d8 <_dtoa_r+0x5d0>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	f7f9 f9c0 	bl	8000298 <__aeabi_dsub>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f20:	462a      	mov	r2, r5
 8006f22:	4633      	mov	r3, r6
 8006f24:	f7f9 fe00 	bl	8000b28 <__aeabi_dcmpgt>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	f040 828b 	bne.w	8007444 <_dtoa_r+0x93c>
 8006f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f32:	462a      	mov	r2, r5
 8006f34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f38:	f7f9 fdd8 	bl	8000aec <__aeabi_dcmplt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f040 8128 	bne.w	8007192 <_dtoa_r+0x68a>
 8006f42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f2c0 815a 	blt.w	8007206 <_dtoa_r+0x6fe>
 8006f52:	2f0e      	cmp	r7, #14
 8006f54:	f300 8157 	bgt.w	8007206 <_dtoa_r+0x6fe>
 8006f58:	4b5a      	ldr	r3, [pc, #360]	@ (80070c4 <_dtoa_r+0x5bc>)
 8006f5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f5e:	ed93 7b00 	vldr	d7, [r3]
 8006f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	ed8d 7b00 	vstr	d7, [sp]
 8006f6a:	da03      	bge.n	8006f74 <_dtoa_r+0x46c>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f340 8101 	ble.w	8007176 <_dtoa_r+0x66e>
 8006f74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f78:	4656      	mov	r6, sl
 8006f7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 fc6b 	bl	800085c <__aeabi_ddiv>
 8006f86:	f7f9 fdef 	bl	8000b68 <__aeabi_d2iz>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	f7f9 fad2 	bl	8000534 <__aeabi_i2d>
 8006f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f94:	f7f9 fb38 	bl	8000608 <__aeabi_dmul>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006fa4:	f7f9 f978 	bl	8000298 <__aeabi_dsub>
 8006fa8:	f806 4b01 	strb.w	r4, [r6], #1
 8006fac:	9d07      	ldr	r5, [sp, #28]
 8006fae:	eba6 040a 	sub.w	r4, r6, sl
 8006fb2:	42a5      	cmp	r5, r4
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	f040 8117 	bne.w	80071ea <_dtoa_r+0x6e2>
 8006fbc:	f7f9 f96e 	bl	800029c <__adddf3>
 8006fc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	f7f9 fdae 	bl	8000b28 <__aeabi_dcmpgt>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	f040 80f9 	bne.w	80071c4 <_dtoa_r+0x6bc>
 8006fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fde:	b118      	cbz	r0, 8006fe8 <_dtoa_r+0x4e0>
 8006fe0:	f018 0f01 	tst.w	r8, #1
 8006fe4:	f040 80ee 	bne.w	80071c4 <_dtoa_r+0x6bc>
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4658      	mov	r0, fp
 8006fec:	f000 fc90 	bl	8007910 <_Bfree>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	7033      	strb	r3, [r6, #0]
 8006ff4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ff6:	3701      	adds	r7, #1
 8006ff8:	601f      	str	r7, [r3, #0]
 8006ffa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 831d 	beq.w	800763c <_dtoa_r+0xb34>
 8007002:	601e      	str	r6, [r3, #0]
 8007004:	e31a      	b.n	800763c <_dtoa_r+0xb34>
 8007006:	07e2      	lsls	r2, r4, #31
 8007008:	d505      	bpl.n	8007016 <_dtoa_r+0x50e>
 800700a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800700e:	f7f9 fafb 	bl	8000608 <__aeabi_dmul>
 8007012:	3601      	adds	r6, #1
 8007014:	2301      	movs	r3, #1
 8007016:	1064      	asrs	r4, r4, #1
 8007018:	3508      	adds	r5, #8
 800701a:	e73f      	b.n	8006e9c <_dtoa_r+0x394>
 800701c:	2602      	movs	r6, #2
 800701e:	e742      	b.n	8006ea6 <_dtoa_r+0x39e>
 8007020:	9c07      	ldr	r4, [sp, #28]
 8007022:	9704      	str	r7, [sp, #16]
 8007024:	e761      	b.n	8006eea <_dtoa_r+0x3e2>
 8007026:	4b27      	ldr	r3, [pc, #156]	@ (80070c4 <_dtoa_r+0x5bc>)
 8007028:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800702a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800702e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007032:	4454      	add	r4, sl
 8007034:	2900      	cmp	r1, #0
 8007036:	d053      	beq.n	80070e0 <_dtoa_r+0x5d8>
 8007038:	4928      	ldr	r1, [pc, #160]	@ (80070dc <_dtoa_r+0x5d4>)
 800703a:	2000      	movs	r0, #0
 800703c:	f7f9 fc0e 	bl	800085c <__aeabi_ddiv>
 8007040:	4633      	mov	r3, r6
 8007042:	462a      	mov	r2, r5
 8007044:	f7f9 f928 	bl	8000298 <__aeabi_dsub>
 8007048:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800704c:	4656      	mov	r6, sl
 800704e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007052:	f7f9 fd89 	bl	8000b68 <__aeabi_d2iz>
 8007056:	4605      	mov	r5, r0
 8007058:	f7f9 fa6c 	bl	8000534 <__aeabi_i2d>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007064:	f7f9 f918 	bl	8000298 <__aeabi_dsub>
 8007068:	3530      	adds	r5, #48	@ 0x30
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007072:	f806 5b01 	strb.w	r5, [r6], #1
 8007076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800707a:	f7f9 fd37 	bl	8000aec <__aeabi_dcmplt>
 800707e:	2800      	cmp	r0, #0
 8007080:	d171      	bne.n	8007166 <_dtoa_r+0x65e>
 8007082:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007086:	4911      	ldr	r1, [pc, #68]	@ (80070cc <_dtoa_r+0x5c4>)
 8007088:	2000      	movs	r0, #0
 800708a:	f7f9 f905 	bl	8000298 <__aeabi_dsub>
 800708e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007092:	f7f9 fd2b 	bl	8000aec <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	f040 8095 	bne.w	80071c6 <_dtoa_r+0x6be>
 800709c:	42a6      	cmp	r6, r4
 800709e:	f43f af50 	beq.w	8006f42 <_dtoa_r+0x43a>
 80070a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070a6:	4b0a      	ldr	r3, [pc, #40]	@ (80070d0 <_dtoa_r+0x5c8>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	f7f9 faad 	bl	8000608 <__aeabi_dmul>
 80070ae:	4b08      	ldr	r3, [pc, #32]	@ (80070d0 <_dtoa_r+0x5c8>)
 80070b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070b4:	2200      	movs	r2, #0
 80070b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ba:	f7f9 faa5 	bl	8000608 <__aeabi_dmul>
 80070be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c2:	e7c4      	b.n	800704e <_dtoa_r+0x546>
 80070c4:	08009cf0 	.word	0x08009cf0
 80070c8:	08009cc8 	.word	0x08009cc8
 80070cc:	3ff00000 	.word	0x3ff00000
 80070d0:	40240000 	.word	0x40240000
 80070d4:	401c0000 	.word	0x401c0000
 80070d8:	40140000 	.word	0x40140000
 80070dc:	3fe00000 	.word	0x3fe00000
 80070e0:	4631      	mov	r1, r6
 80070e2:	4628      	mov	r0, r5
 80070e4:	f7f9 fa90 	bl	8000608 <__aeabi_dmul>
 80070e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80070ee:	4656      	mov	r6, sl
 80070f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070f4:	f7f9 fd38 	bl	8000b68 <__aeabi_d2iz>
 80070f8:	4605      	mov	r5, r0
 80070fa:	f7f9 fa1b 	bl	8000534 <__aeabi_i2d>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007106:	f7f9 f8c7 	bl	8000298 <__aeabi_dsub>
 800710a:	3530      	adds	r5, #48	@ 0x30
 800710c:	f806 5b01 	strb.w	r5, [r6], #1
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	42a6      	cmp	r6, r4
 8007116:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800711a:	f04f 0200 	mov.w	r2, #0
 800711e:	d124      	bne.n	800716a <_dtoa_r+0x662>
 8007120:	4bac      	ldr	r3, [pc, #688]	@ (80073d4 <_dtoa_r+0x8cc>)
 8007122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007126:	f7f9 f8b9 	bl	800029c <__adddf3>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007132:	f7f9 fcf9 	bl	8000b28 <__aeabi_dcmpgt>
 8007136:	2800      	cmp	r0, #0
 8007138:	d145      	bne.n	80071c6 <_dtoa_r+0x6be>
 800713a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800713e:	49a5      	ldr	r1, [pc, #660]	@ (80073d4 <_dtoa_r+0x8cc>)
 8007140:	2000      	movs	r0, #0
 8007142:	f7f9 f8a9 	bl	8000298 <__aeabi_dsub>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800714e:	f7f9 fccd 	bl	8000aec <__aeabi_dcmplt>
 8007152:	2800      	cmp	r0, #0
 8007154:	f43f aef5 	beq.w	8006f42 <_dtoa_r+0x43a>
 8007158:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800715a:	1e73      	subs	r3, r6, #1
 800715c:	9315      	str	r3, [sp, #84]	@ 0x54
 800715e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007162:	2b30      	cmp	r3, #48	@ 0x30
 8007164:	d0f8      	beq.n	8007158 <_dtoa_r+0x650>
 8007166:	9f04      	ldr	r7, [sp, #16]
 8007168:	e73e      	b.n	8006fe8 <_dtoa_r+0x4e0>
 800716a:	4b9b      	ldr	r3, [pc, #620]	@ (80073d8 <_dtoa_r+0x8d0>)
 800716c:	f7f9 fa4c 	bl	8000608 <__aeabi_dmul>
 8007170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007174:	e7bc      	b.n	80070f0 <_dtoa_r+0x5e8>
 8007176:	d10c      	bne.n	8007192 <_dtoa_r+0x68a>
 8007178:	4b98      	ldr	r3, [pc, #608]	@ (80073dc <_dtoa_r+0x8d4>)
 800717a:	2200      	movs	r2, #0
 800717c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007180:	f7f9 fa42 	bl	8000608 <__aeabi_dmul>
 8007184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007188:	f7f9 fcc4 	bl	8000b14 <__aeabi_dcmpge>
 800718c:	2800      	cmp	r0, #0
 800718e:	f000 8157 	beq.w	8007440 <_dtoa_r+0x938>
 8007192:	2400      	movs	r4, #0
 8007194:	4625      	mov	r5, r4
 8007196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007198:	43db      	mvns	r3, r3
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	4656      	mov	r6, sl
 800719e:	2700      	movs	r7, #0
 80071a0:	4621      	mov	r1, r4
 80071a2:	4658      	mov	r0, fp
 80071a4:	f000 fbb4 	bl	8007910 <_Bfree>
 80071a8:	2d00      	cmp	r5, #0
 80071aa:	d0dc      	beq.n	8007166 <_dtoa_r+0x65e>
 80071ac:	b12f      	cbz	r7, 80071ba <_dtoa_r+0x6b2>
 80071ae:	42af      	cmp	r7, r5
 80071b0:	d003      	beq.n	80071ba <_dtoa_r+0x6b2>
 80071b2:	4639      	mov	r1, r7
 80071b4:	4658      	mov	r0, fp
 80071b6:	f000 fbab 	bl	8007910 <_Bfree>
 80071ba:	4629      	mov	r1, r5
 80071bc:	4658      	mov	r0, fp
 80071be:	f000 fba7 	bl	8007910 <_Bfree>
 80071c2:	e7d0      	b.n	8007166 <_dtoa_r+0x65e>
 80071c4:	9704      	str	r7, [sp, #16]
 80071c6:	4633      	mov	r3, r6
 80071c8:	461e      	mov	r6, r3
 80071ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071ce:	2a39      	cmp	r2, #57	@ 0x39
 80071d0:	d107      	bne.n	80071e2 <_dtoa_r+0x6da>
 80071d2:	459a      	cmp	sl, r3
 80071d4:	d1f8      	bne.n	80071c8 <_dtoa_r+0x6c0>
 80071d6:	9a04      	ldr	r2, [sp, #16]
 80071d8:	3201      	adds	r2, #1
 80071da:	9204      	str	r2, [sp, #16]
 80071dc:	2230      	movs	r2, #48	@ 0x30
 80071de:	f88a 2000 	strb.w	r2, [sl]
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	3201      	adds	r2, #1
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	e7bd      	b.n	8007166 <_dtoa_r+0x65e>
 80071ea:	4b7b      	ldr	r3, [pc, #492]	@ (80073d8 <_dtoa_r+0x8d0>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	f7f9 fa0b 	bl	8000608 <__aeabi_dmul>
 80071f2:	2200      	movs	r2, #0
 80071f4:	2300      	movs	r3, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	f7f9 fc6d 	bl	8000ad8 <__aeabi_dcmpeq>
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f aebb 	beq.w	8006f7a <_dtoa_r+0x472>
 8007204:	e6f0      	b.n	8006fe8 <_dtoa_r+0x4e0>
 8007206:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007208:	2a00      	cmp	r2, #0
 800720a:	f000 80db 	beq.w	80073c4 <_dtoa_r+0x8bc>
 800720e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007210:	2a01      	cmp	r2, #1
 8007212:	f300 80bf 	bgt.w	8007394 <_dtoa_r+0x88c>
 8007216:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007218:	2a00      	cmp	r2, #0
 800721a:	f000 80b7 	beq.w	800738c <_dtoa_r+0x884>
 800721e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007222:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007224:	4646      	mov	r6, r8
 8007226:	9a08      	ldr	r2, [sp, #32]
 8007228:	2101      	movs	r1, #1
 800722a:	441a      	add	r2, r3
 800722c:	4658      	mov	r0, fp
 800722e:	4498      	add	r8, r3
 8007230:	9208      	str	r2, [sp, #32]
 8007232:	f000 fc21 	bl	8007a78 <__i2b>
 8007236:	4605      	mov	r5, r0
 8007238:	b15e      	cbz	r6, 8007252 <_dtoa_r+0x74a>
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dd08      	ble.n	8007252 <_dtoa_r+0x74a>
 8007240:	42b3      	cmp	r3, r6
 8007242:	9a08      	ldr	r2, [sp, #32]
 8007244:	bfa8      	it	ge
 8007246:	4633      	movge	r3, r6
 8007248:	eba8 0803 	sub.w	r8, r8, r3
 800724c:	1af6      	subs	r6, r6, r3
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007254:	b1f3      	cbz	r3, 8007294 <_dtoa_r+0x78c>
 8007256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80b7 	beq.w	80073cc <_dtoa_r+0x8c4>
 800725e:	b18c      	cbz	r4, 8007284 <_dtoa_r+0x77c>
 8007260:	4629      	mov	r1, r5
 8007262:	4622      	mov	r2, r4
 8007264:	4658      	mov	r0, fp
 8007266:	f000 fcc7 	bl	8007bf8 <__pow5mult>
 800726a:	464a      	mov	r2, r9
 800726c:	4601      	mov	r1, r0
 800726e:	4605      	mov	r5, r0
 8007270:	4658      	mov	r0, fp
 8007272:	f000 fc17 	bl	8007aa4 <__multiply>
 8007276:	4649      	mov	r1, r9
 8007278:	9004      	str	r0, [sp, #16]
 800727a:	4658      	mov	r0, fp
 800727c:	f000 fb48 	bl	8007910 <_Bfree>
 8007280:	9b04      	ldr	r3, [sp, #16]
 8007282:	4699      	mov	r9, r3
 8007284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007286:	1b1a      	subs	r2, r3, r4
 8007288:	d004      	beq.n	8007294 <_dtoa_r+0x78c>
 800728a:	4649      	mov	r1, r9
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fcb3 	bl	8007bf8 <__pow5mult>
 8007292:	4681      	mov	r9, r0
 8007294:	2101      	movs	r1, #1
 8007296:	4658      	mov	r0, fp
 8007298:	f000 fbee 	bl	8007a78 <__i2b>
 800729c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800729e:	4604      	mov	r4, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 81cf 	beq.w	8007644 <_dtoa_r+0xb3c>
 80072a6:	461a      	mov	r2, r3
 80072a8:	4601      	mov	r1, r0
 80072aa:	4658      	mov	r0, fp
 80072ac:	f000 fca4 	bl	8007bf8 <__pow5mult>
 80072b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	4604      	mov	r4, r0
 80072b6:	f300 8095 	bgt.w	80073e4 <_dtoa_r+0x8dc>
 80072ba:	9b02      	ldr	r3, [sp, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f040 8087 	bne.w	80073d0 <_dtoa_r+0x8c8>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f040 8089 	bne.w	80073e0 <_dtoa_r+0x8d8>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072d4:	0d1b      	lsrs	r3, r3, #20
 80072d6:	051b      	lsls	r3, r3, #20
 80072d8:	b12b      	cbz	r3, 80072e6 <_dtoa_r+0x7de>
 80072da:	9b08      	ldr	r3, [sp, #32]
 80072dc:	3301      	adds	r3, #1
 80072de:	9308      	str	r3, [sp, #32]
 80072e0:	f108 0801 	add.w	r8, r8, #1
 80072e4:	2301      	movs	r3, #1
 80072e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 81b0 	beq.w	8007650 <_dtoa_r+0xb48>
 80072f0:	6923      	ldr	r3, [r4, #16]
 80072f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072f6:	6918      	ldr	r0, [r3, #16]
 80072f8:	f000 fb72 	bl	80079e0 <__hi0bits>
 80072fc:	f1c0 0020 	rsb	r0, r0, #32
 8007300:	9b08      	ldr	r3, [sp, #32]
 8007302:	4418      	add	r0, r3
 8007304:	f010 001f 	ands.w	r0, r0, #31
 8007308:	d077      	beq.n	80073fa <_dtoa_r+0x8f2>
 800730a:	f1c0 0320 	rsb	r3, r0, #32
 800730e:	2b04      	cmp	r3, #4
 8007310:	dd6b      	ble.n	80073ea <_dtoa_r+0x8e2>
 8007312:	9b08      	ldr	r3, [sp, #32]
 8007314:	f1c0 001c 	rsb	r0, r0, #28
 8007318:	4403      	add	r3, r0
 800731a:	4480      	add	r8, r0
 800731c:	4406      	add	r6, r0
 800731e:	9308      	str	r3, [sp, #32]
 8007320:	f1b8 0f00 	cmp.w	r8, #0
 8007324:	dd05      	ble.n	8007332 <_dtoa_r+0x82a>
 8007326:	4649      	mov	r1, r9
 8007328:	4642      	mov	r2, r8
 800732a:	4658      	mov	r0, fp
 800732c:	f000 fcbe 	bl	8007cac <__lshift>
 8007330:	4681      	mov	r9, r0
 8007332:	9b08      	ldr	r3, [sp, #32]
 8007334:	2b00      	cmp	r3, #0
 8007336:	dd05      	ble.n	8007344 <_dtoa_r+0x83c>
 8007338:	4621      	mov	r1, r4
 800733a:	461a      	mov	r2, r3
 800733c:	4658      	mov	r0, fp
 800733e:	f000 fcb5 	bl	8007cac <__lshift>
 8007342:	4604      	mov	r4, r0
 8007344:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007346:	2b00      	cmp	r3, #0
 8007348:	d059      	beq.n	80073fe <_dtoa_r+0x8f6>
 800734a:	4621      	mov	r1, r4
 800734c:	4648      	mov	r0, r9
 800734e:	f000 fd19 	bl	8007d84 <__mcmp>
 8007352:	2800      	cmp	r0, #0
 8007354:	da53      	bge.n	80073fe <_dtoa_r+0x8f6>
 8007356:	1e7b      	subs	r3, r7, #1
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	4649      	mov	r1, r9
 800735c:	2300      	movs	r3, #0
 800735e:	220a      	movs	r2, #10
 8007360:	4658      	mov	r0, fp
 8007362:	f000 faf7 	bl	8007954 <__multadd>
 8007366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007368:	4681      	mov	r9, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8172 	beq.w	8007654 <_dtoa_r+0xb4c>
 8007370:	2300      	movs	r3, #0
 8007372:	4629      	mov	r1, r5
 8007374:	220a      	movs	r2, #10
 8007376:	4658      	mov	r0, fp
 8007378:	f000 faec 	bl	8007954 <__multadd>
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	4605      	mov	r5, r0
 8007382:	dc67      	bgt.n	8007454 <_dtoa_r+0x94c>
 8007384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007386:	2b02      	cmp	r3, #2
 8007388:	dc41      	bgt.n	800740e <_dtoa_r+0x906>
 800738a:	e063      	b.n	8007454 <_dtoa_r+0x94c>
 800738c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800738e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007392:	e746      	b.n	8007222 <_dtoa_r+0x71a>
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	1e5c      	subs	r4, r3, #1
 8007398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800739a:	42a3      	cmp	r3, r4
 800739c:	bfbf      	itttt	lt
 800739e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80073a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80073a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80073a4:	1ae3      	sublt	r3, r4, r3
 80073a6:	bfb4      	ite	lt
 80073a8:	18d2      	addlt	r2, r2, r3
 80073aa:	1b1c      	subge	r4, r3, r4
 80073ac:	9b07      	ldr	r3, [sp, #28]
 80073ae:	bfbc      	itt	lt
 80073b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80073b2:	2400      	movlt	r4, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bfb5      	itete	lt
 80073b8:	eba8 0603 	sublt.w	r6, r8, r3
 80073bc:	9b07      	ldrge	r3, [sp, #28]
 80073be:	2300      	movlt	r3, #0
 80073c0:	4646      	movge	r6, r8
 80073c2:	e730      	b.n	8007226 <_dtoa_r+0x71e>
 80073c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073c8:	4646      	mov	r6, r8
 80073ca:	e735      	b.n	8007238 <_dtoa_r+0x730>
 80073cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073ce:	e75c      	b.n	800728a <_dtoa_r+0x782>
 80073d0:	2300      	movs	r3, #0
 80073d2:	e788      	b.n	80072e6 <_dtoa_r+0x7de>
 80073d4:	3fe00000 	.word	0x3fe00000
 80073d8:	40240000 	.word	0x40240000
 80073dc:	40140000 	.word	0x40140000
 80073e0:	9b02      	ldr	r3, [sp, #8]
 80073e2:	e780      	b.n	80072e6 <_dtoa_r+0x7de>
 80073e4:	2300      	movs	r3, #0
 80073e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073e8:	e782      	b.n	80072f0 <_dtoa_r+0x7e8>
 80073ea:	d099      	beq.n	8007320 <_dtoa_r+0x818>
 80073ec:	9a08      	ldr	r2, [sp, #32]
 80073ee:	331c      	adds	r3, #28
 80073f0:	441a      	add	r2, r3
 80073f2:	4498      	add	r8, r3
 80073f4:	441e      	add	r6, r3
 80073f6:	9208      	str	r2, [sp, #32]
 80073f8:	e792      	b.n	8007320 <_dtoa_r+0x818>
 80073fa:	4603      	mov	r3, r0
 80073fc:	e7f6      	b.n	80073ec <_dtoa_r+0x8e4>
 80073fe:	9b07      	ldr	r3, [sp, #28]
 8007400:	9704      	str	r7, [sp, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	dc20      	bgt.n	8007448 <_dtoa_r+0x940>
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740a:	2b02      	cmp	r3, #2
 800740c:	dd1e      	ble.n	800744c <_dtoa_r+0x944>
 800740e:	9b00      	ldr	r3, [sp, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f47f aec0 	bne.w	8007196 <_dtoa_r+0x68e>
 8007416:	4621      	mov	r1, r4
 8007418:	2205      	movs	r2, #5
 800741a:	4658      	mov	r0, fp
 800741c:	f000 fa9a 	bl	8007954 <__multadd>
 8007420:	4601      	mov	r1, r0
 8007422:	4604      	mov	r4, r0
 8007424:	4648      	mov	r0, r9
 8007426:	f000 fcad 	bl	8007d84 <__mcmp>
 800742a:	2800      	cmp	r0, #0
 800742c:	f77f aeb3 	ble.w	8007196 <_dtoa_r+0x68e>
 8007430:	4656      	mov	r6, sl
 8007432:	2331      	movs	r3, #49	@ 0x31
 8007434:	f806 3b01 	strb.w	r3, [r6], #1
 8007438:	9b04      	ldr	r3, [sp, #16]
 800743a:	3301      	adds	r3, #1
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	e6ae      	b.n	800719e <_dtoa_r+0x696>
 8007440:	9c07      	ldr	r4, [sp, #28]
 8007442:	9704      	str	r7, [sp, #16]
 8007444:	4625      	mov	r5, r4
 8007446:	e7f3      	b.n	8007430 <_dtoa_r+0x928>
 8007448:	9b07      	ldr	r3, [sp, #28]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 8104 	beq.w	800765c <_dtoa_r+0xb54>
 8007454:	2e00      	cmp	r6, #0
 8007456:	dd05      	ble.n	8007464 <_dtoa_r+0x95c>
 8007458:	4629      	mov	r1, r5
 800745a:	4632      	mov	r2, r6
 800745c:	4658      	mov	r0, fp
 800745e:	f000 fc25 	bl	8007cac <__lshift>
 8007462:	4605      	mov	r5, r0
 8007464:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d05a      	beq.n	8007520 <_dtoa_r+0xa18>
 800746a:	6869      	ldr	r1, [r5, #4]
 800746c:	4658      	mov	r0, fp
 800746e:	f000 fa0f 	bl	8007890 <_Balloc>
 8007472:	4606      	mov	r6, r0
 8007474:	b928      	cbnz	r0, 8007482 <_dtoa_r+0x97a>
 8007476:	4b84      	ldr	r3, [pc, #528]	@ (8007688 <_dtoa_r+0xb80>)
 8007478:	4602      	mov	r2, r0
 800747a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800747e:	f7ff bb5a 	b.w	8006b36 <_dtoa_r+0x2e>
 8007482:	692a      	ldr	r2, [r5, #16]
 8007484:	3202      	adds	r2, #2
 8007486:	0092      	lsls	r2, r2, #2
 8007488:	f105 010c 	add.w	r1, r5, #12
 800748c:	300c      	adds	r0, #12
 800748e:	f000 ffaf 	bl	80083f0 <memcpy>
 8007492:	2201      	movs	r2, #1
 8007494:	4631      	mov	r1, r6
 8007496:	4658      	mov	r0, fp
 8007498:	f000 fc08 	bl	8007cac <__lshift>
 800749c:	f10a 0301 	add.w	r3, sl, #1
 80074a0:	9307      	str	r3, [sp, #28]
 80074a2:	9b00      	ldr	r3, [sp, #0]
 80074a4:	4453      	add	r3, sl
 80074a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074a8:	9b02      	ldr	r3, [sp, #8]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	462f      	mov	r7, r5
 80074b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074b2:	4605      	mov	r5, r0
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	4621      	mov	r1, r4
 80074b8:	3b01      	subs	r3, #1
 80074ba:	4648      	mov	r0, r9
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	f7ff fa9a 	bl	80069f6 <quorem>
 80074c2:	4639      	mov	r1, r7
 80074c4:	9002      	str	r0, [sp, #8]
 80074c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074ca:	4648      	mov	r0, r9
 80074cc:	f000 fc5a 	bl	8007d84 <__mcmp>
 80074d0:	462a      	mov	r2, r5
 80074d2:	9008      	str	r0, [sp, #32]
 80074d4:	4621      	mov	r1, r4
 80074d6:	4658      	mov	r0, fp
 80074d8:	f000 fc70 	bl	8007dbc <__mdiff>
 80074dc:	68c2      	ldr	r2, [r0, #12]
 80074de:	4606      	mov	r6, r0
 80074e0:	bb02      	cbnz	r2, 8007524 <_dtoa_r+0xa1c>
 80074e2:	4601      	mov	r1, r0
 80074e4:	4648      	mov	r0, r9
 80074e6:	f000 fc4d 	bl	8007d84 <__mcmp>
 80074ea:	4602      	mov	r2, r0
 80074ec:	4631      	mov	r1, r6
 80074ee:	4658      	mov	r0, fp
 80074f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80074f2:	f000 fa0d 	bl	8007910 <_Bfree>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074fa:	9e07      	ldr	r6, [sp, #28]
 80074fc:	ea43 0102 	orr.w	r1, r3, r2
 8007500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007502:	4319      	orrs	r1, r3
 8007504:	d110      	bne.n	8007528 <_dtoa_r+0xa20>
 8007506:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800750a:	d029      	beq.n	8007560 <_dtoa_r+0xa58>
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	2b00      	cmp	r3, #0
 8007510:	dd02      	ble.n	8007518 <_dtoa_r+0xa10>
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007518:	9b00      	ldr	r3, [sp, #0]
 800751a:	f883 8000 	strb.w	r8, [r3]
 800751e:	e63f      	b.n	80071a0 <_dtoa_r+0x698>
 8007520:	4628      	mov	r0, r5
 8007522:	e7bb      	b.n	800749c <_dtoa_r+0x994>
 8007524:	2201      	movs	r2, #1
 8007526:	e7e1      	b.n	80074ec <_dtoa_r+0x9e4>
 8007528:	9b08      	ldr	r3, [sp, #32]
 800752a:	2b00      	cmp	r3, #0
 800752c:	db04      	blt.n	8007538 <_dtoa_r+0xa30>
 800752e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007530:	430b      	orrs	r3, r1
 8007532:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007534:	430b      	orrs	r3, r1
 8007536:	d120      	bne.n	800757a <_dtoa_r+0xa72>
 8007538:	2a00      	cmp	r2, #0
 800753a:	dded      	ble.n	8007518 <_dtoa_r+0xa10>
 800753c:	4649      	mov	r1, r9
 800753e:	2201      	movs	r2, #1
 8007540:	4658      	mov	r0, fp
 8007542:	f000 fbb3 	bl	8007cac <__lshift>
 8007546:	4621      	mov	r1, r4
 8007548:	4681      	mov	r9, r0
 800754a:	f000 fc1b 	bl	8007d84 <__mcmp>
 800754e:	2800      	cmp	r0, #0
 8007550:	dc03      	bgt.n	800755a <_dtoa_r+0xa52>
 8007552:	d1e1      	bne.n	8007518 <_dtoa_r+0xa10>
 8007554:	f018 0f01 	tst.w	r8, #1
 8007558:	d0de      	beq.n	8007518 <_dtoa_r+0xa10>
 800755a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800755e:	d1d8      	bne.n	8007512 <_dtoa_r+0xa0a>
 8007560:	9a00      	ldr	r2, [sp, #0]
 8007562:	2339      	movs	r3, #57	@ 0x39
 8007564:	7013      	strb	r3, [r2, #0]
 8007566:	4633      	mov	r3, r6
 8007568:	461e      	mov	r6, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007570:	2a39      	cmp	r2, #57	@ 0x39
 8007572:	d052      	beq.n	800761a <_dtoa_r+0xb12>
 8007574:	3201      	adds	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	e612      	b.n	80071a0 <_dtoa_r+0x698>
 800757a:	2a00      	cmp	r2, #0
 800757c:	dd07      	ble.n	800758e <_dtoa_r+0xa86>
 800757e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007582:	d0ed      	beq.n	8007560 <_dtoa_r+0xa58>
 8007584:	9a00      	ldr	r2, [sp, #0]
 8007586:	f108 0301 	add.w	r3, r8, #1
 800758a:	7013      	strb	r3, [r2, #0]
 800758c:	e608      	b.n	80071a0 <_dtoa_r+0x698>
 800758e:	9b07      	ldr	r3, [sp, #28]
 8007590:	9a07      	ldr	r2, [sp, #28]
 8007592:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007598:	4293      	cmp	r3, r2
 800759a:	d028      	beq.n	80075ee <_dtoa_r+0xae6>
 800759c:	4649      	mov	r1, r9
 800759e:	2300      	movs	r3, #0
 80075a0:	220a      	movs	r2, #10
 80075a2:	4658      	mov	r0, fp
 80075a4:	f000 f9d6 	bl	8007954 <__multadd>
 80075a8:	42af      	cmp	r7, r5
 80075aa:	4681      	mov	r9, r0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	f04f 020a 	mov.w	r2, #10
 80075b4:	4639      	mov	r1, r7
 80075b6:	4658      	mov	r0, fp
 80075b8:	d107      	bne.n	80075ca <_dtoa_r+0xac2>
 80075ba:	f000 f9cb 	bl	8007954 <__multadd>
 80075be:	4607      	mov	r7, r0
 80075c0:	4605      	mov	r5, r0
 80075c2:	9b07      	ldr	r3, [sp, #28]
 80075c4:	3301      	adds	r3, #1
 80075c6:	9307      	str	r3, [sp, #28]
 80075c8:	e774      	b.n	80074b4 <_dtoa_r+0x9ac>
 80075ca:	f000 f9c3 	bl	8007954 <__multadd>
 80075ce:	4629      	mov	r1, r5
 80075d0:	4607      	mov	r7, r0
 80075d2:	2300      	movs	r3, #0
 80075d4:	220a      	movs	r2, #10
 80075d6:	4658      	mov	r0, fp
 80075d8:	f000 f9bc 	bl	8007954 <__multadd>
 80075dc:	4605      	mov	r5, r0
 80075de:	e7f0      	b.n	80075c2 <_dtoa_r+0xaba>
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfcc      	ite	gt
 80075e6:	461e      	movgt	r6, r3
 80075e8:	2601      	movle	r6, #1
 80075ea:	4456      	add	r6, sl
 80075ec:	2700      	movs	r7, #0
 80075ee:	4649      	mov	r1, r9
 80075f0:	2201      	movs	r2, #1
 80075f2:	4658      	mov	r0, fp
 80075f4:	f000 fb5a 	bl	8007cac <__lshift>
 80075f8:	4621      	mov	r1, r4
 80075fa:	4681      	mov	r9, r0
 80075fc:	f000 fbc2 	bl	8007d84 <__mcmp>
 8007600:	2800      	cmp	r0, #0
 8007602:	dcb0      	bgt.n	8007566 <_dtoa_r+0xa5e>
 8007604:	d102      	bne.n	800760c <_dtoa_r+0xb04>
 8007606:	f018 0f01 	tst.w	r8, #1
 800760a:	d1ac      	bne.n	8007566 <_dtoa_r+0xa5e>
 800760c:	4633      	mov	r3, r6
 800760e:	461e      	mov	r6, r3
 8007610:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007614:	2a30      	cmp	r2, #48	@ 0x30
 8007616:	d0fa      	beq.n	800760e <_dtoa_r+0xb06>
 8007618:	e5c2      	b.n	80071a0 <_dtoa_r+0x698>
 800761a:	459a      	cmp	sl, r3
 800761c:	d1a4      	bne.n	8007568 <_dtoa_r+0xa60>
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	3301      	adds	r3, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	2331      	movs	r3, #49	@ 0x31
 8007626:	f88a 3000 	strb.w	r3, [sl]
 800762a:	e5b9      	b.n	80071a0 <_dtoa_r+0x698>
 800762c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800762e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800768c <_dtoa_r+0xb84>
 8007632:	b11b      	cbz	r3, 800763c <_dtoa_r+0xb34>
 8007634:	f10a 0308 	add.w	r3, sl, #8
 8007638:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4650      	mov	r0, sl
 800763e:	b019      	add	sp, #100	@ 0x64
 8007640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007646:	2b01      	cmp	r3, #1
 8007648:	f77f ae37 	ble.w	80072ba <_dtoa_r+0x7b2>
 800764c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800764e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007650:	2001      	movs	r0, #1
 8007652:	e655      	b.n	8007300 <_dtoa_r+0x7f8>
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f77f aed6 	ble.w	8007408 <_dtoa_r+0x900>
 800765c:	4656      	mov	r6, sl
 800765e:	4621      	mov	r1, r4
 8007660:	4648      	mov	r0, r9
 8007662:	f7ff f9c8 	bl	80069f6 <quorem>
 8007666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800766a:	f806 8b01 	strb.w	r8, [r6], #1
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	eba6 020a 	sub.w	r2, r6, sl
 8007674:	4293      	cmp	r3, r2
 8007676:	ddb3      	ble.n	80075e0 <_dtoa_r+0xad8>
 8007678:	4649      	mov	r1, r9
 800767a:	2300      	movs	r3, #0
 800767c:	220a      	movs	r2, #10
 800767e:	4658      	mov	r0, fp
 8007680:	f000 f968 	bl	8007954 <__multadd>
 8007684:	4681      	mov	r9, r0
 8007686:	e7ea      	b.n	800765e <_dtoa_r+0xb56>
 8007688:	08009c4c 	.word	0x08009c4c
 800768c:	08009bd0 	.word	0x08009bd0

08007690 <_free_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4605      	mov	r5, r0
 8007694:	2900      	cmp	r1, #0
 8007696:	d041      	beq.n	800771c <_free_r+0x8c>
 8007698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769c:	1f0c      	subs	r4, r1, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfb8      	it	lt
 80076a2:	18e4      	addlt	r4, r4, r3
 80076a4:	f000 f8e8 	bl	8007878 <__malloc_lock>
 80076a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007720 <_free_r+0x90>)
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	b933      	cbnz	r3, 80076bc <_free_r+0x2c>
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	6014      	str	r4, [r2, #0]
 80076b2:	4628      	mov	r0, r5
 80076b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076b8:	f000 b8e4 	b.w	8007884 <__malloc_unlock>
 80076bc:	42a3      	cmp	r3, r4
 80076be:	d908      	bls.n	80076d2 <_free_r+0x42>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	1821      	adds	r1, r4, r0
 80076c4:	428b      	cmp	r3, r1
 80076c6:	bf01      	itttt	eq
 80076c8:	6819      	ldreq	r1, [r3, #0]
 80076ca:	685b      	ldreq	r3, [r3, #4]
 80076cc:	1809      	addeq	r1, r1, r0
 80076ce:	6021      	streq	r1, [r4, #0]
 80076d0:	e7ed      	b.n	80076ae <_free_r+0x1e>
 80076d2:	461a      	mov	r2, r3
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b10b      	cbz	r3, 80076dc <_free_r+0x4c>
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d9fa      	bls.n	80076d2 <_free_r+0x42>
 80076dc:	6811      	ldr	r1, [r2, #0]
 80076de:	1850      	adds	r0, r2, r1
 80076e0:	42a0      	cmp	r0, r4
 80076e2:	d10b      	bne.n	80076fc <_free_r+0x6c>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	4401      	add	r1, r0
 80076e8:	1850      	adds	r0, r2, r1
 80076ea:	4283      	cmp	r3, r0
 80076ec:	6011      	str	r1, [r2, #0]
 80076ee:	d1e0      	bne.n	80076b2 <_free_r+0x22>
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	6053      	str	r3, [r2, #4]
 80076f6:	4408      	add	r0, r1
 80076f8:	6010      	str	r0, [r2, #0]
 80076fa:	e7da      	b.n	80076b2 <_free_r+0x22>
 80076fc:	d902      	bls.n	8007704 <_free_r+0x74>
 80076fe:	230c      	movs	r3, #12
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	e7d6      	b.n	80076b2 <_free_r+0x22>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	1821      	adds	r1, r4, r0
 8007708:	428b      	cmp	r3, r1
 800770a:	bf04      	itt	eq
 800770c:	6819      	ldreq	r1, [r3, #0]
 800770e:	685b      	ldreq	r3, [r3, #4]
 8007710:	6063      	str	r3, [r4, #4]
 8007712:	bf04      	itt	eq
 8007714:	1809      	addeq	r1, r1, r0
 8007716:	6021      	streq	r1, [r4, #0]
 8007718:	6054      	str	r4, [r2, #4]
 800771a:	e7ca      	b.n	80076b2 <_free_r+0x22>
 800771c:	bd38      	pop	{r3, r4, r5, pc}
 800771e:	bf00      	nop
 8007720:	200004bc 	.word	0x200004bc

08007724 <malloc>:
 8007724:	4b02      	ldr	r3, [pc, #8]	@ (8007730 <malloc+0xc>)
 8007726:	4601      	mov	r1, r0
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	f000 b825 	b.w	8007778 <_malloc_r>
 800772e:	bf00      	nop
 8007730:	20000018 	.word	0x20000018

08007734 <sbrk_aligned>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4e0f      	ldr	r6, [pc, #60]	@ (8007774 <sbrk_aligned+0x40>)
 8007738:	460c      	mov	r4, r1
 800773a:	6831      	ldr	r1, [r6, #0]
 800773c:	4605      	mov	r5, r0
 800773e:	b911      	cbnz	r1, 8007746 <sbrk_aligned+0x12>
 8007740:	f000 fe46 	bl	80083d0 <_sbrk_r>
 8007744:	6030      	str	r0, [r6, #0]
 8007746:	4621      	mov	r1, r4
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fe41 	bl	80083d0 <_sbrk_r>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	d103      	bne.n	800775a <sbrk_aligned+0x26>
 8007752:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007756:	4620      	mov	r0, r4
 8007758:	bd70      	pop	{r4, r5, r6, pc}
 800775a:	1cc4      	adds	r4, r0, #3
 800775c:	f024 0403 	bic.w	r4, r4, #3
 8007760:	42a0      	cmp	r0, r4
 8007762:	d0f8      	beq.n	8007756 <sbrk_aligned+0x22>
 8007764:	1a21      	subs	r1, r4, r0
 8007766:	4628      	mov	r0, r5
 8007768:	f000 fe32 	bl	80083d0 <_sbrk_r>
 800776c:	3001      	adds	r0, #1
 800776e:	d1f2      	bne.n	8007756 <sbrk_aligned+0x22>
 8007770:	e7ef      	b.n	8007752 <sbrk_aligned+0x1e>
 8007772:	bf00      	nop
 8007774:	200004b8 	.word	0x200004b8

08007778 <_malloc_r>:
 8007778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800777c:	1ccd      	adds	r5, r1, #3
 800777e:	f025 0503 	bic.w	r5, r5, #3
 8007782:	3508      	adds	r5, #8
 8007784:	2d0c      	cmp	r5, #12
 8007786:	bf38      	it	cc
 8007788:	250c      	movcc	r5, #12
 800778a:	2d00      	cmp	r5, #0
 800778c:	4606      	mov	r6, r0
 800778e:	db01      	blt.n	8007794 <_malloc_r+0x1c>
 8007790:	42a9      	cmp	r1, r5
 8007792:	d904      	bls.n	800779e <_malloc_r+0x26>
 8007794:	230c      	movs	r3, #12
 8007796:	6033      	str	r3, [r6, #0]
 8007798:	2000      	movs	r0, #0
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007874 <_malloc_r+0xfc>
 80077a2:	f000 f869 	bl	8007878 <__malloc_lock>
 80077a6:	f8d8 3000 	ldr.w	r3, [r8]
 80077aa:	461c      	mov	r4, r3
 80077ac:	bb44      	cbnz	r4, 8007800 <_malloc_r+0x88>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7ff ffbf 	bl	8007734 <sbrk_aligned>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	4604      	mov	r4, r0
 80077ba:	d158      	bne.n	800786e <_malloc_r+0xf6>
 80077bc:	f8d8 4000 	ldr.w	r4, [r8]
 80077c0:	4627      	mov	r7, r4
 80077c2:	2f00      	cmp	r7, #0
 80077c4:	d143      	bne.n	800784e <_malloc_r+0xd6>
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	d04b      	beq.n	8007862 <_malloc_r+0xea>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	4639      	mov	r1, r7
 80077ce:	4630      	mov	r0, r6
 80077d0:	eb04 0903 	add.w	r9, r4, r3
 80077d4:	f000 fdfc 	bl	80083d0 <_sbrk_r>
 80077d8:	4581      	cmp	r9, r0
 80077da:	d142      	bne.n	8007862 <_malloc_r+0xea>
 80077dc:	6821      	ldr	r1, [r4, #0]
 80077de:	1a6d      	subs	r5, r5, r1
 80077e0:	4629      	mov	r1, r5
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7ff ffa6 	bl	8007734 <sbrk_aligned>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d03a      	beq.n	8007862 <_malloc_r+0xea>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	442b      	add	r3, r5
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	f8d8 3000 	ldr.w	r3, [r8]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	bb62      	cbnz	r2, 8007854 <_malloc_r+0xdc>
 80077fa:	f8c8 7000 	str.w	r7, [r8]
 80077fe:	e00f      	b.n	8007820 <_malloc_r+0xa8>
 8007800:	6822      	ldr	r2, [r4, #0]
 8007802:	1b52      	subs	r2, r2, r5
 8007804:	d420      	bmi.n	8007848 <_malloc_r+0xd0>
 8007806:	2a0b      	cmp	r2, #11
 8007808:	d917      	bls.n	800783a <_malloc_r+0xc2>
 800780a:	1961      	adds	r1, r4, r5
 800780c:	42a3      	cmp	r3, r4
 800780e:	6025      	str	r5, [r4, #0]
 8007810:	bf18      	it	ne
 8007812:	6059      	strne	r1, [r3, #4]
 8007814:	6863      	ldr	r3, [r4, #4]
 8007816:	bf08      	it	eq
 8007818:	f8c8 1000 	streq.w	r1, [r8]
 800781c:	5162      	str	r2, [r4, r5]
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	4630      	mov	r0, r6
 8007822:	f000 f82f 	bl	8007884 <__malloc_unlock>
 8007826:	f104 000b 	add.w	r0, r4, #11
 800782a:	1d23      	adds	r3, r4, #4
 800782c:	f020 0007 	bic.w	r0, r0, #7
 8007830:	1ac2      	subs	r2, r0, r3
 8007832:	bf1c      	itt	ne
 8007834:	1a1b      	subne	r3, r3, r0
 8007836:	50a3      	strne	r3, [r4, r2]
 8007838:	e7af      	b.n	800779a <_malloc_r+0x22>
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	42a3      	cmp	r3, r4
 800783e:	bf0c      	ite	eq
 8007840:	f8c8 2000 	streq.w	r2, [r8]
 8007844:	605a      	strne	r2, [r3, #4]
 8007846:	e7eb      	b.n	8007820 <_malloc_r+0xa8>
 8007848:	4623      	mov	r3, r4
 800784a:	6864      	ldr	r4, [r4, #4]
 800784c:	e7ae      	b.n	80077ac <_malloc_r+0x34>
 800784e:	463c      	mov	r4, r7
 8007850:	687f      	ldr	r7, [r7, #4]
 8007852:	e7b6      	b.n	80077c2 <_malloc_r+0x4a>
 8007854:	461a      	mov	r2, r3
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	42a3      	cmp	r3, r4
 800785a:	d1fb      	bne.n	8007854 <_malloc_r+0xdc>
 800785c:	2300      	movs	r3, #0
 800785e:	6053      	str	r3, [r2, #4]
 8007860:	e7de      	b.n	8007820 <_malloc_r+0xa8>
 8007862:	230c      	movs	r3, #12
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	4630      	mov	r0, r6
 8007868:	f000 f80c 	bl	8007884 <__malloc_unlock>
 800786c:	e794      	b.n	8007798 <_malloc_r+0x20>
 800786e:	6005      	str	r5, [r0, #0]
 8007870:	e7d6      	b.n	8007820 <_malloc_r+0xa8>
 8007872:	bf00      	nop
 8007874:	200004bc 	.word	0x200004bc

08007878 <__malloc_lock>:
 8007878:	4801      	ldr	r0, [pc, #4]	@ (8007880 <__malloc_lock+0x8>)
 800787a:	f7ff b8ba 	b.w	80069f2 <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	200004b4 	.word	0x200004b4

08007884 <__malloc_unlock>:
 8007884:	4801      	ldr	r0, [pc, #4]	@ (800788c <__malloc_unlock+0x8>)
 8007886:	f7ff b8b5 	b.w	80069f4 <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	200004b4 	.word	0x200004b4

08007890 <_Balloc>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	69c6      	ldr	r6, [r0, #28]
 8007894:	4604      	mov	r4, r0
 8007896:	460d      	mov	r5, r1
 8007898:	b976      	cbnz	r6, 80078b8 <_Balloc+0x28>
 800789a:	2010      	movs	r0, #16
 800789c:	f7ff ff42 	bl	8007724 <malloc>
 80078a0:	4602      	mov	r2, r0
 80078a2:	61e0      	str	r0, [r4, #28]
 80078a4:	b920      	cbnz	r0, 80078b0 <_Balloc+0x20>
 80078a6:	4b18      	ldr	r3, [pc, #96]	@ (8007908 <_Balloc+0x78>)
 80078a8:	4818      	ldr	r0, [pc, #96]	@ (800790c <_Balloc+0x7c>)
 80078aa:	216b      	movs	r1, #107	@ 0x6b
 80078ac:	f000 fdae 	bl	800840c <__assert_func>
 80078b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078b4:	6006      	str	r6, [r0, #0]
 80078b6:	60c6      	str	r6, [r0, #12]
 80078b8:	69e6      	ldr	r6, [r4, #28]
 80078ba:	68f3      	ldr	r3, [r6, #12]
 80078bc:	b183      	cbz	r3, 80078e0 <_Balloc+0x50>
 80078be:	69e3      	ldr	r3, [r4, #28]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078c6:	b9b8      	cbnz	r0, 80078f8 <_Balloc+0x68>
 80078c8:	2101      	movs	r1, #1
 80078ca:	fa01 f605 	lsl.w	r6, r1, r5
 80078ce:	1d72      	adds	r2, r6, #5
 80078d0:	0092      	lsls	r2, r2, #2
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fdb8 	bl	8008448 <_calloc_r>
 80078d8:	b160      	cbz	r0, 80078f4 <_Balloc+0x64>
 80078da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078de:	e00e      	b.n	80078fe <_Balloc+0x6e>
 80078e0:	2221      	movs	r2, #33	@ 0x21
 80078e2:	2104      	movs	r1, #4
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fdaf 	bl	8008448 <_calloc_r>
 80078ea:	69e3      	ldr	r3, [r4, #28]
 80078ec:	60f0      	str	r0, [r6, #12]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e4      	bne.n	80078be <_Balloc+0x2e>
 80078f4:	2000      	movs	r0, #0
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	6802      	ldr	r2, [r0, #0]
 80078fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078fe:	2300      	movs	r3, #0
 8007900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007904:	e7f7      	b.n	80078f6 <_Balloc+0x66>
 8007906:	bf00      	nop
 8007908:	08009bdd 	.word	0x08009bdd
 800790c:	08009c5d 	.word	0x08009c5d

08007910 <_Bfree>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	69c6      	ldr	r6, [r0, #28]
 8007914:	4605      	mov	r5, r0
 8007916:	460c      	mov	r4, r1
 8007918:	b976      	cbnz	r6, 8007938 <_Bfree+0x28>
 800791a:	2010      	movs	r0, #16
 800791c:	f7ff ff02 	bl	8007724 <malloc>
 8007920:	4602      	mov	r2, r0
 8007922:	61e8      	str	r0, [r5, #28]
 8007924:	b920      	cbnz	r0, 8007930 <_Bfree+0x20>
 8007926:	4b09      	ldr	r3, [pc, #36]	@ (800794c <_Bfree+0x3c>)
 8007928:	4809      	ldr	r0, [pc, #36]	@ (8007950 <_Bfree+0x40>)
 800792a:	218f      	movs	r1, #143	@ 0x8f
 800792c:	f000 fd6e 	bl	800840c <__assert_func>
 8007930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007934:	6006      	str	r6, [r0, #0]
 8007936:	60c6      	str	r6, [r0, #12]
 8007938:	b13c      	cbz	r4, 800794a <_Bfree+0x3a>
 800793a:	69eb      	ldr	r3, [r5, #28]
 800793c:	6862      	ldr	r2, [r4, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007944:	6021      	str	r1, [r4, #0]
 8007946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	08009bdd 	.word	0x08009bdd
 8007950:	08009c5d 	.word	0x08009c5d

08007954 <__multadd>:
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	690d      	ldr	r5, [r1, #16]
 800795a:	4607      	mov	r7, r0
 800795c:	460c      	mov	r4, r1
 800795e:	461e      	mov	r6, r3
 8007960:	f101 0c14 	add.w	ip, r1, #20
 8007964:	2000      	movs	r0, #0
 8007966:	f8dc 3000 	ldr.w	r3, [ip]
 800796a:	b299      	uxth	r1, r3
 800796c:	fb02 6101 	mla	r1, r2, r1, r6
 8007970:	0c1e      	lsrs	r6, r3, #16
 8007972:	0c0b      	lsrs	r3, r1, #16
 8007974:	fb02 3306 	mla	r3, r2, r6, r3
 8007978:	b289      	uxth	r1, r1
 800797a:	3001      	adds	r0, #1
 800797c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007980:	4285      	cmp	r5, r0
 8007982:	f84c 1b04 	str.w	r1, [ip], #4
 8007986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800798a:	dcec      	bgt.n	8007966 <__multadd+0x12>
 800798c:	b30e      	cbz	r6, 80079d2 <__multadd+0x7e>
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	42ab      	cmp	r3, r5
 8007992:	dc19      	bgt.n	80079c8 <__multadd+0x74>
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	4638      	mov	r0, r7
 8007998:	3101      	adds	r1, #1
 800799a:	f7ff ff79 	bl	8007890 <_Balloc>
 800799e:	4680      	mov	r8, r0
 80079a0:	b928      	cbnz	r0, 80079ae <__multadd+0x5a>
 80079a2:	4602      	mov	r2, r0
 80079a4:	4b0c      	ldr	r3, [pc, #48]	@ (80079d8 <__multadd+0x84>)
 80079a6:	480d      	ldr	r0, [pc, #52]	@ (80079dc <__multadd+0x88>)
 80079a8:	21ba      	movs	r1, #186	@ 0xba
 80079aa:	f000 fd2f 	bl	800840c <__assert_func>
 80079ae:	6922      	ldr	r2, [r4, #16]
 80079b0:	3202      	adds	r2, #2
 80079b2:	f104 010c 	add.w	r1, r4, #12
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	300c      	adds	r0, #12
 80079ba:	f000 fd19 	bl	80083f0 <memcpy>
 80079be:	4621      	mov	r1, r4
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ffa5 	bl	8007910 <_Bfree>
 80079c6:	4644      	mov	r4, r8
 80079c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079cc:	3501      	adds	r5, #1
 80079ce:	615e      	str	r6, [r3, #20]
 80079d0:	6125      	str	r5, [r4, #16]
 80079d2:	4620      	mov	r0, r4
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	08009c4c 	.word	0x08009c4c
 80079dc:	08009c5d 	.word	0x08009c5d

080079e0 <__hi0bits>:
 80079e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079e4:	4603      	mov	r3, r0
 80079e6:	bf36      	itet	cc
 80079e8:	0403      	lslcc	r3, r0, #16
 80079ea:	2000      	movcs	r0, #0
 80079ec:	2010      	movcc	r0, #16
 80079ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079f2:	bf3c      	itt	cc
 80079f4:	021b      	lslcc	r3, r3, #8
 80079f6:	3008      	addcc	r0, #8
 80079f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fc:	bf3c      	itt	cc
 80079fe:	011b      	lslcc	r3, r3, #4
 8007a00:	3004      	addcc	r0, #4
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a06:	bf3c      	itt	cc
 8007a08:	009b      	lslcc	r3, r3, #2
 8007a0a:	3002      	addcc	r0, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	db05      	blt.n	8007a1c <__hi0bits+0x3c>
 8007a10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a14:	f100 0001 	add.w	r0, r0, #1
 8007a18:	bf08      	it	eq
 8007a1a:	2020      	moveq	r0, #32
 8007a1c:	4770      	bx	lr

08007a1e <__lo0bits>:
 8007a1e:	6803      	ldr	r3, [r0, #0]
 8007a20:	4602      	mov	r2, r0
 8007a22:	f013 0007 	ands.w	r0, r3, #7
 8007a26:	d00b      	beq.n	8007a40 <__lo0bits+0x22>
 8007a28:	07d9      	lsls	r1, r3, #31
 8007a2a:	d421      	bmi.n	8007a70 <__lo0bits+0x52>
 8007a2c:	0798      	lsls	r0, r3, #30
 8007a2e:	bf49      	itett	mi
 8007a30:	085b      	lsrmi	r3, r3, #1
 8007a32:	089b      	lsrpl	r3, r3, #2
 8007a34:	2001      	movmi	r0, #1
 8007a36:	6013      	strmi	r3, [r2, #0]
 8007a38:	bf5c      	itt	pl
 8007a3a:	6013      	strpl	r3, [r2, #0]
 8007a3c:	2002      	movpl	r0, #2
 8007a3e:	4770      	bx	lr
 8007a40:	b299      	uxth	r1, r3
 8007a42:	b909      	cbnz	r1, 8007a48 <__lo0bits+0x2a>
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	2010      	movs	r0, #16
 8007a48:	b2d9      	uxtb	r1, r3
 8007a4a:	b909      	cbnz	r1, 8007a50 <__lo0bits+0x32>
 8007a4c:	3008      	adds	r0, #8
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	0719      	lsls	r1, r3, #28
 8007a52:	bf04      	itt	eq
 8007a54:	091b      	lsreq	r3, r3, #4
 8007a56:	3004      	addeq	r0, #4
 8007a58:	0799      	lsls	r1, r3, #30
 8007a5a:	bf04      	itt	eq
 8007a5c:	089b      	lsreq	r3, r3, #2
 8007a5e:	3002      	addeq	r0, #2
 8007a60:	07d9      	lsls	r1, r3, #31
 8007a62:	d403      	bmi.n	8007a6c <__lo0bits+0x4e>
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	f100 0001 	add.w	r0, r0, #1
 8007a6a:	d003      	beq.n	8007a74 <__lo0bits+0x56>
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4770      	bx	lr
 8007a70:	2000      	movs	r0, #0
 8007a72:	4770      	bx	lr
 8007a74:	2020      	movs	r0, #32
 8007a76:	4770      	bx	lr

08007a78 <__i2b>:
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	f7ff ff07 	bl	8007890 <_Balloc>
 8007a82:	4602      	mov	r2, r0
 8007a84:	b928      	cbnz	r0, 8007a92 <__i2b+0x1a>
 8007a86:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <__i2b+0x24>)
 8007a88:	4805      	ldr	r0, [pc, #20]	@ (8007aa0 <__i2b+0x28>)
 8007a8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007a8e:	f000 fcbd 	bl	800840c <__assert_func>
 8007a92:	2301      	movs	r3, #1
 8007a94:	6144      	str	r4, [r0, #20]
 8007a96:	6103      	str	r3, [r0, #16]
 8007a98:	bd10      	pop	{r4, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08009c4c 	.word	0x08009c4c
 8007aa0:	08009c5d 	.word	0x08009c5d

08007aa4 <__multiply>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	690a      	ldr	r2, [r1, #16]
 8007aac:	6923      	ldr	r3, [r4, #16]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bfa8      	it	ge
 8007ab2:	4623      	movge	r3, r4
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	bfa4      	itt	ge
 8007ab8:	460c      	movge	r4, r1
 8007aba:	461f      	movge	r7, r3
 8007abc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ac0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ac4:	68a3      	ldr	r3, [r4, #8]
 8007ac6:	6861      	ldr	r1, [r4, #4]
 8007ac8:	eb0a 0609 	add.w	r6, sl, r9
 8007acc:	42b3      	cmp	r3, r6
 8007ace:	b085      	sub	sp, #20
 8007ad0:	bfb8      	it	lt
 8007ad2:	3101      	addlt	r1, #1
 8007ad4:	f7ff fedc 	bl	8007890 <_Balloc>
 8007ad8:	b930      	cbnz	r0, 8007ae8 <__multiply+0x44>
 8007ada:	4602      	mov	r2, r0
 8007adc:	4b44      	ldr	r3, [pc, #272]	@ (8007bf0 <__multiply+0x14c>)
 8007ade:	4845      	ldr	r0, [pc, #276]	@ (8007bf4 <__multiply+0x150>)
 8007ae0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ae4:	f000 fc92 	bl	800840c <__assert_func>
 8007ae8:	f100 0514 	add.w	r5, r0, #20
 8007aec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007af0:	462b      	mov	r3, r5
 8007af2:	2200      	movs	r2, #0
 8007af4:	4543      	cmp	r3, r8
 8007af6:	d321      	bcc.n	8007b3c <__multiply+0x98>
 8007af8:	f107 0114 	add.w	r1, r7, #20
 8007afc:	f104 0214 	add.w	r2, r4, #20
 8007b00:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b04:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b08:	9302      	str	r3, [sp, #8]
 8007b0a:	1b13      	subs	r3, r2, r4
 8007b0c:	3b15      	subs	r3, #21
 8007b0e:	f023 0303 	bic.w	r3, r3, #3
 8007b12:	3304      	adds	r3, #4
 8007b14:	f104 0715 	add.w	r7, r4, #21
 8007b18:	42ba      	cmp	r2, r7
 8007b1a:	bf38      	it	cc
 8007b1c:	2304      	movcc	r3, #4
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	9b02      	ldr	r3, [sp, #8]
 8007b22:	9103      	str	r1, [sp, #12]
 8007b24:	428b      	cmp	r3, r1
 8007b26:	d80c      	bhi.n	8007b42 <__multiply+0x9e>
 8007b28:	2e00      	cmp	r6, #0
 8007b2a:	dd03      	ble.n	8007b34 <__multiply+0x90>
 8007b2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d05b      	beq.n	8007bec <__multiply+0x148>
 8007b34:	6106      	str	r6, [r0, #16]
 8007b36:	b005      	add	sp, #20
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	f843 2b04 	str.w	r2, [r3], #4
 8007b40:	e7d8      	b.n	8007af4 <__multiply+0x50>
 8007b42:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b46:	f1ba 0f00 	cmp.w	sl, #0
 8007b4a:	d024      	beq.n	8007b96 <__multiply+0xf2>
 8007b4c:	f104 0e14 	add.w	lr, r4, #20
 8007b50:	46a9      	mov	r9, r5
 8007b52:	f04f 0c00 	mov.w	ip, #0
 8007b56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b5a:	f8d9 3000 	ldr.w	r3, [r9]
 8007b5e:	fa1f fb87 	uxth.w	fp, r7
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b68:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b6c:	f8d9 7000 	ldr.w	r7, [r9]
 8007b70:	4463      	add	r3, ip
 8007b72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b76:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b84:	4572      	cmp	r2, lr
 8007b86:	f849 3b04 	str.w	r3, [r9], #4
 8007b8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b8e:	d8e2      	bhi.n	8007b56 <__multiply+0xb2>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	f845 c003 	str.w	ip, [r5, r3]
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b9c:	3104      	adds	r1, #4
 8007b9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ba2:	d021      	beq.n	8007be8 <__multiply+0x144>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	f104 0c14 	add.w	ip, r4, #20
 8007baa:	46ae      	mov	lr, r5
 8007bac:	f04f 0a00 	mov.w	sl, #0
 8007bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8007bb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007bb8:	fb09 770b 	mla	r7, r9, fp, r7
 8007bbc:	4457      	add	r7, sl
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bc4:	f84e 3b04 	str.w	r3, [lr], #4
 8007bc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd0:	f8be 3000 	ldrh.w	r3, [lr]
 8007bd4:	fb09 330a 	mla	r3, r9, sl, r3
 8007bd8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007bdc:	4562      	cmp	r2, ip
 8007bde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007be2:	d8e5      	bhi.n	8007bb0 <__multiply+0x10c>
 8007be4:	9f01      	ldr	r7, [sp, #4]
 8007be6:	51eb      	str	r3, [r5, r7]
 8007be8:	3504      	adds	r5, #4
 8007bea:	e799      	b.n	8007b20 <__multiply+0x7c>
 8007bec:	3e01      	subs	r6, #1
 8007bee:	e79b      	b.n	8007b28 <__multiply+0x84>
 8007bf0:	08009c4c 	.word	0x08009c4c
 8007bf4:	08009c5d 	.word	0x08009c5d

08007bf8 <__pow5mult>:
 8007bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bfc:	4615      	mov	r5, r2
 8007bfe:	f012 0203 	ands.w	r2, r2, #3
 8007c02:	4607      	mov	r7, r0
 8007c04:	460e      	mov	r6, r1
 8007c06:	d007      	beq.n	8007c18 <__pow5mult+0x20>
 8007c08:	4c25      	ldr	r4, [pc, #148]	@ (8007ca0 <__pow5mult+0xa8>)
 8007c0a:	3a01      	subs	r2, #1
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c12:	f7ff fe9f 	bl	8007954 <__multadd>
 8007c16:	4606      	mov	r6, r0
 8007c18:	10ad      	asrs	r5, r5, #2
 8007c1a:	d03d      	beq.n	8007c98 <__pow5mult+0xa0>
 8007c1c:	69fc      	ldr	r4, [r7, #28]
 8007c1e:	b97c      	cbnz	r4, 8007c40 <__pow5mult+0x48>
 8007c20:	2010      	movs	r0, #16
 8007c22:	f7ff fd7f 	bl	8007724 <malloc>
 8007c26:	4602      	mov	r2, r0
 8007c28:	61f8      	str	r0, [r7, #28]
 8007c2a:	b928      	cbnz	r0, 8007c38 <__pow5mult+0x40>
 8007c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ca4 <__pow5mult+0xac>)
 8007c2e:	481e      	ldr	r0, [pc, #120]	@ (8007ca8 <__pow5mult+0xb0>)
 8007c30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c34:	f000 fbea 	bl	800840c <__assert_func>
 8007c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c3c:	6004      	str	r4, [r0, #0]
 8007c3e:	60c4      	str	r4, [r0, #12]
 8007c40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c48:	b94c      	cbnz	r4, 8007c5e <__pow5mult+0x66>
 8007c4a:	f240 2171 	movw	r1, #625	@ 0x271
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f7ff ff12 	bl	8007a78 <__i2b>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	6003      	str	r3, [r0, #0]
 8007c5e:	f04f 0900 	mov.w	r9, #0
 8007c62:	07eb      	lsls	r3, r5, #31
 8007c64:	d50a      	bpl.n	8007c7c <__pow5mult+0x84>
 8007c66:	4631      	mov	r1, r6
 8007c68:	4622      	mov	r2, r4
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	f7ff ff1a 	bl	8007aa4 <__multiply>
 8007c70:	4631      	mov	r1, r6
 8007c72:	4680      	mov	r8, r0
 8007c74:	4638      	mov	r0, r7
 8007c76:	f7ff fe4b 	bl	8007910 <_Bfree>
 8007c7a:	4646      	mov	r6, r8
 8007c7c:	106d      	asrs	r5, r5, #1
 8007c7e:	d00b      	beq.n	8007c98 <__pow5mult+0xa0>
 8007c80:	6820      	ldr	r0, [r4, #0]
 8007c82:	b938      	cbnz	r0, 8007c94 <__pow5mult+0x9c>
 8007c84:	4622      	mov	r2, r4
 8007c86:	4621      	mov	r1, r4
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f7ff ff0b 	bl	8007aa4 <__multiply>
 8007c8e:	6020      	str	r0, [r4, #0]
 8007c90:	f8c0 9000 	str.w	r9, [r0]
 8007c94:	4604      	mov	r4, r0
 8007c96:	e7e4      	b.n	8007c62 <__pow5mult+0x6a>
 8007c98:	4630      	mov	r0, r6
 8007c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9e:	bf00      	nop
 8007ca0:	08009cb8 	.word	0x08009cb8
 8007ca4:	08009bdd 	.word	0x08009bdd
 8007ca8:	08009c5d 	.word	0x08009c5d

08007cac <__lshift>:
 8007cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	6849      	ldr	r1, [r1, #4]
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	4691      	mov	r9, r2
 8007cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cc4:	f108 0601 	add.w	r6, r8, #1
 8007cc8:	42b3      	cmp	r3, r6
 8007cca:	db0b      	blt.n	8007ce4 <__lshift+0x38>
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff fddf 	bl	8007890 <_Balloc>
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	b948      	cbnz	r0, 8007cea <__lshift+0x3e>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	4b28      	ldr	r3, [pc, #160]	@ (8007d7c <__lshift+0xd0>)
 8007cda:	4829      	ldr	r0, [pc, #164]	@ (8007d80 <__lshift+0xd4>)
 8007cdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ce0:	f000 fb94 	bl	800840c <__assert_func>
 8007ce4:	3101      	adds	r1, #1
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	e7ee      	b.n	8007cc8 <__lshift+0x1c>
 8007cea:	2300      	movs	r3, #0
 8007cec:	f100 0114 	add.w	r1, r0, #20
 8007cf0:	f100 0210 	add.w	r2, r0, #16
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	4553      	cmp	r3, sl
 8007cf8:	db33      	blt.n	8007d62 <__lshift+0xb6>
 8007cfa:	6920      	ldr	r0, [r4, #16]
 8007cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d00:	f104 0314 	add.w	r3, r4, #20
 8007d04:	f019 091f 	ands.w	r9, r9, #31
 8007d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d10:	d02b      	beq.n	8007d6a <__lshift+0xbe>
 8007d12:	f1c9 0e20 	rsb	lr, r9, #32
 8007d16:	468a      	mov	sl, r1
 8007d18:	2200      	movs	r2, #0
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d20:	4310      	orrs	r0, r2
 8007d22:	f84a 0b04 	str.w	r0, [sl], #4
 8007d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2a:	459c      	cmp	ip, r3
 8007d2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d30:	d8f3      	bhi.n	8007d1a <__lshift+0x6e>
 8007d32:	ebac 0304 	sub.w	r3, ip, r4
 8007d36:	3b15      	subs	r3, #21
 8007d38:	f023 0303 	bic.w	r3, r3, #3
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	f104 0015 	add.w	r0, r4, #21
 8007d42:	4584      	cmp	ip, r0
 8007d44:	bf38      	it	cc
 8007d46:	2304      	movcc	r3, #4
 8007d48:	50ca      	str	r2, [r1, r3]
 8007d4a:	b10a      	cbz	r2, 8007d50 <__lshift+0xa4>
 8007d4c:	f108 0602 	add.w	r6, r8, #2
 8007d50:	3e01      	subs	r6, #1
 8007d52:	4638      	mov	r0, r7
 8007d54:	612e      	str	r6, [r5, #16]
 8007d56:	4621      	mov	r1, r4
 8007d58:	f7ff fdda 	bl	8007910 <_Bfree>
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d66:	3301      	adds	r3, #1
 8007d68:	e7c5      	b.n	8007cf6 <__lshift+0x4a>
 8007d6a:	3904      	subs	r1, #4
 8007d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d74:	459c      	cmp	ip, r3
 8007d76:	d8f9      	bhi.n	8007d6c <__lshift+0xc0>
 8007d78:	e7ea      	b.n	8007d50 <__lshift+0xa4>
 8007d7a:	bf00      	nop
 8007d7c:	08009c4c 	.word	0x08009c4c
 8007d80:	08009c5d 	.word	0x08009c5d

08007d84 <__mcmp>:
 8007d84:	690a      	ldr	r2, [r1, #16]
 8007d86:	4603      	mov	r3, r0
 8007d88:	6900      	ldr	r0, [r0, #16]
 8007d8a:	1a80      	subs	r0, r0, r2
 8007d8c:	b530      	push	{r4, r5, lr}
 8007d8e:	d10e      	bne.n	8007dae <__mcmp+0x2a>
 8007d90:	3314      	adds	r3, #20
 8007d92:	3114      	adds	r1, #20
 8007d94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007da0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007da4:	4295      	cmp	r5, r2
 8007da6:	d003      	beq.n	8007db0 <__mcmp+0x2c>
 8007da8:	d205      	bcs.n	8007db6 <__mcmp+0x32>
 8007daa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dae:	bd30      	pop	{r4, r5, pc}
 8007db0:	42a3      	cmp	r3, r4
 8007db2:	d3f3      	bcc.n	8007d9c <__mcmp+0x18>
 8007db4:	e7fb      	b.n	8007dae <__mcmp+0x2a>
 8007db6:	2001      	movs	r0, #1
 8007db8:	e7f9      	b.n	8007dae <__mcmp+0x2a>
	...

08007dbc <__mdiff>:
 8007dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	4689      	mov	r9, r1
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4648      	mov	r0, r9
 8007dc8:	4614      	mov	r4, r2
 8007dca:	f7ff ffdb 	bl	8007d84 <__mcmp>
 8007dce:	1e05      	subs	r5, r0, #0
 8007dd0:	d112      	bne.n	8007df8 <__mdiff+0x3c>
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff fd5b 	bl	8007890 <_Balloc>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	b928      	cbnz	r0, 8007dea <__mdiff+0x2e>
 8007dde:	4b3f      	ldr	r3, [pc, #252]	@ (8007edc <__mdiff+0x120>)
 8007de0:	f240 2137 	movw	r1, #567	@ 0x237
 8007de4:	483e      	ldr	r0, [pc, #248]	@ (8007ee0 <__mdiff+0x124>)
 8007de6:	f000 fb11 	bl	800840c <__assert_func>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007df0:	4610      	mov	r0, r2
 8007df2:	b003      	add	sp, #12
 8007df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df8:	bfbc      	itt	lt
 8007dfa:	464b      	movlt	r3, r9
 8007dfc:	46a1      	movlt	r9, r4
 8007dfe:	4630      	mov	r0, r6
 8007e00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e04:	bfba      	itte	lt
 8007e06:	461c      	movlt	r4, r3
 8007e08:	2501      	movlt	r5, #1
 8007e0a:	2500      	movge	r5, #0
 8007e0c:	f7ff fd40 	bl	8007890 <_Balloc>
 8007e10:	4602      	mov	r2, r0
 8007e12:	b918      	cbnz	r0, 8007e1c <__mdiff+0x60>
 8007e14:	4b31      	ldr	r3, [pc, #196]	@ (8007edc <__mdiff+0x120>)
 8007e16:	f240 2145 	movw	r1, #581	@ 0x245
 8007e1a:	e7e3      	b.n	8007de4 <__mdiff+0x28>
 8007e1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e20:	6926      	ldr	r6, [r4, #16]
 8007e22:	60c5      	str	r5, [r0, #12]
 8007e24:	f109 0310 	add.w	r3, r9, #16
 8007e28:	f109 0514 	add.w	r5, r9, #20
 8007e2c:	f104 0e14 	add.w	lr, r4, #20
 8007e30:	f100 0b14 	add.w	fp, r0, #20
 8007e34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	46d9      	mov	r9, fp
 8007e40:	f04f 0c00 	mov.w	ip, #0
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e4e:	9301      	str	r3, [sp, #4]
 8007e50:	fa1f f38a 	uxth.w	r3, sl
 8007e54:	4619      	mov	r1, r3
 8007e56:	b283      	uxth	r3, r0
 8007e58:	1acb      	subs	r3, r1, r3
 8007e5a:	0c00      	lsrs	r0, r0, #16
 8007e5c:	4463      	add	r3, ip
 8007e5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e6c:	4576      	cmp	r6, lr
 8007e6e:	f849 3b04 	str.w	r3, [r9], #4
 8007e72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e76:	d8e5      	bhi.n	8007e44 <__mdiff+0x88>
 8007e78:	1b33      	subs	r3, r6, r4
 8007e7a:	3b15      	subs	r3, #21
 8007e7c:	f023 0303 	bic.w	r3, r3, #3
 8007e80:	3415      	adds	r4, #21
 8007e82:	3304      	adds	r3, #4
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	bf38      	it	cc
 8007e88:	2304      	movcc	r3, #4
 8007e8a:	441d      	add	r5, r3
 8007e8c:	445b      	add	r3, fp
 8007e8e:	461e      	mov	r6, r3
 8007e90:	462c      	mov	r4, r5
 8007e92:	4544      	cmp	r4, r8
 8007e94:	d30e      	bcc.n	8007eb4 <__mdiff+0xf8>
 8007e96:	f108 0103 	add.w	r1, r8, #3
 8007e9a:	1b49      	subs	r1, r1, r5
 8007e9c:	f021 0103 	bic.w	r1, r1, #3
 8007ea0:	3d03      	subs	r5, #3
 8007ea2:	45a8      	cmp	r8, r5
 8007ea4:	bf38      	it	cc
 8007ea6:	2100      	movcc	r1, #0
 8007ea8:	440b      	add	r3, r1
 8007eaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eae:	b191      	cbz	r1, 8007ed6 <__mdiff+0x11a>
 8007eb0:	6117      	str	r7, [r2, #16]
 8007eb2:	e79d      	b.n	8007df0 <__mdiff+0x34>
 8007eb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007eb8:	46e6      	mov	lr, ip
 8007eba:	0c08      	lsrs	r0, r1, #16
 8007ebc:	fa1c fc81 	uxtah	ip, ip, r1
 8007ec0:	4471      	add	r1, lr
 8007ec2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ec6:	b289      	uxth	r1, r1
 8007ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ecc:	f846 1b04 	str.w	r1, [r6], #4
 8007ed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ed4:	e7dd      	b.n	8007e92 <__mdiff+0xd6>
 8007ed6:	3f01      	subs	r7, #1
 8007ed8:	e7e7      	b.n	8007eaa <__mdiff+0xee>
 8007eda:	bf00      	nop
 8007edc:	08009c4c 	.word	0x08009c4c
 8007ee0:	08009c5d 	.word	0x08009c5d

08007ee4 <__d2b>:
 8007ee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ee8:	460f      	mov	r7, r1
 8007eea:	2101      	movs	r1, #1
 8007eec:	ec59 8b10 	vmov	r8, r9, d0
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	f7ff fccd 	bl	8007890 <_Balloc>
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	b930      	cbnz	r0, 8007f08 <__d2b+0x24>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4b23      	ldr	r3, [pc, #140]	@ (8007f8c <__d2b+0xa8>)
 8007efe:	4824      	ldr	r0, [pc, #144]	@ (8007f90 <__d2b+0xac>)
 8007f00:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f04:	f000 fa82 	bl	800840c <__assert_func>
 8007f08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f10:	b10d      	cbz	r5, 8007f16 <__d2b+0x32>
 8007f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	f1b8 0300 	subs.w	r3, r8, #0
 8007f1c:	d023      	beq.n	8007f66 <__d2b+0x82>
 8007f1e:	4668      	mov	r0, sp
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	f7ff fd7c 	bl	8007a1e <__lo0bits>
 8007f26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f2a:	b1d0      	cbz	r0, 8007f62 <__d2b+0x7e>
 8007f2c:	f1c0 0320 	rsb	r3, r0, #32
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	430b      	orrs	r3, r1
 8007f36:	40c2      	lsrs	r2, r0
 8007f38:	6163      	str	r3, [r4, #20]
 8007f3a:	9201      	str	r2, [sp, #4]
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	61a3      	str	r3, [r4, #24]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf0c      	ite	eq
 8007f44:	2201      	moveq	r2, #1
 8007f46:	2202      	movne	r2, #2
 8007f48:	6122      	str	r2, [r4, #16]
 8007f4a:	b1a5      	cbz	r5, 8007f76 <__d2b+0x92>
 8007f4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f50:	4405      	add	r5, r0
 8007f52:	603d      	str	r5, [r7, #0]
 8007f54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f58:	6030      	str	r0, [r6, #0]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	b003      	add	sp, #12
 8007f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f62:	6161      	str	r1, [r4, #20]
 8007f64:	e7ea      	b.n	8007f3c <__d2b+0x58>
 8007f66:	a801      	add	r0, sp, #4
 8007f68:	f7ff fd59 	bl	8007a1e <__lo0bits>
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	6163      	str	r3, [r4, #20]
 8007f70:	3020      	adds	r0, #32
 8007f72:	2201      	movs	r2, #1
 8007f74:	e7e8      	b.n	8007f48 <__d2b+0x64>
 8007f76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f7e:	6038      	str	r0, [r7, #0]
 8007f80:	6918      	ldr	r0, [r3, #16]
 8007f82:	f7ff fd2d 	bl	80079e0 <__hi0bits>
 8007f86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f8a:	e7e5      	b.n	8007f58 <__d2b+0x74>
 8007f8c:	08009c4c 	.word	0x08009c4c
 8007f90:	08009c5d 	.word	0x08009c5d

08007f94 <__ssputs_r>:
 8007f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f98:	688e      	ldr	r6, [r1, #8]
 8007f9a:	461f      	mov	r7, r3
 8007f9c:	42be      	cmp	r6, r7
 8007f9e:	680b      	ldr	r3, [r1, #0]
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	4690      	mov	r8, r2
 8007fa6:	d82d      	bhi.n	8008004 <__ssputs_r+0x70>
 8007fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fb0:	d026      	beq.n	8008000 <__ssputs_r+0x6c>
 8007fb2:	6965      	ldr	r5, [r4, #20]
 8007fb4:	6909      	ldr	r1, [r1, #16]
 8007fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fba:	eba3 0901 	sub.w	r9, r3, r1
 8007fbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fc2:	1c7b      	adds	r3, r7, #1
 8007fc4:	444b      	add	r3, r9
 8007fc6:	106d      	asrs	r5, r5, #1
 8007fc8:	429d      	cmp	r5, r3
 8007fca:	bf38      	it	cc
 8007fcc:	461d      	movcc	r5, r3
 8007fce:	0553      	lsls	r3, r2, #21
 8007fd0:	d527      	bpl.n	8008022 <__ssputs_r+0x8e>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7ff fbd0 	bl	8007778 <_malloc_r>
 8007fd8:	4606      	mov	r6, r0
 8007fda:	b360      	cbz	r0, 8008036 <__ssputs_r+0xa2>
 8007fdc:	6921      	ldr	r1, [r4, #16]
 8007fde:	464a      	mov	r2, r9
 8007fe0:	f000 fa06 	bl	80083f0 <memcpy>
 8007fe4:	89a3      	ldrh	r3, [r4, #12]
 8007fe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fee:	81a3      	strh	r3, [r4, #12]
 8007ff0:	6126      	str	r6, [r4, #16]
 8007ff2:	6165      	str	r5, [r4, #20]
 8007ff4:	444e      	add	r6, r9
 8007ff6:	eba5 0509 	sub.w	r5, r5, r9
 8007ffa:	6026      	str	r6, [r4, #0]
 8007ffc:	60a5      	str	r5, [r4, #8]
 8007ffe:	463e      	mov	r6, r7
 8008000:	42be      	cmp	r6, r7
 8008002:	d900      	bls.n	8008006 <__ssputs_r+0x72>
 8008004:	463e      	mov	r6, r7
 8008006:	6820      	ldr	r0, [r4, #0]
 8008008:	4632      	mov	r2, r6
 800800a:	4641      	mov	r1, r8
 800800c:	f000 f9c6 	bl	800839c <memmove>
 8008010:	68a3      	ldr	r3, [r4, #8]
 8008012:	1b9b      	subs	r3, r3, r6
 8008014:	60a3      	str	r3, [r4, #8]
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	4433      	add	r3, r6
 800801a:	6023      	str	r3, [r4, #0]
 800801c:	2000      	movs	r0, #0
 800801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008022:	462a      	mov	r2, r5
 8008024:	f000 fa36 	bl	8008494 <_realloc_r>
 8008028:	4606      	mov	r6, r0
 800802a:	2800      	cmp	r0, #0
 800802c:	d1e0      	bne.n	8007ff0 <__ssputs_r+0x5c>
 800802e:	6921      	ldr	r1, [r4, #16]
 8008030:	4650      	mov	r0, sl
 8008032:	f7ff fb2d 	bl	8007690 <_free_r>
 8008036:	230c      	movs	r3, #12
 8008038:	f8ca 3000 	str.w	r3, [sl]
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008048:	e7e9      	b.n	800801e <__ssputs_r+0x8a>
	...

0800804c <_svfiprintf_r>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	4698      	mov	r8, r3
 8008052:	898b      	ldrh	r3, [r1, #12]
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	b09d      	sub	sp, #116	@ 0x74
 8008058:	4607      	mov	r7, r0
 800805a:	460d      	mov	r5, r1
 800805c:	4614      	mov	r4, r2
 800805e:	d510      	bpl.n	8008082 <_svfiprintf_r+0x36>
 8008060:	690b      	ldr	r3, [r1, #16]
 8008062:	b973      	cbnz	r3, 8008082 <_svfiprintf_r+0x36>
 8008064:	2140      	movs	r1, #64	@ 0x40
 8008066:	f7ff fb87 	bl	8007778 <_malloc_r>
 800806a:	6028      	str	r0, [r5, #0]
 800806c:	6128      	str	r0, [r5, #16]
 800806e:	b930      	cbnz	r0, 800807e <_svfiprintf_r+0x32>
 8008070:	230c      	movs	r3, #12
 8008072:	603b      	str	r3, [r7, #0]
 8008074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008078:	b01d      	add	sp, #116	@ 0x74
 800807a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807e:	2340      	movs	r3, #64	@ 0x40
 8008080:	616b      	str	r3, [r5, #20]
 8008082:	2300      	movs	r3, #0
 8008084:	9309      	str	r3, [sp, #36]	@ 0x24
 8008086:	2320      	movs	r3, #32
 8008088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800808c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008090:	2330      	movs	r3, #48	@ 0x30
 8008092:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008230 <_svfiprintf_r+0x1e4>
 8008096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800809a:	f04f 0901 	mov.w	r9, #1
 800809e:	4623      	mov	r3, r4
 80080a0:	469a      	mov	sl, r3
 80080a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080a6:	b10a      	cbz	r2, 80080ac <_svfiprintf_r+0x60>
 80080a8:	2a25      	cmp	r2, #37	@ 0x25
 80080aa:	d1f9      	bne.n	80080a0 <_svfiprintf_r+0x54>
 80080ac:	ebba 0b04 	subs.w	fp, sl, r4
 80080b0:	d00b      	beq.n	80080ca <_svfiprintf_r+0x7e>
 80080b2:	465b      	mov	r3, fp
 80080b4:	4622      	mov	r2, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff ff6b 	bl	8007f94 <__ssputs_r>
 80080be:	3001      	adds	r0, #1
 80080c0:	f000 80a7 	beq.w	8008212 <_svfiprintf_r+0x1c6>
 80080c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c6:	445a      	add	r2, fp
 80080c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80080ca:	f89a 3000 	ldrb.w	r3, [sl]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 809f 	beq.w	8008212 <_svfiprintf_r+0x1c6>
 80080d4:	2300      	movs	r3, #0
 80080d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080de:	f10a 0a01 	add.w	sl, sl, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	9307      	str	r3, [sp, #28]
 80080e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80080ec:	4654      	mov	r4, sl
 80080ee:	2205      	movs	r2, #5
 80080f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f4:	484e      	ldr	r0, [pc, #312]	@ (8008230 <_svfiprintf_r+0x1e4>)
 80080f6:	f7f8 f873 	bl	80001e0 <memchr>
 80080fa:	9a04      	ldr	r2, [sp, #16]
 80080fc:	b9d8      	cbnz	r0, 8008136 <_svfiprintf_r+0xea>
 80080fe:	06d0      	lsls	r0, r2, #27
 8008100:	bf44      	itt	mi
 8008102:	2320      	movmi	r3, #32
 8008104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008108:	0711      	lsls	r1, r2, #28
 800810a:	bf44      	itt	mi
 800810c:	232b      	movmi	r3, #43	@ 0x2b
 800810e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008112:	f89a 3000 	ldrb.w	r3, [sl]
 8008116:	2b2a      	cmp	r3, #42	@ 0x2a
 8008118:	d015      	beq.n	8008146 <_svfiprintf_r+0xfa>
 800811a:	9a07      	ldr	r2, [sp, #28]
 800811c:	4654      	mov	r4, sl
 800811e:	2000      	movs	r0, #0
 8008120:	f04f 0c0a 	mov.w	ip, #10
 8008124:	4621      	mov	r1, r4
 8008126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800812a:	3b30      	subs	r3, #48	@ 0x30
 800812c:	2b09      	cmp	r3, #9
 800812e:	d94b      	bls.n	80081c8 <_svfiprintf_r+0x17c>
 8008130:	b1b0      	cbz	r0, 8008160 <_svfiprintf_r+0x114>
 8008132:	9207      	str	r2, [sp, #28]
 8008134:	e014      	b.n	8008160 <_svfiprintf_r+0x114>
 8008136:	eba0 0308 	sub.w	r3, r0, r8
 800813a:	fa09 f303 	lsl.w	r3, r9, r3
 800813e:	4313      	orrs	r3, r2
 8008140:	9304      	str	r3, [sp, #16]
 8008142:	46a2      	mov	sl, r4
 8008144:	e7d2      	b.n	80080ec <_svfiprintf_r+0xa0>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	9103      	str	r1, [sp, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfbb      	ittet	lt
 8008152:	425b      	neglt	r3, r3
 8008154:	f042 0202 	orrlt.w	r2, r2, #2
 8008158:	9307      	strge	r3, [sp, #28]
 800815a:	9307      	strlt	r3, [sp, #28]
 800815c:	bfb8      	it	lt
 800815e:	9204      	strlt	r2, [sp, #16]
 8008160:	7823      	ldrb	r3, [r4, #0]
 8008162:	2b2e      	cmp	r3, #46	@ 0x2e
 8008164:	d10a      	bne.n	800817c <_svfiprintf_r+0x130>
 8008166:	7863      	ldrb	r3, [r4, #1]
 8008168:	2b2a      	cmp	r3, #42	@ 0x2a
 800816a:	d132      	bne.n	80081d2 <_svfiprintf_r+0x186>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	1d1a      	adds	r2, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	9203      	str	r2, [sp, #12]
 8008174:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008178:	3402      	adds	r4, #2
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008240 <_svfiprintf_r+0x1f4>
 8008180:	7821      	ldrb	r1, [r4, #0]
 8008182:	2203      	movs	r2, #3
 8008184:	4650      	mov	r0, sl
 8008186:	f7f8 f82b 	bl	80001e0 <memchr>
 800818a:	b138      	cbz	r0, 800819c <_svfiprintf_r+0x150>
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	eba0 000a 	sub.w	r0, r0, sl
 8008192:	2240      	movs	r2, #64	@ 0x40
 8008194:	4082      	lsls	r2, r0
 8008196:	4313      	orrs	r3, r2
 8008198:	3401      	adds	r4, #1
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a0:	4824      	ldr	r0, [pc, #144]	@ (8008234 <_svfiprintf_r+0x1e8>)
 80081a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081a6:	2206      	movs	r2, #6
 80081a8:	f7f8 f81a 	bl	80001e0 <memchr>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d036      	beq.n	800821e <_svfiprintf_r+0x1d2>
 80081b0:	4b21      	ldr	r3, [pc, #132]	@ (8008238 <_svfiprintf_r+0x1ec>)
 80081b2:	bb1b      	cbnz	r3, 80081fc <_svfiprintf_r+0x1b0>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	3307      	adds	r3, #7
 80081b8:	f023 0307 	bic.w	r3, r3, #7
 80081bc:	3308      	adds	r3, #8
 80081be:	9303      	str	r3, [sp, #12]
 80081c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c2:	4433      	add	r3, r6
 80081c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c6:	e76a      	b.n	800809e <_svfiprintf_r+0x52>
 80081c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80081cc:	460c      	mov	r4, r1
 80081ce:	2001      	movs	r0, #1
 80081d0:	e7a8      	b.n	8008124 <_svfiprintf_r+0xd8>
 80081d2:	2300      	movs	r3, #0
 80081d4:	3401      	adds	r4, #1
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	4619      	mov	r1, r3
 80081da:	f04f 0c0a 	mov.w	ip, #10
 80081de:	4620      	mov	r0, r4
 80081e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081e4:	3a30      	subs	r2, #48	@ 0x30
 80081e6:	2a09      	cmp	r2, #9
 80081e8:	d903      	bls.n	80081f2 <_svfiprintf_r+0x1a6>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0c6      	beq.n	800817c <_svfiprintf_r+0x130>
 80081ee:	9105      	str	r1, [sp, #20]
 80081f0:	e7c4      	b.n	800817c <_svfiprintf_r+0x130>
 80081f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80081f6:	4604      	mov	r4, r0
 80081f8:	2301      	movs	r3, #1
 80081fa:	e7f0      	b.n	80081de <_svfiprintf_r+0x192>
 80081fc:	ab03      	add	r3, sp, #12
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	462a      	mov	r2, r5
 8008202:	4b0e      	ldr	r3, [pc, #56]	@ (800823c <_svfiprintf_r+0x1f0>)
 8008204:	a904      	add	r1, sp, #16
 8008206:	4638      	mov	r0, r7
 8008208:	f7fd fe98 	bl	8005f3c <_printf_float>
 800820c:	1c42      	adds	r2, r0, #1
 800820e:	4606      	mov	r6, r0
 8008210:	d1d6      	bne.n	80081c0 <_svfiprintf_r+0x174>
 8008212:	89ab      	ldrh	r3, [r5, #12]
 8008214:	065b      	lsls	r3, r3, #25
 8008216:	f53f af2d 	bmi.w	8008074 <_svfiprintf_r+0x28>
 800821a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800821c:	e72c      	b.n	8008078 <_svfiprintf_r+0x2c>
 800821e:	ab03      	add	r3, sp, #12
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	462a      	mov	r2, r5
 8008224:	4b05      	ldr	r3, [pc, #20]	@ (800823c <_svfiprintf_r+0x1f0>)
 8008226:	a904      	add	r1, sp, #16
 8008228:	4638      	mov	r0, r7
 800822a:	f7fe f91f 	bl	800646c <_printf_i>
 800822e:	e7ed      	b.n	800820c <_svfiprintf_r+0x1c0>
 8008230:	08009db8 	.word	0x08009db8
 8008234:	08009dc2 	.word	0x08009dc2
 8008238:	08005f3d 	.word	0x08005f3d
 800823c:	08007f95 	.word	0x08007f95
 8008240:	08009dbe 	.word	0x08009dbe

08008244 <__sflush_r>:
 8008244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824c:	0716      	lsls	r6, r2, #28
 800824e:	4605      	mov	r5, r0
 8008250:	460c      	mov	r4, r1
 8008252:	d454      	bmi.n	80082fe <__sflush_r+0xba>
 8008254:	684b      	ldr	r3, [r1, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dc02      	bgt.n	8008260 <__sflush_r+0x1c>
 800825a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	dd48      	ble.n	80082f2 <__sflush_r+0xae>
 8008260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008262:	2e00      	cmp	r6, #0
 8008264:	d045      	beq.n	80082f2 <__sflush_r+0xae>
 8008266:	2300      	movs	r3, #0
 8008268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800826c:	682f      	ldr	r7, [r5, #0]
 800826e:	6a21      	ldr	r1, [r4, #32]
 8008270:	602b      	str	r3, [r5, #0]
 8008272:	d030      	beq.n	80082d6 <__sflush_r+0x92>
 8008274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	0759      	lsls	r1, r3, #29
 800827a:	d505      	bpl.n	8008288 <__sflush_r+0x44>
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	1ad2      	subs	r2, r2, r3
 8008280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008282:	b10b      	cbz	r3, 8008288 <__sflush_r+0x44>
 8008284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008286:	1ad2      	subs	r2, r2, r3
 8008288:	2300      	movs	r3, #0
 800828a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800828c:	6a21      	ldr	r1, [r4, #32]
 800828e:	4628      	mov	r0, r5
 8008290:	47b0      	blx	r6
 8008292:	1c43      	adds	r3, r0, #1
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	d106      	bne.n	80082a6 <__sflush_r+0x62>
 8008298:	6829      	ldr	r1, [r5, #0]
 800829a:	291d      	cmp	r1, #29
 800829c:	d82b      	bhi.n	80082f6 <__sflush_r+0xb2>
 800829e:	4a2a      	ldr	r2, [pc, #168]	@ (8008348 <__sflush_r+0x104>)
 80082a0:	410a      	asrs	r2, r1
 80082a2:	07d6      	lsls	r6, r2, #31
 80082a4:	d427      	bmi.n	80082f6 <__sflush_r+0xb2>
 80082a6:	2200      	movs	r2, #0
 80082a8:	6062      	str	r2, [r4, #4]
 80082aa:	04d9      	lsls	r1, r3, #19
 80082ac:	6922      	ldr	r2, [r4, #16]
 80082ae:	6022      	str	r2, [r4, #0]
 80082b0:	d504      	bpl.n	80082bc <__sflush_r+0x78>
 80082b2:	1c42      	adds	r2, r0, #1
 80082b4:	d101      	bne.n	80082ba <__sflush_r+0x76>
 80082b6:	682b      	ldr	r3, [r5, #0]
 80082b8:	b903      	cbnz	r3, 80082bc <__sflush_r+0x78>
 80082ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80082bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082be:	602f      	str	r7, [r5, #0]
 80082c0:	b1b9      	cbz	r1, 80082f2 <__sflush_r+0xae>
 80082c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082c6:	4299      	cmp	r1, r3
 80082c8:	d002      	beq.n	80082d0 <__sflush_r+0x8c>
 80082ca:	4628      	mov	r0, r5
 80082cc:	f7ff f9e0 	bl	8007690 <_free_r>
 80082d0:	2300      	movs	r3, #0
 80082d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80082d4:	e00d      	b.n	80082f2 <__sflush_r+0xae>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4628      	mov	r0, r5
 80082da:	47b0      	blx	r6
 80082dc:	4602      	mov	r2, r0
 80082de:	1c50      	adds	r0, r2, #1
 80082e0:	d1c9      	bne.n	8008276 <__sflush_r+0x32>
 80082e2:	682b      	ldr	r3, [r5, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0c6      	beq.n	8008276 <__sflush_r+0x32>
 80082e8:	2b1d      	cmp	r3, #29
 80082ea:	d001      	beq.n	80082f0 <__sflush_r+0xac>
 80082ec:	2b16      	cmp	r3, #22
 80082ee:	d11e      	bne.n	800832e <__sflush_r+0xea>
 80082f0:	602f      	str	r7, [r5, #0]
 80082f2:	2000      	movs	r0, #0
 80082f4:	e022      	b.n	800833c <__sflush_r+0xf8>
 80082f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082fa:	b21b      	sxth	r3, r3
 80082fc:	e01b      	b.n	8008336 <__sflush_r+0xf2>
 80082fe:	690f      	ldr	r7, [r1, #16]
 8008300:	2f00      	cmp	r7, #0
 8008302:	d0f6      	beq.n	80082f2 <__sflush_r+0xae>
 8008304:	0793      	lsls	r3, r2, #30
 8008306:	680e      	ldr	r6, [r1, #0]
 8008308:	bf08      	it	eq
 800830a:	694b      	ldreq	r3, [r1, #20]
 800830c:	600f      	str	r7, [r1, #0]
 800830e:	bf18      	it	ne
 8008310:	2300      	movne	r3, #0
 8008312:	eba6 0807 	sub.w	r8, r6, r7
 8008316:	608b      	str	r3, [r1, #8]
 8008318:	f1b8 0f00 	cmp.w	r8, #0
 800831c:	dde9      	ble.n	80082f2 <__sflush_r+0xae>
 800831e:	6a21      	ldr	r1, [r4, #32]
 8008320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008322:	4643      	mov	r3, r8
 8008324:	463a      	mov	r2, r7
 8008326:	4628      	mov	r0, r5
 8008328:	47b0      	blx	r6
 800832a:	2800      	cmp	r0, #0
 800832c:	dc08      	bgt.n	8008340 <__sflush_r+0xfc>
 800832e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800833c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008340:	4407      	add	r7, r0
 8008342:	eba8 0800 	sub.w	r8, r8, r0
 8008346:	e7e7      	b.n	8008318 <__sflush_r+0xd4>
 8008348:	dfbffffe 	.word	0xdfbffffe

0800834c <_fflush_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	690b      	ldr	r3, [r1, #16]
 8008350:	4605      	mov	r5, r0
 8008352:	460c      	mov	r4, r1
 8008354:	b913      	cbnz	r3, 800835c <_fflush_r+0x10>
 8008356:	2500      	movs	r5, #0
 8008358:	4628      	mov	r0, r5
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	b118      	cbz	r0, 8008366 <_fflush_r+0x1a>
 800835e:	6a03      	ldr	r3, [r0, #32]
 8008360:	b90b      	cbnz	r3, 8008366 <_fflush_r+0x1a>
 8008362:	f7fe fa2f 	bl	80067c4 <__sinit>
 8008366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f3      	beq.n	8008356 <_fflush_r+0xa>
 800836e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008370:	07d0      	lsls	r0, r2, #31
 8008372:	d404      	bmi.n	800837e <_fflush_r+0x32>
 8008374:	0599      	lsls	r1, r3, #22
 8008376:	d402      	bmi.n	800837e <_fflush_r+0x32>
 8008378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837a:	f7fe fb3a 	bl	80069f2 <__retarget_lock_acquire_recursive>
 800837e:	4628      	mov	r0, r5
 8008380:	4621      	mov	r1, r4
 8008382:	f7ff ff5f 	bl	8008244 <__sflush_r>
 8008386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008388:	07da      	lsls	r2, r3, #31
 800838a:	4605      	mov	r5, r0
 800838c:	d4e4      	bmi.n	8008358 <_fflush_r+0xc>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	059b      	lsls	r3, r3, #22
 8008392:	d4e1      	bmi.n	8008358 <_fflush_r+0xc>
 8008394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008396:	f7fe fb2d 	bl	80069f4 <__retarget_lock_release_recursive>
 800839a:	e7dd      	b.n	8008358 <_fflush_r+0xc>

0800839c <memmove>:
 800839c:	4288      	cmp	r0, r1
 800839e:	b510      	push	{r4, lr}
 80083a0:	eb01 0402 	add.w	r4, r1, r2
 80083a4:	d902      	bls.n	80083ac <memmove+0x10>
 80083a6:	4284      	cmp	r4, r0
 80083a8:	4623      	mov	r3, r4
 80083aa:	d807      	bhi.n	80083bc <memmove+0x20>
 80083ac:	1e43      	subs	r3, r0, #1
 80083ae:	42a1      	cmp	r1, r4
 80083b0:	d008      	beq.n	80083c4 <memmove+0x28>
 80083b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083ba:	e7f8      	b.n	80083ae <memmove+0x12>
 80083bc:	4402      	add	r2, r0
 80083be:	4601      	mov	r1, r0
 80083c0:	428a      	cmp	r2, r1
 80083c2:	d100      	bne.n	80083c6 <memmove+0x2a>
 80083c4:	bd10      	pop	{r4, pc}
 80083c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ce:	e7f7      	b.n	80083c0 <memmove+0x24>

080083d0 <_sbrk_r>:
 80083d0:	b538      	push	{r3, r4, r5, lr}
 80083d2:	4d06      	ldr	r5, [pc, #24]	@ (80083ec <_sbrk_r+0x1c>)
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	4608      	mov	r0, r1
 80083da:	602b      	str	r3, [r5, #0]
 80083dc:	f7fa f99c 	bl	8002718 <_sbrk>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	d102      	bne.n	80083ea <_sbrk_r+0x1a>
 80083e4:	682b      	ldr	r3, [r5, #0]
 80083e6:	b103      	cbz	r3, 80083ea <_sbrk_r+0x1a>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	200004b0 	.word	0x200004b0

080083f0 <memcpy>:
 80083f0:	440a      	add	r2, r1
 80083f2:	4291      	cmp	r1, r2
 80083f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80083f8:	d100      	bne.n	80083fc <memcpy+0xc>
 80083fa:	4770      	bx	lr
 80083fc:	b510      	push	{r4, lr}
 80083fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008402:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008406:	4291      	cmp	r1, r2
 8008408:	d1f9      	bne.n	80083fe <memcpy+0xe>
 800840a:	bd10      	pop	{r4, pc}

0800840c <__assert_func>:
 800840c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800840e:	4614      	mov	r4, r2
 8008410:	461a      	mov	r2, r3
 8008412:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <__assert_func+0x2c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4605      	mov	r5, r0
 8008418:	68d8      	ldr	r0, [r3, #12]
 800841a:	b954      	cbnz	r4, 8008432 <__assert_func+0x26>
 800841c:	4b07      	ldr	r3, [pc, #28]	@ (800843c <__assert_func+0x30>)
 800841e:	461c      	mov	r4, r3
 8008420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008424:	9100      	str	r1, [sp, #0]
 8008426:	462b      	mov	r3, r5
 8008428:	4905      	ldr	r1, [pc, #20]	@ (8008440 <__assert_func+0x34>)
 800842a:	f000 f86f 	bl	800850c <fiprintf>
 800842e:	f000 f87f 	bl	8008530 <abort>
 8008432:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <__assert_func+0x38>)
 8008434:	e7f4      	b.n	8008420 <__assert_func+0x14>
 8008436:	bf00      	nop
 8008438:	20000018 	.word	0x20000018
 800843c:	08009e0e 	.word	0x08009e0e
 8008440:	08009de0 	.word	0x08009de0
 8008444:	08009dd3 	.word	0x08009dd3

08008448 <_calloc_r>:
 8008448:	b570      	push	{r4, r5, r6, lr}
 800844a:	fba1 5402 	umull	r5, r4, r1, r2
 800844e:	b93c      	cbnz	r4, 8008460 <_calloc_r+0x18>
 8008450:	4629      	mov	r1, r5
 8008452:	f7ff f991 	bl	8007778 <_malloc_r>
 8008456:	4606      	mov	r6, r0
 8008458:	b928      	cbnz	r0, 8008466 <_calloc_r+0x1e>
 800845a:	2600      	movs	r6, #0
 800845c:	4630      	mov	r0, r6
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	220c      	movs	r2, #12
 8008462:	6002      	str	r2, [r0, #0]
 8008464:	e7f9      	b.n	800845a <_calloc_r+0x12>
 8008466:	462a      	mov	r2, r5
 8008468:	4621      	mov	r1, r4
 800846a:	f7fe fa44 	bl	80068f6 <memset>
 800846e:	e7f5      	b.n	800845c <_calloc_r+0x14>

08008470 <__ascii_mbtowc>:
 8008470:	b082      	sub	sp, #8
 8008472:	b901      	cbnz	r1, 8008476 <__ascii_mbtowc+0x6>
 8008474:	a901      	add	r1, sp, #4
 8008476:	b142      	cbz	r2, 800848a <__ascii_mbtowc+0x1a>
 8008478:	b14b      	cbz	r3, 800848e <__ascii_mbtowc+0x1e>
 800847a:	7813      	ldrb	r3, [r2, #0]
 800847c:	600b      	str	r3, [r1, #0]
 800847e:	7812      	ldrb	r2, [r2, #0]
 8008480:	1e10      	subs	r0, r2, #0
 8008482:	bf18      	it	ne
 8008484:	2001      	movne	r0, #1
 8008486:	b002      	add	sp, #8
 8008488:	4770      	bx	lr
 800848a:	4610      	mov	r0, r2
 800848c:	e7fb      	b.n	8008486 <__ascii_mbtowc+0x16>
 800848e:	f06f 0001 	mvn.w	r0, #1
 8008492:	e7f8      	b.n	8008486 <__ascii_mbtowc+0x16>

08008494 <_realloc_r>:
 8008494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008498:	4680      	mov	r8, r0
 800849a:	4615      	mov	r5, r2
 800849c:	460c      	mov	r4, r1
 800849e:	b921      	cbnz	r1, 80084aa <_realloc_r+0x16>
 80084a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084a4:	4611      	mov	r1, r2
 80084a6:	f7ff b967 	b.w	8007778 <_malloc_r>
 80084aa:	b92a      	cbnz	r2, 80084b8 <_realloc_r+0x24>
 80084ac:	f7ff f8f0 	bl	8007690 <_free_r>
 80084b0:	2400      	movs	r4, #0
 80084b2:	4620      	mov	r0, r4
 80084b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084b8:	f000 f841 	bl	800853e <_malloc_usable_size_r>
 80084bc:	4285      	cmp	r5, r0
 80084be:	4606      	mov	r6, r0
 80084c0:	d802      	bhi.n	80084c8 <_realloc_r+0x34>
 80084c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80084c6:	d8f4      	bhi.n	80084b2 <_realloc_r+0x1e>
 80084c8:	4629      	mov	r1, r5
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7ff f954 	bl	8007778 <_malloc_r>
 80084d0:	4607      	mov	r7, r0
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d0ec      	beq.n	80084b0 <_realloc_r+0x1c>
 80084d6:	42b5      	cmp	r5, r6
 80084d8:	462a      	mov	r2, r5
 80084da:	4621      	mov	r1, r4
 80084dc:	bf28      	it	cs
 80084de:	4632      	movcs	r2, r6
 80084e0:	f7ff ff86 	bl	80083f0 <memcpy>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4640      	mov	r0, r8
 80084e8:	f7ff f8d2 	bl	8007690 <_free_r>
 80084ec:	463c      	mov	r4, r7
 80084ee:	e7e0      	b.n	80084b2 <_realloc_r+0x1e>

080084f0 <__ascii_wctomb>:
 80084f0:	4603      	mov	r3, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	b141      	cbz	r1, 8008508 <__ascii_wctomb+0x18>
 80084f6:	2aff      	cmp	r2, #255	@ 0xff
 80084f8:	d904      	bls.n	8008504 <__ascii_wctomb+0x14>
 80084fa:	228a      	movs	r2, #138	@ 0x8a
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008502:	4770      	bx	lr
 8008504:	700a      	strb	r2, [r1, #0]
 8008506:	2001      	movs	r0, #1
 8008508:	4770      	bx	lr
	...

0800850c <fiprintf>:
 800850c:	b40e      	push	{r1, r2, r3}
 800850e:	b503      	push	{r0, r1, lr}
 8008510:	4601      	mov	r1, r0
 8008512:	ab03      	add	r3, sp, #12
 8008514:	4805      	ldr	r0, [pc, #20]	@ (800852c <fiprintf+0x20>)
 8008516:	f853 2b04 	ldr.w	r2, [r3], #4
 800851a:	6800      	ldr	r0, [r0, #0]
 800851c:	9301      	str	r3, [sp, #4]
 800851e:	f000 f83f 	bl	80085a0 <_vfiprintf_r>
 8008522:	b002      	add	sp, #8
 8008524:	f85d eb04 	ldr.w	lr, [sp], #4
 8008528:	b003      	add	sp, #12
 800852a:	4770      	bx	lr
 800852c:	20000018 	.word	0x20000018

08008530 <abort>:
 8008530:	b508      	push	{r3, lr}
 8008532:	2006      	movs	r0, #6
 8008534:	f000 fa08 	bl	8008948 <raise>
 8008538:	2001      	movs	r0, #1
 800853a:	f7fa f874 	bl	8002626 <_exit>

0800853e <_malloc_usable_size_r>:
 800853e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008542:	1f18      	subs	r0, r3, #4
 8008544:	2b00      	cmp	r3, #0
 8008546:	bfbc      	itt	lt
 8008548:	580b      	ldrlt	r3, [r1, r0]
 800854a:	18c0      	addlt	r0, r0, r3
 800854c:	4770      	bx	lr

0800854e <__sfputc_r>:
 800854e:	6893      	ldr	r3, [r2, #8]
 8008550:	3b01      	subs	r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	b410      	push	{r4}
 8008556:	6093      	str	r3, [r2, #8]
 8008558:	da08      	bge.n	800856c <__sfputc_r+0x1e>
 800855a:	6994      	ldr	r4, [r2, #24]
 800855c:	42a3      	cmp	r3, r4
 800855e:	db01      	blt.n	8008564 <__sfputc_r+0x16>
 8008560:	290a      	cmp	r1, #10
 8008562:	d103      	bne.n	800856c <__sfputc_r+0x1e>
 8008564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008568:	f000 b932 	b.w	80087d0 <__swbuf_r>
 800856c:	6813      	ldr	r3, [r2, #0]
 800856e:	1c58      	adds	r0, r3, #1
 8008570:	6010      	str	r0, [r2, #0]
 8008572:	7019      	strb	r1, [r3, #0]
 8008574:	4608      	mov	r0, r1
 8008576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857a:	4770      	bx	lr

0800857c <__sfputs_r>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	4606      	mov	r6, r0
 8008580:	460f      	mov	r7, r1
 8008582:	4614      	mov	r4, r2
 8008584:	18d5      	adds	r5, r2, r3
 8008586:	42ac      	cmp	r4, r5
 8008588:	d101      	bne.n	800858e <__sfputs_r+0x12>
 800858a:	2000      	movs	r0, #0
 800858c:	e007      	b.n	800859e <__sfputs_r+0x22>
 800858e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008592:	463a      	mov	r2, r7
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff ffda 	bl	800854e <__sfputc_r>
 800859a:	1c43      	adds	r3, r0, #1
 800859c:	d1f3      	bne.n	8008586 <__sfputs_r+0xa>
 800859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085a0 <_vfiprintf_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	460d      	mov	r5, r1
 80085a6:	b09d      	sub	sp, #116	@ 0x74
 80085a8:	4614      	mov	r4, r2
 80085aa:	4698      	mov	r8, r3
 80085ac:	4606      	mov	r6, r0
 80085ae:	b118      	cbz	r0, 80085b8 <_vfiprintf_r+0x18>
 80085b0:	6a03      	ldr	r3, [r0, #32]
 80085b2:	b90b      	cbnz	r3, 80085b8 <_vfiprintf_r+0x18>
 80085b4:	f7fe f906 	bl	80067c4 <__sinit>
 80085b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085ba:	07d9      	lsls	r1, r3, #31
 80085bc:	d405      	bmi.n	80085ca <_vfiprintf_r+0x2a>
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	059a      	lsls	r2, r3, #22
 80085c2:	d402      	bmi.n	80085ca <_vfiprintf_r+0x2a>
 80085c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085c6:	f7fe fa14 	bl	80069f2 <__retarget_lock_acquire_recursive>
 80085ca:	89ab      	ldrh	r3, [r5, #12]
 80085cc:	071b      	lsls	r3, r3, #28
 80085ce:	d501      	bpl.n	80085d4 <_vfiprintf_r+0x34>
 80085d0:	692b      	ldr	r3, [r5, #16]
 80085d2:	b99b      	cbnz	r3, 80085fc <_vfiprintf_r+0x5c>
 80085d4:	4629      	mov	r1, r5
 80085d6:	4630      	mov	r0, r6
 80085d8:	f000 f938 	bl	800884c <__swsetup_r>
 80085dc:	b170      	cbz	r0, 80085fc <_vfiprintf_r+0x5c>
 80085de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085e0:	07dc      	lsls	r4, r3, #31
 80085e2:	d504      	bpl.n	80085ee <_vfiprintf_r+0x4e>
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085e8:	b01d      	add	sp, #116	@ 0x74
 80085ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	0598      	lsls	r0, r3, #22
 80085f2:	d4f7      	bmi.n	80085e4 <_vfiprintf_r+0x44>
 80085f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085f6:	f7fe f9fd 	bl	80069f4 <__retarget_lock_release_recursive>
 80085fa:	e7f3      	b.n	80085e4 <_vfiprintf_r+0x44>
 80085fc:	2300      	movs	r3, #0
 80085fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008600:	2320      	movs	r3, #32
 8008602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008606:	f8cd 800c 	str.w	r8, [sp, #12]
 800860a:	2330      	movs	r3, #48	@ 0x30
 800860c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087bc <_vfiprintf_r+0x21c>
 8008610:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008614:	f04f 0901 	mov.w	r9, #1
 8008618:	4623      	mov	r3, r4
 800861a:	469a      	mov	sl, r3
 800861c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008620:	b10a      	cbz	r2, 8008626 <_vfiprintf_r+0x86>
 8008622:	2a25      	cmp	r2, #37	@ 0x25
 8008624:	d1f9      	bne.n	800861a <_vfiprintf_r+0x7a>
 8008626:	ebba 0b04 	subs.w	fp, sl, r4
 800862a:	d00b      	beq.n	8008644 <_vfiprintf_r+0xa4>
 800862c:	465b      	mov	r3, fp
 800862e:	4622      	mov	r2, r4
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f7ff ffa2 	bl	800857c <__sfputs_r>
 8008638:	3001      	adds	r0, #1
 800863a:	f000 80a7 	beq.w	800878c <_vfiprintf_r+0x1ec>
 800863e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008640:	445a      	add	r2, fp
 8008642:	9209      	str	r2, [sp, #36]	@ 0x24
 8008644:	f89a 3000 	ldrb.w	r3, [sl]
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 809f 	beq.w	800878c <_vfiprintf_r+0x1ec>
 800864e:	2300      	movs	r3, #0
 8008650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008658:	f10a 0a01 	add.w	sl, sl, #1
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	9307      	str	r3, [sp, #28]
 8008660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008664:	931a      	str	r3, [sp, #104]	@ 0x68
 8008666:	4654      	mov	r4, sl
 8008668:	2205      	movs	r2, #5
 800866a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866e:	4853      	ldr	r0, [pc, #332]	@ (80087bc <_vfiprintf_r+0x21c>)
 8008670:	f7f7 fdb6 	bl	80001e0 <memchr>
 8008674:	9a04      	ldr	r2, [sp, #16]
 8008676:	b9d8      	cbnz	r0, 80086b0 <_vfiprintf_r+0x110>
 8008678:	06d1      	lsls	r1, r2, #27
 800867a:	bf44      	itt	mi
 800867c:	2320      	movmi	r3, #32
 800867e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008682:	0713      	lsls	r3, r2, #28
 8008684:	bf44      	itt	mi
 8008686:	232b      	movmi	r3, #43	@ 0x2b
 8008688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800868c:	f89a 3000 	ldrb.w	r3, [sl]
 8008690:	2b2a      	cmp	r3, #42	@ 0x2a
 8008692:	d015      	beq.n	80086c0 <_vfiprintf_r+0x120>
 8008694:	9a07      	ldr	r2, [sp, #28]
 8008696:	4654      	mov	r4, sl
 8008698:	2000      	movs	r0, #0
 800869a:	f04f 0c0a 	mov.w	ip, #10
 800869e:	4621      	mov	r1, r4
 80086a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a4:	3b30      	subs	r3, #48	@ 0x30
 80086a6:	2b09      	cmp	r3, #9
 80086a8:	d94b      	bls.n	8008742 <_vfiprintf_r+0x1a2>
 80086aa:	b1b0      	cbz	r0, 80086da <_vfiprintf_r+0x13a>
 80086ac:	9207      	str	r2, [sp, #28]
 80086ae:	e014      	b.n	80086da <_vfiprintf_r+0x13a>
 80086b0:	eba0 0308 	sub.w	r3, r0, r8
 80086b4:	fa09 f303 	lsl.w	r3, r9, r3
 80086b8:	4313      	orrs	r3, r2
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	46a2      	mov	sl, r4
 80086be:	e7d2      	b.n	8008666 <_vfiprintf_r+0xc6>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	1d19      	adds	r1, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9103      	str	r1, [sp, #12]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	bfbb      	ittet	lt
 80086cc:	425b      	neglt	r3, r3
 80086ce:	f042 0202 	orrlt.w	r2, r2, #2
 80086d2:	9307      	strge	r3, [sp, #28]
 80086d4:	9307      	strlt	r3, [sp, #28]
 80086d6:	bfb8      	it	lt
 80086d8:	9204      	strlt	r2, [sp, #16]
 80086da:	7823      	ldrb	r3, [r4, #0]
 80086dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80086de:	d10a      	bne.n	80086f6 <_vfiprintf_r+0x156>
 80086e0:	7863      	ldrb	r3, [r4, #1]
 80086e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086e4:	d132      	bne.n	800874c <_vfiprintf_r+0x1ac>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	1d1a      	adds	r2, r3, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9203      	str	r2, [sp, #12]
 80086ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086f2:	3402      	adds	r4, #2
 80086f4:	9305      	str	r3, [sp, #20]
 80086f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087cc <_vfiprintf_r+0x22c>
 80086fa:	7821      	ldrb	r1, [r4, #0]
 80086fc:	2203      	movs	r2, #3
 80086fe:	4650      	mov	r0, sl
 8008700:	f7f7 fd6e 	bl	80001e0 <memchr>
 8008704:	b138      	cbz	r0, 8008716 <_vfiprintf_r+0x176>
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	eba0 000a 	sub.w	r0, r0, sl
 800870c:	2240      	movs	r2, #64	@ 0x40
 800870e:	4082      	lsls	r2, r0
 8008710:	4313      	orrs	r3, r2
 8008712:	3401      	adds	r4, #1
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871a:	4829      	ldr	r0, [pc, #164]	@ (80087c0 <_vfiprintf_r+0x220>)
 800871c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008720:	2206      	movs	r2, #6
 8008722:	f7f7 fd5d 	bl	80001e0 <memchr>
 8008726:	2800      	cmp	r0, #0
 8008728:	d03f      	beq.n	80087aa <_vfiprintf_r+0x20a>
 800872a:	4b26      	ldr	r3, [pc, #152]	@ (80087c4 <_vfiprintf_r+0x224>)
 800872c:	bb1b      	cbnz	r3, 8008776 <_vfiprintf_r+0x1d6>
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	3307      	adds	r3, #7
 8008732:	f023 0307 	bic.w	r3, r3, #7
 8008736:	3308      	adds	r3, #8
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800873c:	443b      	add	r3, r7
 800873e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008740:	e76a      	b.n	8008618 <_vfiprintf_r+0x78>
 8008742:	fb0c 3202 	mla	r2, ip, r2, r3
 8008746:	460c      	mov	r4, r1
 8008748:	2001      	movs	r0, #1
 800874a:	e7a8      	b.n	800869e <_vfiprintf_r+0xfe>
 800874c:	2300      	movs	r3, #0
 800874e:	3401      	adds	r4, #1
 8008750:	9305      	str	r3, [sp, #20]
 8008752:	4619      	mov	r1, r3
 8008754:	f04f 0c0a 	mov.w	ip, #10
 8008758:	4620      	mov	r0, r4
 800875a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875e:	3a30      	subs	r2, #48	@ 0x30
 8008760:	2a09      	cmp	r2, #9
 8008762:	d903      	bls.n	800876c <_vfiprintf_r+0x1cc>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0c6      	beq.n	80086f6 <_vfiprintf_r+0x156>
 8008768:	9105      	str	r1, [sp, #20]
 800876a:	e7c4      	b.n	80086f6 <_vfiprintf_r+0x156>
 800876c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008770:	4604      	mov	r4, r0
 8008772:	2301      	movs	r3, #1
 8008774:	e7f0      	b.n	8008758 <_vfiprintf_r+0x1b8>
 8008776:	ab03      	add	r3, sp, #12
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	462a      	mov	r2, r5
 800877c:	4b12      	ldr	r3, [pc, #72]	@ (80087c8 <_vfiprintf_r+0x228>)
 800877e:	a904      	add	r1, sp, #16
 8008780:	4630      	mov	r0, r6
 8008782:	f7fd fbdb 	bl	8005f3c <_printf_float>
 8008786:	4607      	mov	r7, r0
 8008788:	1c78      	adds	r0, r7, #1
 800878a:	d1d6      	bne.n	800873a <_vfiprintf_r+0x19a>
 800878c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800878e:	07d9      	lsls	r1, r3, #31
 8008790:	d405      	bmi.n	800879e <_vfiprintf_r+0x1fe>
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	059a      	lsls	r2, r3, #22
 8008796:	d402      	bmi.n	800879e <_vfiprintf_r+0x1fe>
 8008798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800879a:	f7fe f92b 	bl	80069f4 <__retarget_lock_release_recursive>
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	065b      	lsls	r3, r3, #25
 80087a2:	f53f af1f 	bmi.w	80085e4 <_vfiprintf_r+0x44>
 80087a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087a8:	e71e      	b.n	80085e8 <_vfiprintf_r+0x48>
 80087aa:	ab03      	add	r3, sp, #12
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	462a      	mov	r2, r5
 80087b0:	4b05      	ldr	r3, [pc, #20]	@ (80087c8 <_vfiprintf_r+0x228>)
 80087b2:	a904      	add	r1, sp, #16
 80087b4:	4630      	mov	r0, r6
 80087b6:	f7fd fe59 	bl	800646c <_printf_i>
 80087ba:	e7e4      	b.n	8008786 <_vfiprintf_r+0x1e6>
 80087bc:	08009db8 	.word	0x08009db8
 80087c0:	08009dc2 	.word	0x08009dc2
 80087c4:	08005f3d 	.word	0x08005f3d
 80087c8:	0800857d 	.word	0x0800857d
 80087cc:	08009dbe 	.word	0x08009dbe

080087d0 <__swbuf_r>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	460e      	mov	r6, r1
 80087d4:	4614      	mov	r4, r2
 80087d6:	4605      	mov	r5, r0
 80087d8:	b118      	cbz	r0, 80087e2 <__swbuf_r+0x12>
 80087da:	6a03      	ldr	r3, [r0, #32]
 80087dc:	b90b      	cbnz	r3, 80087e2 <__swbuf_r+0x12>
 80087de:	f7fd fff1 	bl	80067c4 <__sinit>
 80087e2:	69a3      	ldr	r3, [r4, #24]
 80087e4:	60a3      	str	r3, [r4, #8]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	071a      	lsls	r2, r3, #28
 80087ea:	d501      	bpl.n	80087f0 <__swbuf_r+0x20>
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	b943      	cbnz	r3, 8008802 <__swbuf_r+0x32>
 80087f0:	4621      	mov	r1, r4
 80087f2:	4628      	mov	r0, r5
 80087f4:	f000 f82a 	bl	800884c <__swsetup_r>
 80087f8:	b118      	cbz	r0, 8008802 <__swbuf_r+0x32>
 80087fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80087fe:	4638      	mov	r0, r7
 8008800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	6922      	ldr	r2, [r4, #16]
 8008806:	1a98      	subs	r0, r3, r2
 8008808:	6963      	ldr	r3, [r4, #20]
 800880a:	b2f6      	uxtb	r6, r6
 800880c:	4283      	cmp	r3, r0
 800880e:	4637      	mov	r7, r6
 8008810:	dc05      	bgt.n	800881e <__swbuf_r+0x4e>
 8008812:	4621      	mov	r1, r4
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff fd99 	bl	800834c <_fflush_r>
 800881a:	2800      	cmp	r0, #0
 800881c:	d1ed      	bne.n	80087fa <__swbuf_r+0x2a>
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	3b01      	subs	r3, #1
 8008822:	60a3      	str	r3, [r4, #8]
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	6022      	str	r2, [r4, #0]
 800882a:	701e      	strb	r6, [r3, #0]
 800882c:	6962      	ldr	r2, [r4, #20]
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	429a      	cmp	r2, r3
 8008832:	d004      	beq.n	800883e <__swbuf_r+0x6e>
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	07db      	lsls	r3, r3, #31
 8008838:	d5e1      	bpl.n	80087fe <__swbuf_r+0x2e>
 800883a:	2e0a      	cmp	r6, #10
 800883c:	d1df      	bne.n	80087fe <__swbuf_r+0x2e>
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f7ff fd83 	bl	800834c <_fflush_r>
 8008846:	2800      	cmp	r0, #0
 8008848:	d0d9      	beq.n	80087fe <__swbuf_r+0x2e>
 800884a:	e7d6      	b.n	80087fa <__swbuf_r+0x2a>

0800884c <__swsetup_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4b29      	ldr	r3, [pc, #164]	@ (80088f4 <__swsetup_r+0xa8>)
 8008850:	4605      	mov	r5, r0
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	460c      	mov	r4, r1
 8008856:	b118      	cbz	r0, 8008860 <__swsetup_r+0x14>
 8008858:	6a03      	ldr	r3, [r0, #32]
 800885a:	b90b      	cbnz	r3, 8008860 <__swsetup_r+0x14>
 800885c:	f7fd ffb2 	bl	80067c4 <__sinit>
 8008860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008864:	0719      	lsls	r1, r3, #28
 8008866:	d422      	bmi.n	80088ae <__swsetup_r+0x62>
 8008868:	06da      	lsls	r2, r3, #27
 800886a:	d407      	bmi.n	800887c <__swsetup_r+0x30>
 800886c:	2209      	movs	r2, #9
 800886e:	602a      	str	r2, [r5, #0]
 8008870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800887a:	e033      	b.n	80088e4 <__swsetup_r+0x98>
 800887c:	0758      	lsls	r0, r3, #29
 800887e:	d512      	bpl.n	80088a6 <__swsetup_r+0x5a>
 8008880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008882:	b141      	cbz	r1, 8008896 <__swsetup_r+0x4a>
 8008884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008888:	4299      	cmp	r1, r3
 800888a:	d002      	beq.n	8008892 <__swsetup_r+0x46>
 800888c:	4628      	mov	r0, r5
 800888e:	f7fe feff 	bl	8007690 <_free_r>
 8008892:	2300      	movs	r3, #0
 8008894:	6363      	str	r3, [r4, #52]	@ 0x34
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	2300      	movs	r3, #0
 80088a0:	6063      	str	r3, [r4, #4]
 80088a2:	6923      	ldr	r3, [r4, #16]
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	f043 0308 	orr.w	r3, r3, #8
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	b94b      	cbnz	r3, 80088c6 <__swsetup_r+0x7a>
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088bc:	d003      	beq.n	80088c6 <__swsetup_r+0x7a>
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f883 	bl	80089cc <__smakebuf_r>
 80088c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ca:	f013 0201 	ands.w	r2, r3, #1
 80088ce:	d00a      	beq.n	80088e6 <__swsetup_r+0x9a>
 80088d0:	2200      	movs	r2, #0
 80088d2:	60a2      	str	r2, [r4, #8]
 80088d4:	6962      	ldr	r2, [r4, #20]
 80088d6:	4252      	negs	r2, r2
 80088d8:	61a2      	str	r2, [r4, #24]
 80088da:	6922      	ldr	r2, [r4, #16]
 80088dc:	b942      	cbnz	r2, 80088f0 <__swsetup_r+0xa4>
 80088de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088e2:	d1c5      	bne.n	8008870 <__swsetup_r+0x24>
 80088e4:	bd38      	pop	{r3, r4, r5, pc}
 80088e6:	0799      	lsls	r1, r3, #30
 80088e8:	bf58      	it	pl
 80088ea:	6962      	ldrpl	r2, [r4, #20]
 80088ec:	60a2      	str	r2, [r4, #8]
 80088ee:	e7f4      	b.n	80088da <__swsetup_r+0x8e>
 80088f0:	2000      	movs	r0, #0
 80088f2:	e7f7      	b.n	80088e4 <__swsetup_r+0x98>
 80088f4:	20000018 	.word	0x20000018

080088f8 <_raise_r>:
 80088f8:	291f      	cmp	r1, #31
 80088fa:	b538      	push	{r3, r4, r5, lr}
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	d904      	bls.n	800890c <_raise_r+0x14>
 8008902:	2316      	movs	r3, #22
 8008904:	6003      	str	r3, [r0, #0]
 8008906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800890e:	b112      	cbz	r2, 8008916 <_raise_r+0x1e>
 8008910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008914:	b94b      	cbnz	r3, 800892a <_raise_r+0x32>
 8008916:	4628      	mov	r0, r5
 8008918:	f000 f830 	bl	800897c <_getpid_r>
 800891c:	4622      	mov	r2, r4
 800891e:	4601      	mov	r1, r0
 8008920:	4628      	mov	r0, r5
 8008922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008926:	f000 b817 	b.w	8008958 <_kill_r>
 800892a:	2b01      	cmp	r3, #1
 800892c:	d00a      	beq.n	8008944 <_raise_r+0x4c>
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	d103      	bne.n	800893a <_raise_r+0x42>
 8008932:	2316      	movs	r3, #22
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	2001      	movs	r0, #1
 8008938:	e7e7      	b.n	800890a <_raise_r+0x12>
 800893a:	2100      	movs	r1, #0
 800893c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008940:	4620      	mov	r0, r4
 8008942:	4798      	blx	r3
 8008944:	2000      	movs	r0, #0
 8008946:	e7e0      	b.n	800890a <_raise_r+0x12>

08008948 <raise>:
 8008948:	4b02      	ldr	r3, [pc, #8]	@ (8008954 <raise+0xc>)
 800894a:	4601      	mov	r1, r0
 800894c:	6818      	ldr	r0, [r3, #0]
 800894e:	f7ff bfd3 	b.w	80088f8 <_raise_r>
 8008952:	bf00      	nop
 8008954:	20000018 	.word	0x20000018

08008958 <_kill_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d07      	ldr	r5, [pc, #28]	@ (8008978 <_kill_r+0x20>)
 800895c:	2300      	movs	r3, #0
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	f7f9 fe4e 	bl	8002606 <_kill>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	d102      	bne.n	8008974 <_kill_r+0x1c>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	b103      	cbz	r3, 8008974 <_kill_r+0x1c>
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	bd38      	pop	{r3, r4, r5, pc}
 8008976:	bf00      	nop
 8008978:	200004b0 	.word	0x200004b0

0800897c <_getpid_r>:
 800897c:	f7f9 be3b 	b.w	80025f6 <_getpid>

08008980 <__swhatbuf_r>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008988:	2900      	cmp	r1, #0
 800898a:	b096      	sub	sp, #88	@ 0x58
 800898c:	4615      	mov	r5, r2
 800898e:	461e      	mov	r6, r3
 8008990:	da0d      	bge.n	80089ae <__swhatbuf_r+0x2e>
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008998:	f04f 0100 	mov.w	r1, #0
 800899c:	bf14      	ite	ne
 800899e:	2340      	movne	r3, #64	@ 0x40
 80089a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089a4:	2000      	movs	r0, #0
 80089a6:	6031      	str	r1, [r6, #0]
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	b016      	add	sp, #88	@ 0x58
 80089ac:	bd70      	pop	{r4, r5, r6, pc}
 80089ae:	466a      	mov	r2, sp
 80089b0:	f000 f848 	bl	8008a44 <_fstat_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	dbec      	blt.n	8008992 <__swhatbuf_r+0x12>
 80089b8:	9901      	ldr	r1, [sp, #4]
 80089ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089c2:	4259      	negs	r1, r3
 80089c4:	4159      	adcs	r1, r3
 80089c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ca:	e7eb      	b.n	80089a4 <__swhatbuf_r+0x24>

080089cc <__smakebuf_r>:
 80089cc:	898b      	ldrh	r3, [r1, #12]
 80089ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089d0:	079d      	lsls	r5, r3, #30
 80089d2:	4606      	mov	r6, r0
 80089d4:	460c      	mov	r4, r1
 80089d6:	d507      	bpl.n	80089e8 <__smakebuf_r+0x1c>
 80089d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	6123      	str	r3, [r4, #16]
 80089e0:	2301      	movs	r3, #1
 80089e2:	6163      	str	r3, [r4, #20]
 80089e4:	b003      	add	sp, #12
 80089e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e8:	ab01      	add	r3, sp, #4
 80089ea:	466a      	mov	r2, sp
 80089ec:	f7ff ffc8 	bl	8008980 <__swhatbuf_r>
 80089f0:	9f00      	ldr	r7, [sp, #0]
 80089f2:	4605      	mov	r5, r0
 80089f4:	4639      	mov	r1, r7
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7fe febe 	bl	8007778 <_malloc_r>
 80089fc:	b948      	cbnz	r0, 8008a12 <__smakebuf_r+0x46>
 80089fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a02:	059a      	lsls	r2, r3, #22
 8008a04:	d4ee      	bmi.n	80089e4 <__smakebuf_r+0x18>
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	f043 0302 	orr.w	r3, r3, #2
 8008a0e:	81a3      	strh	r3, [r4, #12]
 8008a10:	e7e2      	b.n	80089d8 <__smakebuf_r+0xc>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	6020      	str	r0, [r4, #0]
 8008a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a1a:	81a3      	strh	r3, [r4, #12]
 8008a1c:	9b01      	ldr	r3, [sp, #4]
 8008a1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a22:	b15b      	cbz	r3, 8008a3c <__smakebuf_r+0x70>
 8008a24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f000 f81d 	bl	8008a68 <_isatty_r>
 8008a2e:	b128      	cbz	r0, 8008a3c <__smakebuf_r+0x70>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	f043 0301 	orr.w	r3, r3, #1
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	431d      	orrs	r5, r3
 8008a40:	81a5      	strh	r5, [r4, #12]
 8008a42:	e7cf      	b.n	80089e4 <__smakebuf_r+0x18>

08008a44 <_fstat_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d07      	ldr	r5, [pc, #28]	@ (8008a64 <_fstat_r+0x20>)
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	4611      	mov	r1, r2
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	f7f9 fe38 	bl	80026c6 <_fstat>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	d102      	bne.n	8008a60 <_fstat_r+0x1c>
 8008a5a:	682b      	ldr	r3, [r5, #0]
 8008a5c:	b103      	cbz	r3, 8008a60 <_fstat_r+0x1c>
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	bd38      	pop	{r3, r4, r5, pc}
 8008a62:	bf00      	nop
 8008a64:	200004b0 	.word	0x200004b0

08008a68 <_isatty_r>:
 8008a68:	b538      	push	{r3, r4, r5, lr}
 8008a6a:	4d06      	ldr	r5, [pc, #24]	@ (8008a84 <_isatty_r+0x1c>)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	602b      	str	r3, [r5, #0]
 8008a74:	f7f9 fe37 	bl	80026e6 <_isatty>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_isatty_r+0x1a>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_isatty_r+0x1a>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	200004b0 	.word	0x200004b0

08008a88 <pow>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	ed2d 8b02 	vpush	{d8}
 8008a8e:	eeb0 8a40 	vmov.f32	s16, s0
 8008a92:	eef0 8a60 	vmov.f32	s17, s1
 8008a96:	ec55 4b11 	vmov	r4, r5, d1
 8008a9a:	f000 f871 	bl	8008b80 <__ieee754_pow>
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	ec57 6b10 	vmov	r6, r7, d0
 8008aaa:	f7f8 f847 	bl	8000b3c <__aeabi_dcmpun>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d13b      	bne.n	8008b2a <pow+0xa2>
 8008ab2:	ec51 0b18 	vmov	r0, r1, d8
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f7f8 f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008abe:	b1b8      	cbz	r0, 8008af0 <pow+0x68>
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f8 f806 	bl	8000ad8 <__aeabi_dcmpeq>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d146      	bne.n	8008b5e <pow+0xd6>
 8008ad0:	ec45 4b10 	vmov	d0, r4, r5
 8008ad4:	f000 f848 	bl	8008b68 <finite>
 8008ad8:	b338      	cbz	r0, 8008b2a <pow+0xa2>
 8008ada:	2200      	movs	r2, #0
 8008adc:	2300      	movs	r3, #0
 8008ade:	4620      	mov	r0, r4
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	f7f8 f803 	bl	8000aec <__aeabi_dcmplt>
 8008ae6:	b300      	cbz	r0, 8008b2a <pow+0xa2>
 8008ae8:	f7fd ff58 	bl	800699c <__errno>
 8008aec:	2322      	movs	r3, #34	@ 0x22
 8008aee:	e01b      	b.n	8008b28 <pow+0xa0>
 8008af0:	ec47 6b10 	vmov	d0, r6, r7
 8008af4:	f000 f838 	bl	8008b68 <finite>
 8008af8:	b9e0      	cbnz	r0, 8008b34 <pow+0xac>
 8008afa:	eeb0 0a48 	vmov.f32	s0, s16
 8008afe:	eef0 0a68 	vmov.f32	s1, s17
 8008b02:	f000 f831 	bl	8008b68 <finite>
 8008b06:	b1a8      	cbz	r0, 8008b34 <pow+0xac>
 8008b08:	ec45 4b10 	vmov	d0, r4, r5
 8008b0c:	f000 f82c 	bl	8008b68 <finite>
 8008b10:	b180      	cbz	r0, 8008b34 <pow+0xac>
 8008b12:	4632      	mov	r2, r6
 8008b14:	463b      	mov	r3, r7
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	f7f8 f80f 	bl	8000b3c <__aeabi_dcmpun>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d0e2      	beq.n	8008ae8 <pow+0x60>
 8008b22:	f7fd ff3b 	bl	800699c <__errno>
 8008b26:	2321      	movs	r3, #33	@ 0x21
 8008b28:	6003      	str	r3, [r0, #0]
 8008b2a:	ecbd 8b02 	vpop	{d8}
 8008b2e:	ec47 6b10 	vmov	d0, r6, r7
 8008b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b34:	2200      	movs	r2, #0
 8008b36:	2300      	movs	r3, #0
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 ffcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d0f2      	beq.n	8008b2a <pow+0xa2>
 8008b44:	eeb0 0a48 	vmov.f32	s0, s16
 8008b48:	eef0 0a68 	vmov.f32	s1, s17
 8008b4c:	f000 f80c 	bl	8008b68 <finite>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0ea      	beq.n	8008b2a <pow+0xa2>
 8008b54:	ec45 4b10 	vmov	d0, r4, r5
 8008b58:	f000 f806 	bl	8008b68 <finite>
 8008b5c:	e7c3      	b.n	8008ae6 <pow+0x5e>
 8008b5e:	4f01      	ldr	r7, [pc, #4]	@ (8008b64 <pow+0xdc>)
 8008b60:	2600      	movs	r6, #0
 8008b62:	e7e2      	b.n	8008b2a <pow+0xa2>
 8008b64:	3ff00000 	.word	0x3ff00000

08008b68 <finite>:
 8008b68:	b082      	sub	sp, #8
 8008b6a:	ed8d 0b00 	vstr	d0, [sp]
 8008b6e:	9801      	ldr	r0, [sp, #4]
 8008b70:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008b74:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008b78:	0fc0      	lsrs	r0, r0, #31
 8008b7a:	b002      	add	sp, #8
 8008b7c:	4770      	bx	lr
	...

08008b80 <__ieee754_pow>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	b091      	sub	sp, #68	@ 0x44
 8008b86:	ed8d 1b00 	vstr	d1, [sp]
 8008b8a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008b8e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008b92:	ea5a 0001 	orrs.w	r0, sl, r1
 8008b96:	ec57 6b10 	vmov	r6, r7, d0
 8008b9a:	d113      	bne.n	8008bc4 <__ieee754_pow+0x44>
 8008b9c:	19b3      	adds	r3, r6, r6
 8008b9e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008ba2:	4152      	adcs	r2, r2
 8008ba4:	4298      	cmp	r0, r3
 8008ba6:	4b98      	ldr	r3, [pc, #608]	@ (8008e08 <__ieee754_pow+0x288>)
 8008ba8:	4193      	sbcs	r3, r2
 8008baa:	f080 84ea 	bcs.w	8009582 <__ieee754_pow+0xa02>
 8008bae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	f7f7 fb71 	bl	800029c <__adddf3>
 8008bba:	ec41 0b10 	vmov	d0, r0, r1
 8008bbe:	b011      	add	sp, #68	@ 0x44
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	4a91      	ldr	r2, [pc, #580]	@ (8008e0c <__ieee754_pow+0x28c>)
 8008bc6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008bca:	4590      	cmp	r8, r2
 8008bcc:	463d      	mov	r5, r7
 8008bce:	4633      	mov	r3, r6
 8008bd0:	d806      	bhi.n	8008be0 <__ieee754_pow+0x60>
 8008bd2:	d101      	bne.n	8008bd8 <__ieee754_pow+0x58>
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	d1ea      	bne.n	8008bae <__ieee754_pow+0x2e>
 8008bd8:	4592      	cmp	sl, r2
 8008bda:	d801      	bhi.n	8008be0 <__ieee754_pow+0x60>
 8008bdc:	d10e      	bne.n	8008bfc <__ieee754_pow+0x7c>
 8008bde:	b169      	cbz	r1, 8008bfc <__ieee754_pow+0x7c>
 8008be0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008be4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008be8:	431d      	orrs	r5, r3
 8008bea:	d1e0      	bne.n	8008bae <__ieee754_pow+0x2e>
 8008bec:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008bf0:	18db      	adds	r3, r3, r3
 8008bf2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008bf6:	4152      	adcs	r2, r2
 8008bf8:	429d      	cmp	r5, r3
 8008bfa:	e7d4      	b.n	8008ba6 <__ieee754_pow+0x26>
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	46c3      	mov	fp, r8
 8008c00:	da3a      	bge.n	8008c78 <__ieee754_pow+0xf8>
 8008c02:	4a83      	ldr	r2, [pc, #524]	@ (8008e10 <__ieee754_pow+0x290>)
 8008c04:	4592      	cmp	sl, r2
 8008c06:	d84d      	bhi.n	8008ca4 <__ieee754_pow+0x124>
 8008c08:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008c0c:	4592      	cmp	sl, r2
 8008c0e:	f240 84c7 	bls.w	80095a0 <__ieee754_pow+0xa20>
 8008c12:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008c16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008c1a:	2a14      	cmp	r2, #20
 8008c1c:	dd0f      	ble.n	8008c3e <__ieee754_pow+0xbe>
 8008c1e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008c22:	fa21 f402 	lsr.w	r4, r1, r2
 8008c26:	fa04 f202 	lsl.w	r2, r4, r2
 8008c2a:	428a      	cmp	r2, r1
 8008c2c:	f040 84b8 	bne.w	80095a0 <__ieee754_pow+0xa20>
 8008c30:	f004 0401 	and.w	r4, r4, #1
 8008c34:	f1c4 0402 	rsb	r4, r4, #2
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d158      	bne.n	8008cee <__ieee754_pow+0x16e>
 8008c3c:	e00e      	b.n	8008c5c <__ieee754_pow+0xdc>
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	d154      	bne.n	8008cec <__ieee754_pow+0x16c>
 8008c42:	f1c2 0214 	rsb	r2, r2, #20
 8008c46:	fa4a f402 	asr.w	r4, sl, r2
 8008c4a:	fa04 f202 	lsl.w	r2, r4, r2
 8008c4e:	4552      	cmp	r2, sl
 8008c50:	f040 84a3 	bne.w	800959a <__ieee754_pow+0xa1a>
 8008c54:	f004 0401 	and.w	r4, r4, #1
 8008c58:	f1c4 0402 	rsb	r4, r4, #2
 8008c5c:	4a6d      	ldr	r2, [pc, #436]	@ (8008e14 <__ieee754_pow+0x294>)
 8008c5e:	4592      	cmp	sl, r2
 8008c60:	d12e      	bne.n	8008cc0 <__ieee754_pow+0x140>
 8008c62:	f1b9 0f00 	cmp.w	r9, #0
 8008c66:	f280 8494 	bge.w	8009592 <__ieee754_pow+0xa12>
 8008c6a:	496a      	ldr	r1, [pc, #424]	@ (8008e14 <__ieee754_pow+0x294>)
 8008c6c:	4632      	mov	r2, r6
 8008c6e:	463b      	mov	r3, r7
 8008c70:	2000      	movs	r0, #0
 8008c72:	f7f7 fdf3 	bl	800085c <__aeabi_ddiv>
 8008c76:	e7a0      	b.n	8008bba <__ieee754_pow+0x3a>
 8008c78:	2400      	movs	r4, #0
 8008c7a:	bbc1      	cbnz	r1, 8008cee <__ieee754_pow+0x16e>
 8008c7c:	4a63      	ldr	r2, [pc, #396]	@ (8008e0c <__ieee754_pow+0x28c>)
 8008c7e:	4592      	cmp	sl, r2
 8008c80:	d1ec      	bne.n	8008c5c <__ieee754_pow+0xdc>
 8008c82:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008c86:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	f000 8479 	beq.w	8009582 <__ieee754_pow+0xa02>
 8008c90:	4b61      	ldr	r3, [pc, #388]	@ (8008e18 <__ieee754_pow+0x298>)
 8008c92:	4598      	cmp	r8, r3
 8008c94:	d908      	bls.n	8008ca8 <__ieee754_pow+0x128>
 8008c96:	f1b9 0f00 	cmp.w	r9, #0
 8008c9a:	f2c0 8476 	blt.w	800958a <__ieee754_pow+0xa0a>
 8008c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ca2:	e78a      	b.n	8008bba <__ieee754_pow+0x3a>
 8008ca4:	2402      	movs	r4, #2
 8008ca6:	e7e8      	b.n	8008c7a <__ieee754_pow+0xfa>
 8008ca8:	f1b9 0f00 	cmp.w	r9, #0
 8008cac:	f04f 0000 	mov.w	r0, #0
 8008cb0:	f04f 0100 	mov.w	r1, #0
 8008cb4:	da81      	bge.n	8008bba <__ieee754_pow+0x3a>
 8008cb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008cba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008cbe:	e77c      	b.n	8008bba <__ieee754_pow+0x3a>
 8008cc0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008cc4:	d106      	bne.n	8008cd4 <__ieee754_pow+0x154>
 8008cc6:	4632      	mov	r2, r6
 8008cc8:	463b      	mov	r3, r7
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 fc9b 	bl	8000608 <__aeabi_dmul>
 8008cd2:	e772      	b.n	8008bba <__ieee754_pow+0x3a>
 8008cd4:	4a51      	ldr	r2, [pc, #324]	@ (8008e1c <__ieee754_pow+0x29c>)
 8008cd6:	4591      	cmp	r9, r2
 8008cd8:	d109      	bne.n	8008cee <__ieee754_pow+0x16e>
 8008cda:	2d00      	cmp	r5, #0
 8008cdc:	db07      	blt.n	8008cee <__ieee754_pow+0x16e>
 8008cde:	ec47 6b10 	vmov	d0, r6, r7
 8008ce2:	b011      	add	sp, #68	@ 0x44
 8008ce4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	f000 bd52 	b.w	8009790 <__ieee754_sqrt>
 8008cec:	2400      	movs	r4, #0
 8008cee:	ec47 6b10 	vmov	d0, r6, r7
 8008cf2:	9302      	str	r3, [sp, #8]
 8008cf4:	f000 fc88 	bl	8009608 <fabs>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	ec51 0b10 	vmov	r0, r1, d0
 8008cfe:	bb53      	cbnz	r3, 8008d56 <__ieee754_pow+0x1d6>
 8008d00:	4b44      	ldr	r3, [pc, #272]	@ (8008e14 <__ieee754_pow+0x294>)
 8008d02:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d002      	beq.n	8008d10 <__ieee754_pow+0x190>
 8008d0a:	f1b8 0f00 	cmp.w	r8, #0
 8008d0e:	d122      	bne.n	8008d56 <__ieee754_pow+0x1d6>
 8008d10:	f1b9 0f00 	cmp.w	r9, #0
 8008d14:	da05      	bge.n	8008d22 <__ieee754_pow+0x1a2>
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	493d      	ldr	r1, [pc, #244]	@ (8008e14 <__ieee754_pow+0x294>)
 8008d1e:	f7f7 fd9d 	bl	800085c <__aeabi_ddiv>
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	f6bf af49 	bge.w	8008bba <__ieee754_pow+0x3a>
 8008d28:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008d2c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008d30:	ea58 0804 	orrs.w	r8, r8, r4
 8008d34:	d108      	bne.n	8008d48 <__ieee754_pow+0x1c8>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	f7f7 faab 	bl	8000298 <__aeabi_dsub>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	e794      	b.n	8008c72 <__ieee754_pow+0xf2>
 8008d48:	2c01      	cmp	r4, #1
 8008d4a:	f47f af36 	bne.w	8008bba <__ieee754_pow+0x3a>
 8008d4e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d52:	4619      	mov	r1, r3
 8008d54:	e731      	b.n	8008bba <__ieee754_pow+0x3a>
 8008d56:	0feb      	lsrs	r3, r5, #31
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	ea53 0204 	orrs.w	r2, r3, r4
 8008d5e:	d102      	bne.n	8008d66 <__ieee754_pow+0x1e6>
 8008d60:	4632      	mov	r2, r6
 8008d62:	463b      	mov	r3, r7
 8008d64:	e7e9      	b.n	8008d3a <__ieee754_pow+0x1ba>
 8008d66:	3c01      	subs	r4, #1
 8008d68:	431c      	orrs	r4, r3
 8008d6a:	d016      	beq.n	8008d9a <__ieee754_pow+0x21a>
 8008d6c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008df8 <__ieee754_pow+0x278>
 8008d70:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008d74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d78:	f240 8112 	bls.w	8008fa0 <__ieee754_pow+0x420>
 8008d7c:	4b28      	ldr	r3, [pc, #160]	@ (8008e20 <__ieee754_pow+0x2a0>)
 8008d7e:	459a      	cmp	sl, r3
 8008d80:	4b25      	ldr	r3, [pc, #148]	@ (8008e18 <__ieee754_pow+0x298>)
 8008d82:	d916      	bls.n	8008db2 <__ieee754_pow+0x232>
 8008d84:	4598      	cmp	r8, r3
 8008d86:	d80b      	bhi.n	8008da0 <__ieee754_pow+0x220>
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	da0b      	bge.n	8008da6 <__ieee754_pow+0x226>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	b011      	add	sp, #68	@ 0x44
 8008d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d96:	f000 bcf3 	b.w	8009780 <__math_oflow>
 8008d9a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008e00 <__ieee754_pow+0x280>
 8008d9e:	e7e7      	b.n	8008d70 <__ieee754_pow+0x1f0>
 8008da0:	f1b9 0f00 	cmp.w	r9, #0
 8008da4:	dcf3      	bgt.n	8008d8e <__ieee754_pow+0x20e>
 8008da6:	2000      	movs	r0, #0
 8008da8:	b011      	add	sp, #68	@ 0x44
 8008daa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dae:	f000 bcdf 	b.w	8009770 <__math_uflow>
 8008db2:	4598      	cmp	r8, r3
 8008db4:	d20c      	bcs.n	8008dd0 <__ieee754_pow+0x250>
 8008db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f7f7 fe95 	bl	8000aec <__aeabi_dcmplt>
 8008dc2:	3800      	subs	r0, #0
 8008dc4:	bf18      	it	ne
 8008dc6:	2001      	movne	r0, #1
 8008dc8:	f1b9 0f00 	cmp.w	r9, #0
 8008dcc:	daec      	bge.n	8008da8 <__ieee754_pow+0x228>
 8008dce:	e7df      	b.n	8008d90 <__ieee754_pow+0x210>
 8008dd0:	4b10      	ldr	r3, [pc, #64]	@ (8008e14 <__ieee754_pow+0x294>)
 8008dd2:	4598      	cmp	r8, r3
 8008dd4:	f04f 0200 	mov.w	r2, #0
 8008dd8:	d924      	bls.n	8008e24 <__ieee754_pow+0x2a4>
 8008dda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dde:	2300      	movs	r3, #0
 8008de0:	f7f7 fe84 	bl	8000aec <__aeabi_dcmplt>
 8008de4:	3800      	subs	r0, #0
 8008de6:	bf18      	it	ne
 8008de8:	2001      	movne	r0, #1
 8008dea:	f1b9 0f00 	cmp.w	r9, #0
 8008dee:	dccf      	bgt.n	8008d90 <__ieee754_pow+0x210>
 8008df0:	e7da      	b.n	8008da8 <__ieee754_pow+0x228>
 8008df2:	bf00      	nop
 8008df4:	f3af 8000 	nop.w
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	00000000 	.word	0x00000000
 8008e04:	bff00000 	.word	0xbff00000
 8008e08:	fff00000 	.word	0xfff00000
 8008e0c:	7ff00000 	.word	0x7ff00000
 8008e10:	433fffff 	.word	0x433fffff
 8008e14:	3ff00000 	.word	0x3ff00000
 8008e18:	3fefffff 	.word	0x3fefffff
 8008e1c:	3fe00000 	.word	0x3fe00000
 8008e20:	43f00000 	.word	0x43f00000
 8008e24:	4b5a      	ldr	r3, [pc, #360]	@ (8008f90 <__ieee754_pow+0x410>)
 8008e26:	f7f7 fa37 	bl	8000298 <__aeabi_dsub>
 8008e2a:	a351      	add	r3, pc, #324	@ (adr r3, 8008f70 <__ieee754_pow+0x3f0>)
 8008e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	a34f      	add	r3, pc, #316	@ (adr r3, 8008f78 <__ieee754_pow+0x3f8>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460f      	mov	r7, r1
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7f7 fbdf 	bl	8000608 <__aeabi_dmul>
 8008e4a:	4b52      	ldr	r3, [pc, #328]	@ (8008f94 <__ieee754_pow+0x414>)
 8008e4c:	4682      	mov	sl, r0
 8008e4e:	468b      	mov	fp, r1
 8008e50:	2200      	movs	r2, #0
 8008e52:	4620      	mov	r0, r4
 8008e54:	4629      	mov	r1, r5
 8008e56:	f7f7 fbd7 	bl	8000608 <__aeabi_dmul>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	a148      	add	r1, pc, #288	@ (adr r1, 8008f80 <__ieee754_pow+0x400>)
 8008e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e64:	f7f7 fa18 	bl	8000298 <__aeabi_dsub>
 8008e68:	4622      	mov	r2, r4
 8008e6a:	462b      	mov	r3, r5
 8008e6c:	f7f7 fbcc 	bl	8000608 <__aeabi_dmul>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	2000      	movs	r0, #0
 8008e76:	4948      	ldr	r1, [pc, #288]	@ (8008f98 <__ieee754_pow+0x418>)
 8008e78:	f7f7 fa0e 	bl	8000298 <__aeabi_dsub>
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4680      	mov	r8, r0
 8008e80:	4689      	mov	r9, r1
 8008e82:	462b      	mov	r3, r5
 8008e84:	4620      	mov	r0, r4
 8008e86:	4629      	mov	r1, r5
 8008e88:	f7f7 fbbe 	bl	8000608 <__aeabi_dmul>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fbb8 	bl	8000608 <__aeabi_dmul>
 8008e98:	a33b      	add	r3, pc, #236	@ (adr r3, 8008f88 <__ieee754_pow+0x408>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fbb3 	bl	8000608 <__aeabi_dmul>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	4659      	mov	r1, fp
 8008eaa:	f7f7 f9f5 	bl	8000298 <__aeabi_dsub>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	4689      	mov	r9, r1
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	f7f7 f9ef 	bl	800029c <__adddf3>
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	4632      	mov	r2, r6
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	f7f7 f9e6 	bl	8000298 <__aeabi_dsub>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	f7f7 f9e0 	bl	8000298 <__aeabi_dsub>
 8008ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008edc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	4652      	mov	r2, sl
 8008eee:	465b      	mov	r3, fp
 8008ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ef4:	f7f7 f9d0 	bl	8000298 <__aeabi_dsub>
 8008ef8:	4622      	mov	r2, r4
 8008efa:	462b      	mov	r3, r5
 8008efc:	f7f7 fb84 	bl	8000608 <__aeabi_dmul>
 8008f00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f04:	4680      	mov	r8, r0
 8008f06:	4689      	mov	r9, r1
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fb7c 	bl	8000608 <__aeabi_dmul>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4640      	mov	r0, r8
 8008f16:	4649      	mov	r1, r9
 8008f18:	f7f7 f9c0 	bl	800029c <__adddf3>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	465b      	mov	r3, fp
 8008f20:	4606      	mov	r6, r0
 8008f22:	460f      	mov	r7, r1
 8008f24:	4620      	mov	r0, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f7 fb6e 	bl	8000608 <__aeabi_dmul>
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4602      	mov	r2, r0
 8008f30:	4680      	mov	r8, r0
 8008f32:	4689      	mov	r9, r1
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 f9b0 	bl	800029c <__adddf3>
 8008f3c:	4b17      	ldr	r3, [pc, #92]	@ (8008f9c <__ieee754_pow+0x41c>)
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	4604      	mov	r4, r0
 8008f42:	460d      	mov	r5, r1
 8008f44:	468a      	mov	sl, r1
 8008f46:	468b      	mov	fp, r1
 8008f48:	f340 82ef 	ble.w	800952a <__ieee754_pow+0x9aa>
 8008f4c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008f50:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008f54:	4303      	orrs	r3, r0
 8008f56:	f000 81e8 	beq.w	800932a <__ieee754_pow+0x7aa>
 8008f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2300      	movs	r3, #0
 8008f62:	f7f7 fdc3 	bl	8000aec <__aeabi_dcmplt>
 8008f66:	3800      	subs	r0, #0
 8008f68:	bf18      	it	ne
 8008f6a:	2001      	movne	r0, #1
 8008f6c:	e710      	b.n	8008d90 <__ieee754_pow+0x210>
 8008f6e:	bf00      	nop
 8008f70:	60000000 	.word	0x60000000
 8008f74:	3ff71547 	.word	0x3ff71547
 8008f78:	f85ddf44 	.word	0xf85ddf44
 8008f7c:	3e54ae0b 	.word	0x3e54ae0b
 8008f80:	55555555 	.word	0x55555555
 8008f84:	3fd55555 	.word	0x3fd55555
 8008f88:	652b82fe 	.word	0x652b82fe
 8008f8c:	3ff71547 	.word	0x3ff71547
 8008f90:	3ff00000 	.word	0x3ff00000
 8008f94:	3fd00000 	.word	0x3fd00000
 8008f98:	3fe00000 	.word	0x3fe00000
 8008f9c:	408fffff 	.word	0x408fffff
 8008fa0:	4bd5      	ldr	r3, [pc, #852]	@ (80092f8 <__ieee754_pow+0x778>)
 8008fa2:	402b      	ands	r3, r5
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	b92b      	cbnz	r3, 8008fb4 <__ieee754_pow+0x434>
 8008fa8:	4bd4      	ldr	r3, [pc, #848]	@ (80092fc <__ieee754_pow+0x77c>)
 8008faa:	f7f7 fb2d 	bl	8000608 <__aeabi_dmul>
 8008fae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008fb2:	468b      	mov	fp, r1
 8008fb4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008fb8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008fbc:	4413      	add	r3, r2
 8008fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fc0:	4bcf      	ldr	r3, [pc, #828]	@ (8009300 <__ieee754_pow+0x780>)
 8008fc2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008fc6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008fca:	459b      	cmp	fp, r3
 8008fcc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008fd0:	dd08      	ble.n	8008fe4 <__ieee754_pow+0x464>
 8008fd2:	4bcc      	ldr	r3, [pc, #816]	@ (8009304 <__ieee754_pow+0x784>)
 8008fd4:	459b      	cmp	fp, r3
 8008fd6:	f340 81a5 	ble.w	8009324 <__ieee754_pow+0x7a4>
 8008fda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fdc:	3301      	adds	r3, #1
 8008fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fe0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008fe4:	f04f 0a00 	mov.w	sl, #0
 8008fe8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008fec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fee:	4bc6      	ldr	r3, [pc, #792]	@ (8009308 <__ieee754_pow+0x788>)
 8008ff0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ff4:	ed93 7b00 	vldr	d7, [r3]
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	ec53 2b17 	vmov	r2, r3, d7
 8008ffe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009002:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009006:	f7f7 f947 	bl	8000298 <__aeabi_dsub>
 800900a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009016:	f7f7 f941 	bl	800029c <__adddf3>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	2000      	movs	r0, #0
 8009020:	49ba      	ldr	r1, [pc, #744]	@ (800930c <__ieee754_pow+0x78c>)
 8009022:	f7f7 fc1b 	bl	800085c <__aeabi_ddiv>
 8009026:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4630      	mov	r0, r6
 8009030:	4639      	mov	r1, r7
 8009032:	f7f7 fae9 	bl	8000608 <__aeabi_dmul>
 8009036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800903a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800903e:	106d      	asrs	r5, r5, #1
 8009040:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009044:	f04f 0b00 	mov.w	fp, #0
 8009048:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800904c:	4661      	mov	r1, ip
 800904e:	2200      	movs	r2, #0
 8009050:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009054:	4658      	mov	r0, fp
 8009056:	46e1      	mov	r9, ip
 8009058:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800905c:	4614      	mov	r4, r2
 800905e:	461d      	mov	r5, r3
 8009060:	f7f7 fad2 	bl	8000608 <__aeabi_dmul>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4630      	mov	r0, r6
 800906a:	4639      	mov	r1, r7
 800906c:	f7f7 f914 	bl	8000298 <__aeabi_dsub>
 8009070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	4620      	mov	r0, r4
 800907a:	4629      	mov	r1, r5
 800907c:	f7f7 f90c 	bl	8000298 <__aeabi_dsub>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009088:	f7f7 f906 	bl	8000298 <__aeabi_dsub>
 800908c:	465a      	mov	r2, fp
 800908e:	464b      	mov	r3, r9
 8009090:	f7f7 faba 	bl	8000608 <__aeabi_dmul>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 f8fc 	bl	8000298 <__aeabi_dsub>
 80090a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090a4:	f7f7 fab0 	bl	8000608 <__aeabi_dmul>
 80090a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090b0:	4610      	mov	r0, r2
 80090b2:	4619      	mov	r1, r3
 80090b4:	f7f7 faa8 	bl	8000608 <__aeabi_dmul>
 80090b8:	a37d      	add	r3, pc, #500	@ (adr r3, 80092b0 <__ieee754_pow+0x730>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	4604      	mov	r4, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	f7f7 faa1 	bl	8000608 <__aeabi_dmul>
 80090c6:	a37c      	add	r3, pc, #496	@ (adr r3, 80092b8 <__ieee754_pow+0x738>)
 80090c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090cc:	f7f7 f8e6 	bl	800029c <__adddf3>
 80090d0:	4622      	mov	r2, r4
 80090d2:	462b      	mov	r3, r5
 80090d4:	f7f7 fa98 	bl	8000608 <__aeabi_dmul>
 80090d8:	a379      	add	r3, pc, #484	@ (adr r3, 80092c0 <__ieee754_pow+0x740>)
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 f8dd 	bl	800029c <__adddf3>
 80090e2:	4622      	mov	r2, r4
 80090e4:	462b      	mov	r3, r5
 80090e6:	f7f7 fa8f 	bl	8000608 <__aeabi_dmul>
 80090ea:	a377      	add	r3, pc, #476	@ (adr r3, 80092c8 <__ieee754_pow+0x748>)
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	f7f7 f8d4 	bl	800029c <__adddf3>
 80090f4:	4622      	mov	r2, r4
 80090f6:	462b      	mov	r3, r5
 80090f8:	f7f7 fa86 	bl	8000608 <__aeabi_dmul>
 80090fc:	a374      	add	r3, pc, #464	@ (adr r3, 80092d0 <__ieee754_pow+0x750>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7f7 f8cb 	bl	800029c <__adddf3>
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 fa7d 	bl	8000608 <__aeabi_dmul>
 800910e:	a372      	add	r3, pc, #456	@ (adr r3, 80092d8 <__ieee754_pow+0x758>)
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	f7f7 f8c2 	bl	800029c <__adddf3>
 8009118:	4622      	mov	r2, r4
 800911a:	4606      	mov	r6, r0
 800911c:	460f      	mov	r7, r1
 800911e:	462b      	mov	r3, r5
 8009120:	4620      	mov	r0, r4
 8009122:	4629      	mov	r1, r5
 8009124:	f7f7 fa70 	bl	8000608 <__aeabi_dmul>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4630      	mov	r0, r6
 800912e:	4639      	mov	r1, r7
 8009130:	f7f7 fa6a 	bl	8000608 <__aeabi_dmul>
 8009134:	465a      	mov	r2, fp
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
 800913a:	464b      	mov	r3, r9
 800913c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009140:	f7f7 f8ac 	bl	800029c <__adddf3>
 8009144:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009148:	f7f7 fa5e 	bl	8000608 <__aeabi_dmul>
 800914c:	4622      	mov	r2, r4
 800914e:	462b      	mov	r3, r5
 8009150:	f7f7 f8a4 	bl	800029c <__adddf3>
 8009154:	465a      	mov	r2, fp
 8009156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800915a:	464b      	mov	r3, r9
 800915c:	4658      	mov	r0, fp
 800915e:	4649      	mov	r1, r9
 8009160:	f7f7 fa52 	bl	8000608 <__aeabi_dmul>
 8009164:	4b6a      	ldr	r3, [pc, #424]	@ (8009310 <__ieee754_pow+0x790>)
 8009166:	2200      	movs	r2, #0
 8009168:	4606      	mov	r6, r0
 800916a:	460f      	mov	r7, r1
 800916c:	f7f7 f896 	bl	800029c <__adddf3>
 8009170:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009174:	f7f7 f892 	bl	800029c <__adddf3>
 8009178:	46d8      	mov	r8, fp
 800917a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800917e:	460d      	mov	r5, r1
 8009180:	465a      	mov	r2, fp
 8009182:	460b      	mov	r3, r1
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800918c:	f7f7 fa3c 	bl	8000608 <__aeabi_dmul>
 8009190:	465c      	mov	r4, fp
 8009192:	4680      	mov	r8, r0
 8009194:	4689      	mov	r9, r1
 8009196:	4b5e      	ldr	r3, [pc, #376]	@ (8009310 <__ieee754_pow+0x790>)
 8009198:	2200      	movs	r2, #0
 800919a:	4620      	mov	r0, r4
 800919c:	4629      	mov	r1, r5
 800919e:	f7f7 f87b 	bl	8000298 <__aeabi_dsub>
 80091a2:	4632      	mov	r2, r6
 80091a4:	463b      	mov	r3, r7
 80091a6:	f7f7 f877 	bl	8000298 <__aeabi_dsub>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80091b2:	f7f7 f871 	bl	8000298 <__aeabi_dsub>
 80091b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091ba:	f7f7 fa25 	bl	8000608 <__aeabi_dmul>
 80091be:	4622      	mov	r2, r4
 80091c0:	4606      	mov	r6, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	462b      	mov	r3, r5
 80091c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ca:	f7f7 fa1d 	bl	8000608 <__aeabi_dmul>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4630      	mov	r0, r6
 80091d4:	4639      	mov	r1, r7
 80091d6:	f7f7 f861 	bl	800029c <__adddf3>
 80091da:	4606      	mov	r6, r0
 80091dc:	460f      	mov	r7, r1
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4640      	mov	r0, r8
 80091e4:	4649      	mov	r1, r9
 80091e6:	f7f7 f859 	bl	800029c <__adddf3>
 80091ea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80091ee:	a33c      	add	r3, pc, #240	@ (adr r3, 80092e0 <__ieee754_pow+0x760>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	4658      	mov	r0, fp
 80091f6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80091fa:	460d      	mov	r5, r1
 80091fc:	f7f7 fa04 	bl	8000608 <__aeabi_dmul>
 8009200:	465c      	mov	r4, fp
 8009202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009206:	4642      	mov	r2, r8
 8009208:	464b      	mov	r3, r9
 800920a:	4620      	mov	r0, r4
 800920c:	4629      	mov	r1, r5
 800920e:	f7f7 f843 	bl	8000298 <__aeabi_dsub>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4630      	mov	r0, r6
 8009218:	4639      	mov	r1, r7
 800921a:	f7f7 f83d 	bl	8000298 <__aeabi_dsub>
 800921e:	a332      	add	r3, pc, #200	@ (adr r3, 80092e8 <__ieee754_pow+0x768>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 f9f0 	bl	8000608 <__aeabi_dmul>
 8009228:	a331      	add	r3, pc, #196	@ (adr r3, 80092f0 <__ieee754_pow+0x770>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	4606      	mov	r6, r0
 8009230:	460f      	mov	r7, r1
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	f7f7 f9e7 	bl	8000608 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 f82b 	bl	800029c <__adddf3>
 8009246:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009248:	4b32      	ldr	r3, [pc, #200]	@ (8009314 <__ieee754_pow+0x794>)
 800924a:	4413      	add	r3, r2
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f7 f824 	bl	800029c <__adddf3>
 8009254:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009258:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800925a:	f7f7 f96b 	bl	8000534 <__aeabi_i2d>
 800925e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009260:	4b2d      	ldr	r3, [pc, #180]	@ (8009318 <__ieee754_pow+0x798>)
 8009262:	4413      	add	r3, r2
 8009264:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009268:	4606      	mov	r6, r0
 800926a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800926e:	460f      	mov	r7, r1
 8009270:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009274:	f7f7 f812 	bl	800029c <__adddf3>
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	f7f7 f80e 	bl	800029c <__adddf3>
 8009280:	4632      	mov	r2, r6
 8009282:	463b      	mov	r3, r7
 8009284:	f7f7 f80a 	bl	800029c <__adddf3>
 8009288:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800928c:	4632      	mov	r2, r6
 800928e:	463b      	mov	r3, r7
 8009290:	4658      	mov	r0, fp
 8009292:	460d      	mov	r5, r1
 8009294:	f7f7 f800 	bl	8000298 <__aeabi_dsub>
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	f7f6 fffc 	bl	8000298 <__aeabi_dsub>
 80092a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a4:	f7f6 fff8 	bl	8000298 <__aeabi_dsub>
 80092a8:	465c      	mov	r4, fp
 80092aa:	4602      	mov	r2, r0
 80092ac:	e036      	b.n	800931c <__ieee754_pow+0x79c>
 80092ae:	bf00      	nop
 80092b0:	4a454eef 	.word	0x4a454eef
 80092b4:	3fca7e28 	.word	0x3fca7e28
 80092b8:	93c9db65 	.word	0x93c9db65
 80092bc:	3fcd864a 	.word	0x3fcd864a
 80092c0:	a91d4101 	.word	0xa91d4101
 80092c4:	3fd17460 	.word	0x3fd17460
 80092c8:	518f264d 	.word	0x518f264d
 80092cc:	3fd55555 	.word	0x3fd55555
 80092d0:	db6fabff 	.word	0xdb6fabff
 80092d4:	3fdb6db6 	.word	0x3fdb6db6
 80092d8:	33333303 	.word	0x33333303
 80092dc:	3fe33333 	.word	0x3fe33333
 80092e0:	e0000000 	.word	0xe0000000
 80092e4:	3feec709 	.word	0x3feec709
 80092e8:	dc3a03fd 	.word	0xdc3a03fd
 80092ec:	3feec709 	.word	0x3feec709
 80092f0:	145b01f5 	.word	0x145b01f5
 80092f4:	be3e2fe0 	.word	0xbe3e2fe0
 80092f8:	7ff00000 	.word	0x7ff00000
 80092fc:	43400000 	.word	0x43400000
 8009300:	0003988e 	.word	0x0003988e
 8009304:	000bb679 	.word	0x000bb679
 8009308:	08009f30 	.word	0x08009f30
 800930c:	3ff00000 	.word	0x3ff00000
 8009310:	40080000 	.word	0x40080000
 8009314:	08009f10 	.word	0x08009f10
 8009318:	08009f20 	.word	0x08009f20
 800931c:	460b      	mov	r3, r1
 800931e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009322:	e5d7      	b.n	8008ed4 <__ieee754_pow+0x354>
 8009324:	f04f 0a01 	mov.w	sl, #1
 8009328:	e65e      	b.n	8008fe8 <__ieee754_pow+0x468>
 800932a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80095fc <__ieee754_pow+0xa7c>)
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f6 ffb2 	bl	800029c <__adddf3>
 8009338:	4642      	mov	r2, r8
 800933a:	e9cd 0100 	strd	r0, r1, [sp]
 800933e:	464b      	mov	r3, r9
 8009340:	4620      	mov	r0, r4
 8009342:	4629      	mov	r1, r5
 8009344:	f7f6 ffa8 	bl	8000298 <__aeabi_dsub>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009350:	f7f7 fbea 	bl	8000b28 <__aeabi_dcmpgt>
 8009354:	2800      	cmp	r0, #0
 8009356:	f47f ae00 	bne.w	8008f5a <__ieee754_pow+0x3da>
 800935a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800935e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009362:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009366:	fa43 fa0a 	asr.w	sl, r3, sl
 800936a:	44da      	add	sl, fp
 800936c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009370:	489d      	ldr	r0, [pc, #628]	@ (80095e8 <__ieee754_pow+0xa68>)
 8009372:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009376:	4108      	asrs	r0, r1
 8009378:	ea00 030a 	and.w	r3, r0, sl
 800937c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009380:	f1c1 0114 	rsb	r1, r1, #20
 8009384:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009388:	fa4a fa01 	asr.w	sl, sl, r1
 800938c:	f1bb 0f00 	cmp.w	fp, #0
 8009390:	4640      	mov	r0, r8
 8009392:	4649      	mov	r1, r9
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	bfb8      	it	lt
 800939a:	f1ca 0a00 	rsblt	sl, sl, #0
 800939e:	f7f6 ff7b 	bl	8000298 <__aeabi_dsub>
 80093a2:	4680      	mov	r8, r0
 80093a4:	4689      	mov	r9, r1
 80093a6:	4632      	mov	r2, r6
 80093a8:	463b      	mov	r3, r7
 80093aa:	4640      	mov	r0, r8
 80093ac:	4649      	mov	r1, r9
 80093ae:	f7f6 ff75 	bl	800029c <__adddf3>
 80093b2:	2400      	movs	r4, #0
 80093b4:	a37c      	add	r3, pc, #496	@ (adr r3, 80095a8 <__ieee754_pow+0xa28>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	4620      	mov	r0, r4
 80093bc:	460d      	mov	r5, r1
 80093be:	f7f7 f923 	bl	8000608 <__aeabi_dmul>
 80093c2:	4642      	mov	r2, r8
 80093c4:	e9cd 0100 	strd	r0, r1, [sp]
 80093c8:	464b      	mov	r3, r9
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7f6 ff63 	bl	8000298 <__aeabi_dsub>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4630      	mov	r0, r6
 80093d8:	4639      	mov	r1, r7
 80093da:	f7f6 ff5d 	bl	8000298 <__aeabi_dsub>
 80093de:	a374      	add	r3, pc, #464	@ (adr r3, 80095b0 <__ieee754_pow+0xa30>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f7f7 f910 	bl	8000608 <__aeabi_dmul>
 80093e8:	a373      	add	r3, pc, #460	@ (adr r3, 80095b8 <__ieee754_pow+0xa38>)
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	4680      	mov	r8, r0
 80093f0:	4689      	mov	r9, r1
 80093f2:	4620      	mov	r0, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7f7 f907 	bl	8000608 <__aeabi_dmul>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4640      	mov	r0, r8
 8009400:	4649      	mov	r1, r9
 8009402:	f7f6 ff4b 	bl	800029c <__adddf3>
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009412:	f7f6 ff43 	bl	800029c <__adddf3>
 8009416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800941a:	4680      	mov	r8, r0
 800941c:	4689      	mov	r9, r1
 800941e:	f7f6 ff3b 	bl	8000298 <__aeabi_dsub>
 8009422:	4602      	mov	r2, r0
 8009424:	460b      	mov	r3, r1
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	f7f6 ff35 	bl	8000298 <__aeabi_dsub>
 800942e:	4642      	mov	r2, r8
 8009430:	4606      	mov	r6, r0
 8009432:	460f      	mov	r7, r1
 8009434:	464b      	mov	r3, r9
 8009436:	4640      	mov	r0, r8
 8009438:	4649      	mov	r1, r9
 800943a:	f7f7 f8e5 	bl	8000608 <__aeabi_dmul>
 800943e:	a360      	add	r3, pc, #384	@ (adr r3, 80095c0 <__ieee754_pow+0xa40>)
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	f7f7 f8de 	bl	8000608 <__aeabi_dmul>
 800944c:	a35e      	add	r3, pc, #376	@ (adr r3, 80095c8 <__ieee754_pow+0xa48>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 ff21 	bl	8000298 <__aeabi_dsub>
 8009456:	4622      	mov	r2, r4
 8009458:	462b      	mov	r3, r5
 800945a:	f7f7 f8d5 	bl	8000608 <__aeabi_dmul>
 800945e:	a35c      	add	r3, pc, #368	@ (adr r3, 80095d0 <__ieee754_pow+0xa50>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 ff1a 	bl	800029c <__adddf3>
 8009468:	4622      	mov	r2, r4
 800946a:	462b      	mov	r3, r5
 800946c:	f7f7 f8cc 	bl	8000608 <__aeabi_dmul>
 8009470:	a359      	add	r3, pc, #356	@ (adr r3, 80095d8 <__ieee754_pow+0xa58>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f6 ff0f 	bl	8000298 <__aeabi_dsub>
 800947a:	4622      	mov	r2, r4
 800947c:	462b      	mov	r3, r5
 800947e:	f7f7 f8c3 	bl	8000608 <__aeabi_dmul>
 8009482:	a357      	add	r3, pc, #348	@ (adr r3, 80095e0 <__ieee754_pow+0xa60>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f6 ff08 	bl	800029c <__adddf3>
 800948c:	4622      	mov	r2, r4
 800948e:	462b      	mov	r3, r5
 8009490:	f7f7 f8ba 	bl	8000608 <__aeabi_dmul>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f6 fefc 	bl	8000298 <__aeabi_dsub>
 80094a0:	4604      	mov	r4, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f7 f8ac 	bl	8000608 <__aeabi_dmul>
 80094b0:	2200      	movs	r2, #0
 80094b2:	e9cd 0100 	strd	r0, r1, [sp]
 80094b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80094ba:	4620      	mov	r0, r4
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f6 feeb 	bl	8000298 <__aeabi_dsub>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ca:	f7f7 f9c7 	bl	800085c <__aeabi_ddiv>
 80094ce:	4632      	mov	r2, r6
 80094d0:	4604      	mov	r4, r0
 80094d2:	460d      	mov	r5, r1
 80094d4:	463b      	mov	r3, r7
 80094d6:	4640      	mov	r0, r8
 80094d8:	4649      	mov	r1, r9
 80094da:	f7f7 f895 	bl	8000608 <__aeabi_dmul>
 80094de:	4632      	mov	r2, r6
 80094e0:	463b      	mov	r3, r7
 80094e2:	f7f6 fedb 	bl	800029c <__adddf3>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4620      	mov	r0, r4
 80094ec:	4629      	mov	r1, r5
 80094ee:	f7f6 fed3 	bl	8000298 <__aeabi_dsub>
 80094f2:	4642      	mov	r2, r8
 80094f4:	464b      	mov	r3, r9
 80094f6:	f7f6 fecf 	bl	8000298 <__aeabi_dsub>
 80094fa:	460b      	mov	r3, r1
 80094fc:	4602      	mov	r2, r0
 80094fe:	493b      	ldr	r1, [pc, #236]	@ (80095ec <__ieee754_pow+0xa6c>)
 8009500:	2000      	movs	r0, #0
 8009502:	f7f6 fec9 	bl	8000298 <__aeabi_dsub>
 8009506:	ec41 0b10 	vmov	d0, r0, r1
 800950a:	ee10 3a90 	vmov	r3, s1
 800950e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009516:	da30      	bge.n	800957a <__ieee754_pow+0x9fa>
 8009518:	4650      	mov	r0, sl
 800951a:	f000 f87d 	bl	8009618 <scalbn>
 800951e:	ec51 0b10 	vmov	r0, r1, d0
 8009522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009526:	f7ff bbd2 	b.w	8008cce <__ieee754_pow+0x14e>
 800952a:	4c31      	ldr	r4, [pc, #196]	@ (80095f0 <__ieee754_pow+0xa70>)
 800952c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009530:	42a3      	cmp	r3, r4
 8009532:	d91a      	bls.n	800956a <__ieee754_pow+0x9ea>
 8009534:	4b2f      	ldr	r3, [pc, #188]	@ (80095f4 <__ieee754_pow+0xa74>)
 8009536:	440b      	add	r3, r1
 8009538:	4303      	orrs	r3, r0
 800953a:	d009      	beq.n	8009550 <__ieee754_pow+0x9d0>
 800953c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009540:	2200      	movs	r2, #0
 8009542:	2300      	movs	r3, #0
 8009544:	f7f7 fad2 	bl	8000aec <__aeabi_dcmplt>
 8009548:	3800      	subs	r0, #0
 800954a:	bf18      	it	ne
 800954c:	2001      	movne	r0, #1
 800954e:	e42b      	b.n	8008da8 <__ieee754_pow+0x228>
 8009550:	4642      	mov	r2, r8
 8009552:	464b      	mov	r3, r9
 8009554:	f7f6 fea0 	bl	8000298 <__aeabi_dsub>
 8009558:	4632      	mov	r2, r6
 800955a:	463b      	mov	r3, r7
 800955c:	f7f7 fada 	bl	8000b14 <__aeabi_dcmpge>
 8009560:	2800      	cmp	r0, #0
 8009562:	d1eb      	bne.n	800953c <__ieee754_pow+0x9bc>
 8009564:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8009604 <__ieee754_pow+0xa84>
 8009568:	e6f7      	b.n	800935a <__ieee754_pow+0x7da>
 800956a:	469a      	mov	sl, r3
 800956c:	4b22      	ldr	r3, [pc, #136]	@ (80095f8 <__ieee754_pow+0xa78>)
 800956e:	459a      	cmp	sl, r3
 8009570:	f63f aef3 	bhi.w	800935a <__ieee754_pow+0x7da>
 8009574:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009578:	e715      	b.n	80093a6 <__ieee754_pow+0x826>
 800957a:	ec51 0b10 	vmov	r0, r1, d0
 800957e:	4619      	mov	r1, r3
 8009580:	e7cf      	b.n	8009522 <__ieee754_pow+0x9a2>
 8009582:	491a      	ldr	r1, [pc, #104]	@ (80095ec <__ieee754_pow+0xa6c>)
 8009584:	2000      	movs	r0, #0
 8009586:	f7ff bb18 	b.w	8008bba <__ieee754_pow+0x3a>
 800958a:	2000      	movs	r0, #0
 800958c:	2100      	movs	r1, #0
 800958e:	f7ff bb14 	b.w	8008bba <__ieee754_pow+0x3a>
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7ff bb10 	b.w	8008bba <__ieee754_pow+0x3a>
 800959a:	460c      	mov	r4, r1
 800959c:	f7ff bb5e 	b.w	8008c5c <__ieee754_pow+0xdc>
 80095a0:	2400      	movs	r4, #0
 80095a2:	f7ff bb49 	b.w	8008c38 <__ieee754_pow+0xb8>
 80095a6:	bf00      	nop
 80095a8:	00000000 	.word	0x00000000
 80095ac:	3fe62e43 	.word	0x3fe62e43
 80095b0:	fefa39ef 	.word	0xfefa39ef
 80095b4:	3fe62e42 	.word	0x3fe62e42
 80095b8:	0ca86c39 	.word	0x0ca86c39
 80095bc:	be205c61 	.word	0xbe205c61
 80095c0:	72bea4d0 	.word	0x72bea4d0
 80095c4:	3e663769 	.word	0x3e663769
 80095c8:	c5d26bf1 	.word	0xc5d26bf1
 80095cc:	3ebbbd41 	.word	0x3ebbbd41
 80095d0:	af25de2c 	.word	0xaf25de2c
 80095d4:	3f11566a 	.word	0x3f11566a
 80095d8:	16bebd93 	.word	0x16bebd93
 80095dc:	3f66c16c 	.word	0x3f66c16c
 80095e0:	5555553e 	.word	0x5555553e
 80095e4:	3fc55555 	.word	0x3fc55555
 80095e8:	fff00000 	.word	0xfff00000
 80095ec:	3ff00000 	.word	0x3ff00000
 80095f0:	4090cbff 	.word	0x4090cbff
 80095f4:	3f6f3400 	.word	0x3f6f3400
 80095f8:	3fe00000 	.word	0x3fe00000
 80095fc:	652b82fe 	.word	0x652b82fe
 8009600:	3c971547 	.word	0x3c971547
 8009604:	4090cc00 	.word	0x4090cc00

08009608 <fabs>:
 8009608:	ec51 0b10 	vmov	r0, r1, d0
 800960c:	4602      	mov	r2, r0
 800960e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009612:	ec43 2b10 	vmov	d0, r2, r3
 8009616:	4770      	bx	lr

08009618 <scalbn>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	ec55 4b10 	vmov	r4, r5, d0
 800961e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009622:	4606      	mov	r6, r0
 8009624:	462b      	mov	r3, r5
 8009626:	b991      	cbnz	r1, 800964e <scalbn+0x36>
 8009628:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800962c:	4323      	orrs	r3, r4
 800962e:	d03d      	beq.n	80096ac <scalbn+0x94>
 8009630:	4b35      	ldr	r3, [pc, #212]	@ (8009708 <scalbn+0xf0>)
 8009632:	4620      	mov	r0, r4
 8009634:	4629      	mov	r1, r5
 8009636:	2200      	movs	r2, #0
 8009638:	f7f6 ffe6 	bl	8000608 <__aeabi_dmul>
 800963c:	4b33      	ldr	r3, [pc, #204]	@ (800970c <scalbn+0xf4>)
 800963e:	429e      	cmp	r6, r3
 8009640:	4604      	mov	r4, r0
 8009642:	460d      	mov	r5, r1
 8009644:	da0f      	bge.n	8009666 <scalbn+0x4e>
 8009646:	a328      	add	r3, pc, #160	@ (adr r3, 80096e8 <scalbn+0xd0>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	e01e      	b.n	800968c <scalbn+0x74>
 800964e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009652:	4291      	cmp	r1, r2
 8009654:	d10b      	bne.n	800966e <scalbn+0x56>
 8009656:	4622      	mov	r2, r4
 8009658:	4620      	mov	r0, r4
 800965a:	4629      	mov	r1, r5
 800965c:	f7f6 fe1e 	bl	800029c <__adddf3>
 8009660:	4604      	mov	r4, r0
 8009662:	460d      	mov	r5, r1
 8009664:	e022      	b.n	80096ac <scalbn+0x94>
 8009666:	460b      	mov	r3, r1
 8009668:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800966c:	3936      	subs	r1, #54	@ 0x36
 800966e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009672:	4296      	cmp	r6, r2
 8009674:	dd0d      	ble.n	8009692 <scalbn+0x7a>
 8009676:	2d00      	cmp	r5, #0
 8009678:	a11d      	add	r1, pc, #116	@ (adr r1, 80096f0 <scalbn+0xd8>)
 800967a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800967e:	da02      	bge.n	8009686 <scalbn+0x6e>
 8009680:	a11d      	add	r1, pc, #116	@ (adr r1, 80096f8 <scalbn+0xe0>)
 8009682:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009686:	a31a      	add	r3, pc, #104	@ (adr r3, 80096f0 <scalbn+0xd8>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f7f6 ffbc 	bl	8000608 <__aeabi_dmul>
 8009690:	e7e6      	b.n	8009660 <scalbn+0x48>
 8009692:	1872      	adds	r2, r6, r1
 8009694:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009698:	428a      	cmp	r2, r1
 800969a:	dcec      	bgt.n	8009676 <scalbn+0x5e>
 800969c:	2a00      	cmp	r2, #0
 800969e:	dd08      	ble.n	80096b2 <scalbn+0x9a>
 80096a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80096a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096ac:	ec45 4b10 	vmov	d0, r4, r5
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
 80096b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80096b6:	da08      	bge.n	80096ca <scalbn+0xb2>
 80096b8:	2d00      	cmp	r5, #0
 80096ba:	a10b      	add	r1, pc, #44	@ (adr r1, 80096e8 <scalbn+0xd0>)
 80096bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c0:	dac1      	bge.n	8009646 <scalbn+0x2e>
 80096c2:	a10f      	add	r1, pc, #60	@ (adr r1, 8009700 <scalbn+0xe8>)
 80096c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c8:	e7bd      	b.n	8009646 <scalbn+0x2e>
 80096ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096ce:	3236      	adds	r2, #54	@ 0x36
 80096d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80096d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096d8:	4620      	mov	r0, r4
 80096da:	4b0d      	ldr	r3, [pc, #52]	@ (8009710 <scalbn+0xf8>)
 80096dc:	4629      	mov	r1, r5
 80096de:	2200      	movs	r2, #0
 80096e0:	e7d4      	b.n	800968c <scalbn+0x74>
 80096e2:	bf00      	nop
 80096e4:	f3af 8000 	nop.w
 80096e8:	c2f8f359 	.word	0xc2f8f359
 80096ec:	01a56e1f 	.word	0x01a56e1f
 80096f0:	8800759c 	.word	0x8800759c
 80096f4:	7e37e43c 	.word	0x7e37e43c
 80096f8:	8800759c 	.word	0x8800759c
 80096fc:	fe37e43c 	.word	0xfe37e43c
 8009700:	c2f8f359 	.word	0xc2f8f359
 8009704:	81a56e1f 	.word	0x81a56e1f
 8009708:	43500000 	.word	0x43500000
 800970c:	ffff3cb0 	.word	0xffff3cb0
 8009710:	3c900000 	.word	0x3c900000

08009714 <with_errno>:
 8009714:	b510      	push	{r4, lr}
 8009716:	ed2d 8b02 	vpush	{d8}
 800971a:	eeb0 8a40 	vmov.f32	s16, s0
 800971e:	eef0 8a60 	vmov.f32	s17, s1
 8009722:	4604      	mov	r4, r0
 8009724:	f7fd f93a 	bl	800699c <__errno>
 8009728:	eeb0 0a48 	vmov.f32	s0, s16
 800972c:	eef0 0a68 	vmov.f32	s1, s17
 8009730:	ecbd 8b02 	vpop	{d8}
 8009734:	6004      	str	r4, [r0, #0]
 8009736:	bd10      	pop	{r4, pc}

08009738 <xflow>:
 8009738:	4603      	mov	r3, r0
 800973a:	b507      	push	{r0, r1, r2, lr}
 800973c:	ec51 0b10 	vmov	r0, r1, d0
 8009740:	b183      	cbz	r3, 8009764 <xflow+0x2c>
 8009742:	4602      	mov	r2, r0
 8009744:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009748:	e9cd 2300 	strd	r2, r3, [sp]
 800974c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009750:	f7f6 ff5a 	bl	8000608 <__aeabi_dmul>
 8009754:	ec41 0b10 	vmov	d0, r0, r1
 8009758:	2022      	movs	r0, #34	@ 0x22
 800975a:	b003      	add	sp, #12
 800975c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009760:	f7ff bfd8 	b.w	8009714 <with_errno>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e7ee      	b.n	8009748 <xflow+0x10>
 800976a:	0000      	movs	r0, r0
 800976c:	0000      	movs	r0, r0
	...

08009770 <__math_uflow>:
 8009770:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009778 <__math_uflow+0x8>
 8009774:	f7ff bfe0 	b.w	8009738 <xflow>
 8009778:	00000000 	.word	0x00000000
 800977c:	10000000 	.word	0x10000000

08009780 <__math_oflow>:
 8009780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009788 <__math_oflow+0x8>
 8009784:	f7ff bfd8 	b.w	8009738 <xflow>
 8009788:	00000000 	.word	0x00000000
 800978c:	70000000 	.word	0x70000000

08009790 <__ieee754_sqrt>:
 8009790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	4a68      	ldr	r2, [pc, #416]	@ (8009938 <__ieee754_sqrt+0x1a8>)
 8009796:	ec55 4b10 	vmov	r4, r5, d0
 800979a:	43aa      	bics	r2, r5
 800979c:	462b      	mov	r3, r5
 800979e:	4621      	mov	r1, r4
 80097a0:	d110      	bne.n	80097c4 <__ieee754_sqrt+0x34>
 80097a2:	4622      	mov	r2, r4
 80097a4:	4620      	mov	r0, r4
 80097a6:	4629      	mov	r1, r5
 80097a8:	f7f6 ff2e 	bl	8000608 <__aeabi_dmul>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4620      	mov	r0, r4
 80097b2:	4629      	mov	r1, r5
 80097b4:	f7f6 fd72 	bl	800029c <__adddf3>
 80097b8:	4604      	mov	r4, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	ec45 4b10 	vmov	d0, r4, r5
 80097c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	dc0e      	bgt.n	80097e6 <__ieee754_sqrt+0x56>
 80097c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80097cc:	4322      	orrs	r2, r4
 80097ce:	d0f5      	beq.n	80097bc <__ieee754_sqrt+0x2c>
 80097d0:	b19d      	cbz	r5, 80097fa <__ieee754_sqrt+0x6a>
 80097d2:	4622      	mov	r2, r4
 80097d4:	4620      	mov	r0, r4
 80097d6:	4629      	mov	r1, r5
 80097d8:	f7f6 fd5e 	bl	8000298 <__aeabi_dsub>
 80097dc:	4602      	mov	r2, r0
 80097de:	460b      	mov	r3, r1
 80097e0:	f7f7 f83c 	bl	800085c <__aeabi_ddiv>
 80097e4:	e7e8      	b.n	80097b8 <__ieee754_sqrt+0x28>
 80097e6:	152a      	asrs	r2, r5, #20
 80097e8:	d115      	bne.n	8009816 <__ieee754_sqrt+0x86>
 80097ea:	2000      	movs	r0, #0
 80097ec:	e009      	b.n	8009802 <__ieee754_sqrt+0x72>
 80097ee:	0acb      	lsrs	r3, r1, #11
 80097f0:	3a15      	subs	r2, #21
 80097f2:	0549      	lsls	r1, r1, #21
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d0fa      	beq.n	80097ee <__ieee754_sqrt+0x5e>
 80097f8:	e7f7      	b.n	80097ea <__ieee754_sqrt+0x5a>
 80097fa:	462a      	mov	r2, r5
 80097fc:	e7fa      	b.n	80097f4 <__ieee754_sqrt+0x64>
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	3001      	adds	r0, #1
 8009802:	02dc      	lsls	r4, r3, #11
 8009804:	d5fb      	bpl.n	80097fe <__ieee754_sqrt+0x6e>
 8009806:	1e44      	subs	r4, r0, #1
 8009808:	1b12      	subs	r2, r2, r4
 800980a:	f1c0 0420 	rsb	r4, r0, #32
 800980e:	fa21 f404 	lsr.w	r4, r1, r4
 8009812:	4323      	orrs	r3, r4
 8009814:	4081      	lsls	r1, r0
 8009816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800981a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800981e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009822:	07d2      	lsls	r2, r2, #31
 8009824:	bf5c      	itt	pl
 8009826:	005b      	lslpl	r3, r3, #1
 8009828:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800982c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009830:	bf58      	it	pl
 8009832:	0049      	lslpl	r1, r1, #1
 8009834:	2600      	movs	r6, #0
 8009836:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800983a:	106d      	asrs	r5, r5, #1
 800983c:	0049      	lsls	r1, r1, #1
 800983e:	2016      	movs	r0, #22
 8009840:	4632      	mov	r2, r6
 8009842:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009846:	1917      	adds	r7, r2, r4
 8009848:	429f      	cmp	r7, r3
 800984a:	bfde      	ittt	le
 800984c:	193a      	addle	r2, r7, r4
 800984e:	1bdb      	suble	r3, r3, r7
 8009850:	1936      	addle	r6, r6, r4
 8009852:	0fcf      	lsrs	r7, r1, #31
 8009854:	3801      	subs	r0, #1
 8009856:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800985a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800985e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009862:	d1f0      	bne.n	8009846 <__ieee754_sqrt+0xb6>
 8009864:	4604      	mov	r4, r0
 8009866:	2720      	movs	r7, #32
 8009868:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800986c:	429a      	cmp	r2, r3
 800986e:	eb00 0e0c 	add.w	lr, r0, ip
 8009872:	db02      	blt.n	800987a <__ieee754_sqrt+0xea>
 8009874:	d113      	bne.n	800989e <__ieee754_sqrt+0x10e>
 8009876:	458e      	cmp	lr, r1
 8009878:	d811      	bhi.n	800989e <__ieee754_sqrt+0x10e>
 800987a:	f1be 0f00 	cmp.w	lr, #0
 800987e:	eb0e 000c 	add.w	r0, lr, ip
 8009882:	da42      	bge.n	800990a <__ieee754_sqrt+0x17a>
 8009884:	2800      	cmp	r0, #0
 8009886:	db40      	blt.n	800990a <__ieee754_sqrt+0x17a>
 8009888:	f102 0801 	add.w	r8, r2, #1
 800988c:	1a9b      	subs	r3, r3, r2
 800988e:	458e      	cmp	lr, r1
 8009890:	bf88      	it	hi
 8009892:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8009896:	eba1 010e 	sub.w	r1, r1, lr
 800989a:	4464      	add	r4, ip
 800989c:	4642      	mov	r2, r8
 800989e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80098a2:	3f01      	subs	r7, #1
 80098a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80098a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80098ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80098b0:	d1dc      	bne.n	800986c <__ieee754_sqrt+0xdc>
 80098b2:	4319      	orrs	r1, r3
 80098b4:	d01b      	beq.n	80098ee <__ieee754_sqrt+0x15e>
 80098b6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800993c <__ieee754_sqrt+0x1ac>
 80098ba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009940 <__ieee754_sqrt+0x1b0>
 80098be:	e9da 0100 	ldrd	r0, r1, [sl]
 80098c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80098c6:	f7f6 fce7 	bl	8000298 <__aeabi_dsub>
 80098ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	f7f7 f913 	bl	8000b00 <__aeabi_dcmple>
 80098da:	b140      	cbz	r0, 80098ee <__ieee754_sqrt+0x15e>
 80098dc:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80098e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80098e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80098e8:	d111      	bne.n	800990e <__ieee754_sqrt+0x17e>
 80098ea:	3601      	adds	r6, #1
 80098ec:	463c      	mov	r4, r7
 80098ee:	1072      	asrs	r2, r6, #1
 80098f0:	0863      	lsrs	r3, r4, #1
 80098f2:	07f1      	lsls	r1, r6, #31
 80098f4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80098f8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80098fc:	bf48      	it	mi
 80098fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009902:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009906:	4618      	mov	r0, r3
 8009908:	e756      	b.n	80097b8 <__ieee754_sqrt+0x28>
 800990a:	4690      	mov	r8, r2
 800990c:	e7be      	b.n	800988c <__ieee754_sqrt+0xfc>
 800990e:	f7f6 fcc5 	bl	800029c <__adddf3>
 8009912:	e9da 8900 	ldrd	r8, r9, [sl]
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	f7f7 f8e5 	bl	8000aec <__aeabi_dcmplt>
 8009922:	b120      	cbz	r0, 800992e <__ieee754_sqrt+0x19e>
 8009924:	1ca0      	adds	r0, r4, #2
 8009926:	bf08      	it	eq
 8009928:	3601      	addeq	r6, #1
 800992a:	3402      	adds	r4, #2
 800992c:	e7df      	b.n	80098ee <__ieee754_sqrt+0x15e>
 800992e:	1c63      	adds	r3, r4, #1
 8009930:	f023 0401 	bic.w	r4, r3, #1
 8009934:	e7db      	b.n	80098ee <__ieee754_sqrt+0x15e>
 8009936:	bf00      	nop
 8009938:	7ff00000 	.word	0x7ff00000
 800993c:	200001e0 	.word	0x200001e0
 8009940:	200001d8 	.word	0x200001d8

08009944 <_init>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	bf00      	nop
 8009948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994a:	bc08      	pop	{r3}
 800994c:	469e      	mov	lr, r3
 800994e:	4770      	bx	lr

08009950 <_fini>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr
